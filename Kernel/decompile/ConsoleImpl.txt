
build/kernel/Input/ConsoleImpl.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <Console::~Console()>:
}

Console::~Console()
{

}
   0:	c3                   	ret    
   1:	90                   	nop
   2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   9:	00 00 00 00 
   d:	0f 1f 00             	nopl   (%rax)

0000000000000010 <Console::RenderModifiers()>:
}



void Console::RenderModifiers()
{
  10:	55                   	push   %rbp
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
    bool shift = m_KeyModifiers & KeyModifiersShift;
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
    bool alt = m_KeyModifiers & KeyModifiersAlt;

    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	45 31 c0             	xor    %r8d,%r8d
  14:	31 f6                	xor    %esi,%esi
  16:	b9 0f 00 00 00       	mov    $0xf,%ecx
  1b:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  22:	00 00 00 
{
  25:	48 89 e5             	mov    %rsp,%rbp
  28:	41 57                	push   %r15
  2a:	41 56                	push   %r14
  2c:	41 55                	push   %r13
  2e:	41 54                	push   %r12
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  30:	49 bc 00 00 00 00 00 	movabs $0x0,%r12
  37:	00 00 00 
{
  3a:	53                   	push   %rbx
  3b:	48 89 fb             	mov    %rdi,%rbx
  3e:	48 83 ec 18          	sub    $0x18,%rsp
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  42:	44 0f b6 6f 08       	movzbl 0x8(%rdi),%r13d
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  47:	48 8b 3f             	mov    (%rdi),%rdi
  4a:	44 89 e8             	mov    %r13d,%eax
  4d:	45 89 ef             	mov    %r13d,%r15d
  50:	45 89 ee             	mov    %r13d,%r14d
  53:	83 e0 04             	and    $0x4,%eax
  56:	41 83 e7 02          	and    $0x2,%r15d
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5a:	41 83 e6 01          	and    $0x1,%r14d
  5e:	88 45 cf             	mov    %al,-0x31(%rbp)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  61:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  64:	41 83 e5 08          	and    $0x8,%r13d
  68:	48 8b 3b             	mov    (%rbx),%rdi
  6b:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
  71:	48 b9 00 00 00 00 00 	movabs $0x0,%rcx
  78:	00 00 00 
  7b:	be 09 00 00 00       	mov    $0x9,%esi
  80:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  87:	00 00 00 
  8a:	48 0f 44 d1          	cmove  %rcx,%rdx
  8e:	31 c9                	xor    %ecx,%ecx
  90:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  93:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  97:	48 8b 3b             	mov    (%rbx),%rdi
  9a:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  a1:	00 00 00 
  a4:	89 c6                	mov    %eax,%esi
  a6:	40 f6 de             	neg    %sil
  a9:	be 0d 00 00 00       	mov    $0xd,%esi
  ae:	45 19 c0             	sbb    %r8d,%r8d
  b1:	3c 01                	cmp    $0x1,%al
  b3:	19 c9                	sbb    %ecx,%ecx
  b5:	41 83 e0 0f          	and    $0xf,%r8d
  b9:	83 e1 0f             	and    $0xf,%ecx
  bc:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  bf:	44 89 f8             	mov    %r15d,%eax
  c2:	48 8b 3b             	mov    (%rbx),%rdi
  c5:	be 14 00 00 00       	mov    $0x14,%esi
  ca:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  d1:	00 00 00 
  d4:	f6 d8                	neg    %al
  d6:	45 19 c0             	sbb    %r8d,%r8d
  d9:	41 80 ff 01          	cmp    $0x1,%r15b
  dd:	19 c9                	sbb    %ecx,%ecx
  df:	41 83 e0 0f          	and    $0xf,%r8d
  e3:	83 e1 0f             	and    $0xf,%ecx
  e6:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  e9:	45 89 f0             	mov    %r14d,%r8d
  ec:	48 8b 3b             	mov    (%rbx),%rdi
  ef:	be 1c 00 00 00       	mov    $0x1c,%esi
  f4:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  fb:	00 00 00 
  fe:	41 c1 e0 1f          	shl    $0x1f,%r8d
 102:	41 c1 f8 1f          	sar    $0x1f,%r8d
 106:	41 80 fe 01          	cmp    $0x1,%r14b
 10a:	19 c9                	sbb    %ecx,%ecx
 10c:	41 83 e0 0f          	and    $0xf,%r8d
 110:	83 e1 0f             	and    $0xf,%ecx
 113:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 116:	48 8b 3b             	mov    (%rbx),%rdi
}
 119:	48 83 c4 18          	add    $0x18,%rsp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 11d:	4c 89 e0             	mov    %r12,%rax
}
 120:	5b                   	pop    %rbx
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 121:	45 31 c0             	xor    %r8d,%r8d
}
 124:	41 5c                	pop    %r12
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 126:	b9 0f 00 00 00       	mov    $0xf,%ecx
 12b:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 132:	00 00 00 
}
 135:	41 5d                	pop    %r13
 137:	41 5e                	pop    %r14
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 139:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
 140:	00 00 00 
}
 143:	41 5f                	pop    %r15
 145:	5d                   	pop    %rbp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 146:	ff e0                	jmp    *%rax
 148:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 14f:	00 

0000000000000150 <Console::Refresh()>:
{
 150:	55                   	push   %rbp
 151:	48 89 e5             	mov    %rsp,%rbp
 154:	53                   	push   %rbx
 155:	48 89 fb             	mov    %rdi,%rbx
 158:	48 83 ec 08          	sub    $0x8,%rsp
    m_TextPresenter->Clear();
 15c:	48 8b 3f             	mov    (%rdi),%rdi
 15f:	48 8b 07             	mov    (%rdi),%rax
 162:	ff 10                	call   *(%rax)
    RenderModifiers();
 164:	48 89 df             	mov    %rbx,%rdi
 167:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 16e:	00 00 00 
 171:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 173:	48 8b 3b             	mov    (%rbx),%rdi
 176:	45 31 c0             	xor    %r8d,%r8d
}
 179:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17d:	b9 0f 00 00 00       	mov    $0xf,%ecx
 182:	ba 3e 00 00 00       	mov    $0x3e,%edx
 187:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
 18e:	00 00 00 
 191:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 198:	00 00 00 
}
 19b:	c9                   	leave  
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 19c:	ff e0                	jmp    *%rax
 19e:	66 90                	xchg   %ax,%ax

00000000000001a0 <Console::Console()>:
  : m_TextPresenter(new Video::TextModePresenter()),
 1a0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1a7:	00 00 00 
Console::Console()
 1aa:	55                   	push   %rbp
 1ab:	48 89 e5             	mov    %rsp,%rbp
 1ae:	41 54                	push   %r12
 1b0:	49 89 fc             	mov    %rdi,%r12
  : m_TextPresenter(new Video::TextModePresenter()),
 1b3:	bf 30 00 00 00       	mov    $0x30,%edi
Console::Console()
 1b8:	53                   	push   %rbx
  : m_TextPresenter(new Video::TextModePresenter()),
 1b9:	ff d0                	call   *%rax
 1bb:	48 89 c3             	mov    %rax,%rbx
 1be:	48 89 c7             	mov    %rax,%rdi
 1c1:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1c8:	00 00 00 
 1cb:	ff d0                	call   *%rax
 1cd:	49 89 1c 24          	mov    %rbx,(%r12)
    m_Buffers(new uint8_t[23 * 80]),
 1d1:	bf 30 07 00 00       	mov    $0x730,%edi
 1d6:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1dd:	00 00 00 
    m_KeyModifiers(0)
 1e0:	41 c6 44 24 08 00    	movb   $0x0,0x8(%r12)
    m_Buffers(new uint8_t[23 * 80]),
 1e6:	ff d0                	call   *%rax
}
 1e8:	5b                   	pop    %rbx
    Refresh();
 1e9:	4c 89 e7             	mov    %r12,%rdi
    m_Buffers(new uint8_t[23 * 80]),
 1ec:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    m_OffsetX(0),
 1f1:	31 c0                	xor    %eax,%eax
 1f3:	66 41 89 44 24 19    	mov    %ax,0x19(%r12)
}
 1f9:	41 5c                	pop    %r12
    Refresh();
 1fb:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 202:	00 00 00 
}
 205:	5d                   	pop    %rbp
    Refresh();
 206:	ff e0                	jmp    *%rax
 208:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 20f:	00 

0000000000000210 <Console::Render()>:
    RenderModifiers();
 210:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 217:	00 00 00 
{
 21a:	55                   	push   %rbp
 21b:	48 89 e5             	mov    %rsp,%rbp
 21e:	53                   	push   %rbx
 21f:	48 89 fb             	mov    %rdi,%rbx
 222:	48 83 ec 08          	sub    $0x8,%rsp
    RenderModifiers();
 226:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 228:	48 8b 3b             	mov    (%rbx),%rdi
 22b:	45 31 c0             	xor    %r8d,%r8d
}
 22e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 232:	b9 0f 00 00 00       	mov    $0xf,%ecx
 237:	ba 3e 00 00 00       	mov    $0x3e,%edx
 23c:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
 243:	00 00 00 
 246:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 24d:	00 00 00 
}
 250:	c9                   	leave  
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 251:	ff e0                	jmp    *%rax
 253:	90                   	nop
 254:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
 25b:	00 00 00 00 
 25f:	90                   	nop

0000000000000260 <Console::AddChar(char)>:
        break;
    }
}

void Console::AddChar(char c)
{
 260:	55                   	push   %rbp
 261:	41 89 f0             	mov    %esi,%r8d
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 264:	b9 0f 00 00 00       	mov    $0xf,%ecx
 269:	41 0f be d0          	movsbl %r8b,%edx
 26d:	45 31 c0             	xor    %r8d,%r8d
{
 270:	48 89 e5             	mov    %rsp,%rbp
 273:	41 54                	push   %r12
 275:	49 89 fc             	mov    %rdi,%r12
 278:	48 83 ec 08          	sub    $0x8,%rsp
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 27c:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
 282:	41 0f b6 74 24 19    	movzbl 0x19(%r12),%esi
 288:	48 8b 3f             	mov    (%rdi),%rdi
 28b:	48 83 c0 02          	add    $0x2,%rax
 28f:	48 c1 e0 20          	shl    $0x20,%rax
 293:	48 09 c6             	or     %rax,%rsi
 296:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 29d:	00 00 00 
 2a0:	ff d0                	call   *%rax
    m_LineLength++;
    if (++m_OffsetX >= 80)
 2a2:	41 0f b6 44 24 19    	movzbl 0x19(%r12),%eax
    m_LineLength++;
 2a8:	41 80 44 24 1b 01    	addb   $0x1,0x1b(%r12)
    if (++m_OffsetX >= 80)
 2ae:	83 c0 01             	add    $0x1,%eax
 2b1:	3c 4f                	cmp    $0x4f,%al
 2b3:	77 0b                	ja     2c0 <Console::AddChar(char)+0x60>
 2b5:	41 88 44 24 19       	mov    %al,0x19(%r12)
        {
            m_TextPresenter->MoveUp();
            RenderModifiers();
        } else m_OffsetY++;
    }
 2ba:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 2be:	c9                   	leave  
 2bf:	c3                   	ret    
        if (m_OffsetY >= 22)
 2c0:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
        m_OffsetX = 0;
 2c6:	41 c6 44 24 19 00    	movb   $0x0,0x19(%r12)
        if (m_OffsetY >= 22)
 2cc:	3c 15                	cmp    $0x15,%al
 2ce:	77 10                	ja     2e0 <Console::AddChar(char)+0x80>
        } else m_OffsetY++;
 2d0:	83 c0 01             	add    $0x1,%eax
 2d3:	41 88 44 24 1a       	mov    %al,0x1a(%r12)
 2d8:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 2dc:	c9                   	leave  
 2dd:	c3                   	ret    
 2de:	66 90                	xchg   %ax,%ax
            m_TextPresenter->MoveUp();
 2e0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 2e7:	00 00 00 
 2ea:	49 8b 3c 24          	mov    (%r12),%rdi
 2ee:	ff d0                	call   *%rax
            RenderModifiers();
 2f0:	4c 89 e7             	mov    %r12,%rdi
 2f3:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
            RenderModifiers();
 2f7:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 2fe:	00 00 00 
 301:	c9                   	leave  
            RenderModifiers();
 302:	ff e0                	jmp    *%rax
 304:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
 30b:	00 00 00 00 
 30f:	90                   	nop

0000000000000310 <Console::AcceptKey(Input::Key, bool)>:
{
 310:	55                   	push   %rbp
    switch (key)
 311:	8d 46 fb             	lea    -0x5(%rsi),%eax
{
 314:	48 89 e5             	mov    %rsp,%rbp
 317:	41 54                	push   %r12
 319:	49 89 fc             	mov    %rdi,%r12
 31c:	89 f7                	mov    %esi,%edi
 31e:	48 83 ec 18          	sub    $0x18,%rsp
    switch (key)
 322:	83 f8 1d             	cmp    $0x1d,%eax
 325:	77 11                	ja     338 <Console::AcceptKey(Input::Key, bool)+0x28>
 327:	48 b9 00 00 00 00 00 	movabs $0x0,%rcx
 32e:	00 00 00 
 331:	ff 24 c1             	jmp    *(%rcx,%rax,8)
 334:	0f 1f 40 00          	nopl   0x0(%rax)
 338:	89 55 ec             	mov    %edx,-0x14(%rbp)
        char code = ApplyModifiers(key, m_KeyModifiers);
 33b:	41 0f b6 74 24 08    	movzbl 0x8(%r12),%esi
 341:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 348:	00 00 00 
 34b:	ff d0                	call   *%rax
        if (!code || !isPressed || m_LineLength == 255) break;
 34d:	84 c0                	test   %al,%al
 34f:	74 14                	je     365 <Console::AcceptKey(Input::Key, bool)+0x55>
 351:	8b 55 ec             	mov    -0x14(%rbp),%edx
 354:	80 fa 01             	cmp    $0x1,%dl
 357:	75 0c                	jne    365 <Console::AcceptKey(Input::Key, bool)+0x55>
 359:	41 80 7c 24 1b ff    	cmpb   $0xff,0x1b(%r12)
 35f:	0f 85 13 01 00 00    	jne    478 <Console::AcceptKey(Input::Key, bool)+0x168>
}
 365:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 369:	c9                   	leave  
 36a:	c3                   	ret    
 36b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 370:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersShift;
 376:	89 c1                	mov    %eax,%ecx
 378:	83 e0 fd             	and    $0xfffffffd,%eax
 37b:	83 c9 02             	or     $0x2,%ecx
 37e:	84 d2                	test   %dl,%dl
 380:	0f 45 c1             	cmovne %ecx,%eax
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 383:	41 88 44 24 08       	mov    %al,0x8(%r12)
        RenderModifiers();
 388:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 38f:	00 00 00 
 392:	4c 89 e7             	mov    %r12,%rdi
}
 395:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 399:	c9                   	leave  
        RenderModifiers();
 39a:	ff e0                	jmp    *%rax
 39c:	0f 1f 40 00          	nopl   0x0(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3a0:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersCtrl;
 3a6:	89 c1                	mov    %eax,%ecx
 3a8:	83 e0 fb             	and    $0xfffffffb,%eax
 3ab:	83 c9 04             	or     $0x4,%ecx
 3ae:	84 d2                	test   %dl,%dl
 3b0:	0f 45 c1             	cmovne %ecx,%eax
 3b3:	eb ce                	jmp    383 <Console::AcceptKey(Input::Key, bool)+0x73>
 3b5:	0f 1f 00             	nopl   (%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3b8:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersAlt;
 3be:	89 c1                	mov    %eax,%ecx
 3c0:	83 e0 fe             	and    $0xfffffffe,%eax
 3c3:	83 c9 01             	or     $0x1,%ecx
 3c6:	84 d2                	test   %dl,%dl
 3c8:	0f 45 c1             	cmovne %ecx,%eax
 3cb:	eb b6                	jmp    383 <Console::AcceptKey(Input::Key, bool)+0x73>
 3cd:	0f 1f 00             	nopl   (%rax)
        if (isPressed)
 3d0:	84 d2                	test   %dl,%dl
 3d2:	74 b4                	je     388 <Console::AcceptKey(Input::Key, bool)+0x78>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3d4:	41 0f b6 54 24 08    	movzbl 0x8(%r12),%edx
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 3da:	89 d1                	mov    %edx,%ecx
 3dc:	89 d0                	mov    %edx,%eax
 3de:	83 c9 08             	or     $0x8,%ecx
 3e1:	83 e0 f7             	and    $0xfffffff7,%eax
 3e4:	83 e2 08             	and    $0x8,%edx
 3e7:	0f 44 c1             	cmove  %ecx,%eax
 3ea:	eb 97                	jmp    383 <Console::AcceptKey(Input::Key, bool)+0x73>
 3ec:	0f 1f 40 00          	nopl   0x0(%rax)
        AddChar(' '); break;
 3f0:	be 20 00 00 00       	mov    $0x20,%esi
        AddChar(code);
 3f5:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 3fc:	00 00 00 
 3ff:	4c 89 e7             	mov    %r12,%rdi
}
 402:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 406:	c9                   	leave  
        AddChar(code);
 407:	ff e0                	jmp    *%rax
 409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        m_TextPresenter->Clear();
 410:	49 8b 3c 24          	mov    (%r12),%rdi
 414:	48 8b 07             	mov    (%rdi),%rax
 417:	ff 10                	call   *(%rax)
 419:	e9 6a ff ff ff       	jmp    388 <Console::AcceptKey(Input::Key, bool)+0x78>
 41e:	66 90                	xchg   %ax,%ax
        if (!isPressed) break;
 420:	84 d2                	test   %dl,%dl
 422:	0f 84 3d ff ff ff    	je     365 <Console::AcceptKey(Input::Key, bool)+0x55>
        if (m_OffsetY >= 22)
 428:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
        m_TextPresenter->Clear();
 42e:	49 8b 3c 24          	mov    (%r12),%rdi
        m_LineLength = 0;
 432:	41 c6 44 24 1b 00    	movb   $0x0,0x1b(%r12)
        m_OffsetX = 1;
 438:	41 c6 44 24 19 01    	movb   $0x1,0x19(%r12)
        if (m_OffsetY >= 22)
 43e:	3c 15                	cmp    $0x15,%al
 440:	77 3e                	ja     480 <Console::AcceptKey(Input::Key, bool)+0x170>
        } else m_OffsetY++;
 442:	83 c0 01             	add    $0x1,%eax
 445:	41 88 44 24 1a       	mov    %al,0x1a(%r12)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 44a:	0f b6 c0             	movzbl %al,%eax
}
 44d:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 451:	45 31 c0             	xor    %r8d,%r8d
 454:	b9 0f 00 00 00       	mov    $0xf,%ecx
}
 459:	c9                   	leave  
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45a:	48 8d 70 02          	lea    0x2(%rax),%rsi
 45e:	ba 3e 00 00 00       	mov    $0x3e,%edx
 463:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 46a:	00 00 00 
 46d:	48 c1 e6 20          	shl    $0x20,%rsi
 471:	ff e0                	jmp    *%rax
 473:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        AddChar(code);
 478:	0f be f0             	movsbl %al,%esi
 47b:	e9 75 ff ff ff       	jmp    3f5 <Console::AcceptKey(Input::Key, bool)+0xe5>
            m_TextPresenter->MoveUp();
 480:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 487:	00 00 00 
 48a:	ff d0                	call   *%rax
            RenderModifiers();
 48c:	4c 89 e7             	mov    %r12,%rdi
 48f:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 496:	00 00 00 
 499:	ff d0                	call   *%rax
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 49b:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
 4a1:	49 8b 3c 24          	mov    (%r12),%rdi
 4a5:	eb a3                	jmp    44a <Console::AcceptKey(Input::Key, bool)+0x13a>
 4a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 4ae:	00 00 

00000000000004b0 <ConsoleKeyEventHandler(Input::Key, bool)>:
    console->AcceptKey(key, isPressed);
 4b0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 4b7:	00 00 00 
 4ba:	40 0f b6 d6          	movzbl %sil,%edx
 4be:	89 fe                	mov    %edi,%esi
 4c0:	48 8b 38             	mov    (%rax),%rdi
 4c3:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 4ca:	00 00 00 
 4cd:	ff e0                	jmp    *%rax

Disassembly of section .rodata.str1.1:

0000000000000000 <.rodata.str1.1>:
   0:	20 41 20             	and    %al,0x20(%rcx)
   3:	00 20                	add    %ah,(%rax)
   5:	61                   	(bad)  
   6:	20 00                	and    %al,(%rax)
   8:	20 43 74             	and    %al,0x74(%rbx)
   b:	72 6c                	jb     79 <Console::RenderModifiers()+0x69>
   d:	20 00                	and    %al,(%rax)
   f:	20 53 68             	and    %dl,0x68(%rbx)
  12:	69 66 74 20 00 20 41 	imul   $0x41200020,0x74(%rsi),%esp
  19:	6c                   	insb   (%dx),%es:(%rdi)
  1a:	74 20                	je     3c <Console::RenderModifiers()+0x2c>
	...

Disassembly of section .rodata.str1.8:

0000000000000000 <.rodata.str1.8>:
   0:	43 61                	rex.XB (bad) 
   2:	70 73                	jo     77 <.rodata.str1.8+0x77>
   4:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
   6:	63 6b 3a             	movsxd 0x3a(%rbx),%ebp
   9:	20 20                	and    %ah,(%rax)
   b:	20 7c 20 20          	and    %bh,0x20(%rax,%riz,1)
   f:	20 20                	and    %ah,(%rax)
  11:	20 20                	and    %ah,(%rax)
  13:	7c 20                	jl     35 <.rodata.str1.8+0x35>
  15:	20 20                	and    %ah,(%rax)
  17:	20 20                	and    %ah,(%rax)
  19:	20 20                	and    %ah,(%rax)
  1b:	7c 20                	jl     3d <.rodata.str1.8+0x3d>
  1d:	20 20                	and    %ah,(%rax)
  1f:	20 20                	and    %ah,(%rax)
  21:	7c 20                	jl     43 <.rodata.str1.8+0x43>
  23:	20 20                	and    %ah,(%rax)
  25:	20 20                	and    %ah,(%rax)
  27:	20 20                	and    %ah,(%rax)
  29:	20 20                	and    %ah,(%rax)
  2b:	20 20                	and    %ah,(%rax)
  2d:	20 20                	and    %ah,(%rax)
  2f:	20 20                	and    %ah,(%rax)
  31:	20 20                	and    %ah,(%rax)
  33:	20 20                	and    %ah,(%rax)
  35:	20 20                	and    %ah,(%rax)
  37:	20 20                	and    %ah,(%rax)
  39:	20 20                	and    %ah,(%rax)
  3b:	20 20                	and    %ah,(%rax)
  3d:	20 20                	and    %ah,(%rax)
  3f:	20 20                	and    %ah,(%rax)
  41:	20 20                	and    %ah,(%rax)
  43:	20 20                	and    %ah,(%rax)
  45:	20 20                	and    %ah,(%rax)
  47:	20 20                	and    %ah,(%rax)
  49:	20 20                	and    %ah,(%rax)
  4b:	20 20                	and    %ah,(%rax)
  4d:	20 20                	and    %ah,(%rax)
  4f:	20 00                	and    %al,(%rax)
  51:	00 00                	add    %al,(%rax)
  53:	00 00                	add    %al,(%rax)
  55:	00 00                	add    %al,(%rax)
  57:	00 2d 2d 2d 2d 2d    	add    %ch,0x2d2d2d2d(%rip)        # 2d2d2d8a <ConsoleKeyEventHandler(Input::Key, bool)+0x2d2d28da>
  5d:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  62:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  67:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  6c:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  71:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  76:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  7b:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  80:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  85:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  8a:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  8f:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  94:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  99:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  9e:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  a3:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
	...

Disassembly of section .rodata:

0000000000000000 <.rodata>:
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
}
   0:	39 0c 00             	cmp    %ecx,(%rax,%rax,1)
   3:	00 05 00 01 08 00    	add    %al,0x80100(%rip)        # 80109 <ConsoleKeyEventHandler(Input::Key, bool)+0x7fc59>
   9:	00 00                	add    %al,(%rax)
   b:	00 1d 00 00 00 00    	add    %bl,0x0(%rip)        # 11 <.debug_info+0x11>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	21 00                	and    %eax,(%rax)
	...
  1f:	00 00                	add    %al,(%rax)
  21:	00 cf                	add    %cl,%bh
  23:	04 00                	add    $0x0,%al
	...
{
  2d:	00 06                	add    %al,(%rsi)
  2f:	01 06                	add    %eax,(%rsi)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  31:	00 00                	add    %al,(%rax)
  33:	00 00                	add    %al,(%rax)
  35:	06                   	(bad)  
  36:	02 05 00 00 00 00    	add    0x0(%rip),%al        # 3c <.debug_info+0x3c>
{
  3c:	1e                   	(bad)  
  3d:	04 05                	add    $0x5,%al
  3f:	69 6e 74 00 0d 3c 00 	imul   $0x3c0d00,0x74(%rsi),%ebp
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  46:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  48:	06                   	(bad)  
  49:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 4f <.debug_info+0x4f>
  4f:	1f                   	(bad)  
  50:	00 00                	add    %al,(%rax)
  52:	00 00                	add    %al,(%rax)
  54:	06                   	(bad)  
  55:	2e 18 5b 00          	cs sbb %bl,0x0(%rbx)
  59:	00 00                	add    %al,(%rax)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5b:	06                   	(bad)  
  5c:	01 08                	add    %ecx,(%rax)
  5e:	00 00                	add    %al,(%rax)
  60:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  62:	06                   	(bad)  
  63:	02 07                	add    (%rdi),%al
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  65:	00 00                	add    %al,(%rax)
  67:	00 00                	add    %al,(%rax)
  69:	06                   	(bad)  
  6a:	04 07                	add    $0x7,%al
  6c:	00 00                	add    %al,(%rax)
  6e:	00 00                	add    %al,(%rax)
  70:	06                   	(bad)  
  71:	08 07                	or     %al,(%rdi)
  73:	00 00                	add    %al,(%rax)
  75:	00 00                	add    %al,(%rax)
  77:	06                   	(bad)  
  78:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 7e <.debug_info+0x7e>
  7e:	06                   	(bad)  
  7f:	10 04 00             	adc    %al,(%rax,%rax,1)
  82:	00 00                	add    %al,(%rax)
  84:	00 20                	add    %ah,(%rax)
  86:	00 00                	add    %al,(%rax)
  88:	00 00                	add    %al,(%rax)
  8a:	14 00                	adc    $0x0,%al
  8c:	00 00                	add    %al,(%rax)
  8e:	00 02                	add    %al,(%rdx)
  90:	05 29 04 00 00       	add    $0x429,%eax
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  95:	21 4b 65             	and    %ecx,0x65(%rbx)
  98:	79 00                	jns    9a <.debug_info+0x9a>
  9a:	07                   	(bad)  
  9b:	04 69                	add    $0x69,%al
  9d:	00 00                	add    %al,(%rax)
  9f:	00 02                	add    %al,(%rdx)
  a1:	07                   	(bad)  
  a2:	0a e2                	or     %dl,%ah
  a4:	03 00                	add    (%rax),%eax
  a6:	00 01                	add    %al,(%rcx)
  a8:	00 00                	add    %al,(%rax)
  aa:	00 00                	add    %al,(%rax)
  ac:	00 03                	add    %al,(%rbx)
  ae:	46 31 00             	rex.RX xor %r8d,(%rax)
  b1:	01 03                	add    %eax,(%rbx)
  b3:	46 32 00             	rex.RX xor (%rax),%r8b
  b6:	02 03                	add    (%rbx),%al
  b8:	46 33 00             	rex.RX xor (%rax),%r8d
  bb:	03 03                	add    (%rbx),%eax
  bd:	46 34 00             	rex.RX xor $0x0,%al
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c0:	04 03                	add    $0x3,%al
  c2:	46 35 00 05 03 46    	rex.RX xor $0x46030500,%eax
  c8:	36 00 06             	ss add %al,(%rsi)
  cb:	03 46 37             	add    0x37(%rsi),%eax
  ce:	00 07                	add    %al,(%rdi)
  d0:	03 46 38             	add    0x38(%rsi),%eax
  d3:	00 08                	add    %cl,(%rax)
  d5:	03 46 39             	add    0x39(%rsi),%eax
  d8:	00 09                	add    %cl,(%rcx)
  da:	03 46 31             	add    0x31(%rsi),%eax
  dd:	30 00                	xor    %al,(%rax)
  df:	0a 03                	or     (%rbx),%al
  e1:	46 31 31             	rex.RX xor %r14d,(%rcx)
  e4:	00 0b                	add    %cl,(%rbx)
  e6:	03 46 31             	add    0x31(%rsi),%eax
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  e9:	32 00                	xor    (%rax),%al
  eb:	0c 01                	or     $0x1,%al
  ed:	00 00                	add    %al,(%rax)
  ef:	00 00                	add    %al,(%rax)
  f1:	0d 01 00 00 00       	or     $0x1,%eax
  f6:	00 0e                	add    %cl,(%rsi)
  f8:	01 00                	add    %eax,(%rax)
  fa:	00 00                	add    %al,(%rax)
  fc:	00 0f                	add    %cl,(%rdi)
  fe:	01 00                	add    %eax,(%rax)
 100:	00 00                	add    %al,(%rax)
 102:	00 10                	add    %dl,(%rax)
 104:	01 00                	add    %eax,(%rax)
 106:	00 00                	add    %al,(%rax)
 108:	00 11                	add    %dl,(%rcx)
 10a:	01 00                	add    %eax,(%rax)
 10c:	00 00                	add    %al,(%rax)
 10e:	00 12                	add    %dl,(%rdx)
 110:	01 00                	add    %eax,(%rax)
 112:	00 00                	add    %al,(%rax)
 114:	00 13                	add    %dl,(%rbx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 116:	03 45 6e             	add    0x6e(%rbp),%eax
}
 119:	64 00 14 01          	add    %dl,%fs:(%rcx,%rax,1)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 11d:	00 00                	add    %al,(%rax)
 11f:	00 00                	add    %al,(%rax)
 121:	15 01 00 00 00       	adc    $0x1,%eax
 126:	00 16                	add    %dl,(%rsi)
 128:	01 00                	add    %eax,(%rax)
 12a:	00 00                	add    %al,(%rax)
 12c:	00 17                	add    %dl,(%rdi)
 12e:	03 54 61 62          	add    0x62(%rcx,%riz,2),%edx
 132:	00 18                	add    %bl,(%rax)
 134:	01 00                	add    %eax,(%rax)
}
 136:	00 00                	add    %al,(%rax)
 138:	00 19                	add    %bl,(%rcx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 13a:	01 00                	add    %eax,(%rax)
 13c:	00 00                	add    %al,(%rax)
 13e:	00 1a                	add    %bl,(%rdx)
 140:	01 00                	add    %eax,(%rax)
 142:	00 00                	add    %al,(%rax)
}
 144:	00 1b                	add    %bl,(%rbx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 146:	01 00                	add    %eax,(%rax)
 148:	00 00                	add    %al,(%rax)
 14a:	00 1c 01             	add    %bl,(%rcx,%rax,1)
 14d:	00 00                	add    %al,(%rax)
 14f:	00 00                	add    %al,(%rax)
{
 151:	1d 01 00 00 00       	sbb    $0x1,%eax
 156:	00 1e                	add    %bl,(%rsi)
 158:	01 00                	add    %eax,(%rax)
 15a:	00 00                	add    %al,(%rax)
    m_TextPresenter->Clear();
 15c:	00 1f                	add    %bl,(%rdi)
 15e:	01 00                	add    %eax,(%rax)
 160:	00 00                	add    %al,(%rax)
 162:	00 20                	add    %ah,(%rax)
    RenderModifiers();
 164:	01 00                	add    %eax,(%rax)
 166:	00 00                	add    %al,(%rax)
 168:	00 21                	add    %ah,(%rcx)
 16a:	01 00                	add    %eax,(%rax)
 16c:	00 00                	add    %al,(%rax)
 16e:	00 22                	add    %ah,(%rdx)
 170:	01 00                	add    %eax,(%rax)
 172:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 174:	00 23                	add    %ah,(%rbx)
 176:	01 00                	add    %eax,(%rax)
 178:	00 00                	add    %al,(%rax)
}
 17a:	00 24 01             	add    %ah,(%rcx,%rax,1)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17d:	00 00                	add    %al,(%rax)
 17f:	00 00                	add    %al,(%rax)
 181:	25 01 00 00 00       	and    $0x1,%eax
 186:	00 26                	add    %ah,(%rsi)
 188:	01 00                	add    %eax,(%rax)
 18a:	00 00                	add    %al,(%rax)
 18c:	00 27                	add    %ah,(%rdi)
 18e:	01 00                	add    %eax,(%rax)
 190:	00 00                	add    %al,(%rax)
 192:	00 28                	add    %ch,(%rax)
 194:	01 00                	add    %eax,(%rax)
 196:	00 00                	add    %al,(%rax)
 198:	00 29                	add    %ch,(%rcx)
 19a:	01 00                	add    %eax,(%rax)
 19c:	00 00                	add    %al,(%rax)
 19e:	00 2a                	add    %ch,(%rdx)
  : m_TextPresenter(new Video::TextModePresenter()),
 1a0:	01 00                	add    %eax,(%rax)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	00 2b                	add    %ch,(%rbx)
 1a6:	01 00                	add    %eax,(%rax)
 1a8:	00 00                	add    %al,(%rax)
Console::Console()
 1aa:	00 2c 01             	add    %ch,(%rcx,%rax,1)
 1ad:	00 00                	add    %al,(%rax)
 1af:	00 00                	add    %al,(%rax)
 1b1:	2d 01 00 00 00       	sub    $0x1,%eax
  : m_TextPresenter(new Video::TextModePresenter()),
 1b6:	00 2e                	add    %ch,(%rsi)
Console::Console()
 1b8:	01 00                	add    %eax,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1ba:	00 00                	add    %al,(%rax)
 1bc:	00 2f                	add    %ch,(%rdi)
 1be:	01 00                	add    %eax,(%rax)
 1c0:	00 00                	add    %al,(%rax)
 1c2:	00 30                	add    %dh,(%rax)
 1c4:	03 41 00             	add    0x0(%rcx),%eax
 1c7:	31 03                	xor    %eax,(%rbx)
 1c9:	42 00 32             	rex.X add %sil,(%rdx)
 1cc:	03 43 00             	add    0x0(%rbx),%eax
 1cf:	33 03                	xor    (%rbx),%eax
    m_Buffers(new uint8_t[23 * 80]),
 1d1:	44 00 34 03          	add    %r14b,(%rbx,%rax,1)
 1d5:	45 00 35 03 46 00 36 	add    %r14b,0x36004603(%rip)        # 360047df <ConsoleKeyEventHandler(Input::Key, bool)+0x3600432f>
 1dc:	03 47 00             	add    0x0(%rdi),%eax
 1df:	37                   	(bad)  
    m_KeyModifiers(0)
 1e0:	03 48 00             	add    0x0(%rax),%ecx
 1e3:	38 03                	cmp    %al,(%rbx)
 1e5:	49 00 39             	rex.WB add %dil,(%r9)
}
 1e8:	03 4a 00             	add    0x0(%rdx),%ecx
    Refresh();
 1eb:	3a 03                	cmp    (%rbx),%al
    m_Buffers(new uint8_t[23 * 80]),
 1ed:	4b 00 3b             	rex.WXB add %dil,(%r11)
 1f0:	03 4c 00 3c          	add    0x3c(%rax,%rax,1),%ecx
    m_OffsetX(0),
 1f4:	03 4d 00             	add    0x0(%rbp),%ecx
 1f7:	3d 03 4e 00 3e       	cmp    $0x3e004e03,%eax
    Refresh();
 1fc:	03 4f 00             	add    0x0(%rdi),%ecx
 1ff:	3f                   	(bad)  
 200:	03 50 00             	add    0x0(%rax),%edx
 203:	40 03 51 00          	rex add 0x0(%rcx),%edx
 207:	41 03 52 00          	add    0x0(%r10),%edx
 20b:	42 03 53 00          	rex.X add 0x0(%rbx),%edx
 20f:	43 03 54 00 44       	add    0x44(%r8,%r8,1),%edx
    RenderModifiers();
 214:	03 55 00             	add    0x0(%rbp),%edx
 217:	45 03 56 00          	add    0x0(%r14),%r10d
{
 21b:	46 03 57 00          	rex.RX add 0x0(%rdi),%r10d
 21f:	47 03 58 00          	rex.RXB add 0x0(%r8),%r11d
 223:	48 03 59 00          	add    0x0(%rcx),%rbx
    RenderModifiers();
 227:	49 03 5a 00          	add    0x0(%r10),%rbx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 22b:	4a 01 00             	rex.WX add %rax,(%rax)
}
 22e:	00 00                	add    %al,(%rax)
 230:	00 4b 01             	add    %cl,0x1(%rbx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 233:	00 00                	add    %al,(%rax)
 235:	00 00                	add    %al,(%rax)
 237:	4c 01 00             	add    %r8,(%rax)
 23a:	00 00                	add    %al,(%rax)
 23c:	00 4d 01             	add    %cl,0x1(%rbp)
 23f:	00 00                	add    %al,(%rax)
 241:	00 00                	add    %al,(%rax)
 243:	4e 01 00             	rex.WRX add %r8,(%rax)
 246:	00 00                	add    %al,(%rax)
 248:	00 4f 01             	add    %cl,0x1(%rdi)
 24b:	00 00                	add    %al,(%rax)
 24d:	00 00                	add    %al,(%rax)
 24f:	50                   	push   %rax
}
 250:	01 00                	add    %eax,(%rax)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 252:	00 00                	add    %al,(%rax)
 254:	00 51 01             	add    %dl,0x1(%rcx)
 257:	00 00                	add    %al,(%rax)
 259:	00 00                	add    %al,(%rax)
 25b:	52                   	push   %rdx
 25c:	01 00                	add    %eax,(%rax)
 25e:	00 00                	add    %al,(%rax)
{
 260:	00 53 01             	add    %dl,0x1(%rbx)
 263:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 265:	00 00                	add    %al,(%rax)
 267:	54                   	push   %rsp
 268:	01 00                	add    %eax,(%rax)
 26a:	00 00                	add    %al,(%rax)
 26c:	00 55 01             	add    %dl,0x1(%rbp)
 26f:	00 00                	add    %al,(%rax)
{
 271:	00 00                	add    %al,(%rax)
 273:	56                   	push   %rsi
 274:	01 00                	add    %eax,(%rax)
 276:	00 00                	add    %al,(%rax)
 278:	00 57 01             	add    %dl,0x1(%rdi)
 27b:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 27d:	00 00                	add    %al,(%rax)
 27f:	58                   	pop    %rax
 280:	01 00                	add    %eax,(%rax)
 282:	00 00                	add    %al,(%rax)
 284:	00 59 01             	add    %bl,0x1(%rcx)
 287:	00 00                	add    %al,(%rax)
 289:	00 00                	add    %al,(%rax)
 28b:	5a                   	pop    %rdx
 28c:	01 00                	add    %eax,(%rax)
 28e:	00 00                	add    %al,(%rax)
 290:	00 5b 01             	add    %bl,0x1(%rbx)
 293:	00 00                	add    %al,(%rax)
 295:	00 00                	add    %al,(%rax)
 297:	5c                   	pop    %rsp
 298:	01 00                	add    %eax,(%rax)
 29a:	00 00                	add    %al,(%rax)
 29c:	00 5d 01             	add    %bl,0x1(%rbp)
 29f:	00 00                	add    %al,(%rax)
 2a1:	00 00                	add    %al,(%rax)
    if (++m_OffsetX >= 80)
 2a3:	5e                   	pop    %rsi
 2a4:	01 00                	add    %eax,(%rax)
 2a6:	00 00                	add    %al,(%rax)
    m_LineLength++;
 2a8:	00 5f 03             	add    %bl,0x3(%rdi)
 2ab:	41 6e                	rex.B outsb %ds:(%rsi),(%dx)
 2ad:	64 00 60 01          	add    %ah,%fs:0x1(%rax)
    if (++m_OffsetX >= 80)
 2b1:	00 00                	add    %al,(%rax)
 2b3:	00 00                	add    %al,(%rax)
 2b5:	61                   	(bad)  
 2b6:	01 00                	add    %eax,(%rax)
 2b8:	00 00                	add    %al,(%rax)
 2ba:	00 62 01             	add    %ah,0x1(%rdx)
 2bd:	00 00                	add    %al,(%rax)
 2bf:	00 00                	add    %al,(%rax)
        if (m_OffsetY >= 22)
 2c1:	63 01                	movsxd (%rcx),%eax
 2c3:	00 00                	add    %al,(%rax)
 2c5:	00 00                	add    %al,(%rax)
        m_OffsetX = 0;
 2c7:	64 03 41 64          	add    %fs:0x64(%rcx),%eax
 2cb:	64 00 65 01          	add    %ah,%fs:0x1(%rbp)
        if (m_OffsetY >= 22)
 2cf:	00 00                	add    %al,(%rax)
        } else m_OffsetY++;
 2d1:	00 00                	add    %al,(%rax)
 2d3:	66 01 00             	add    %ax,(%rax)
 2d6:	00 00                	add    %al,(%rax)
 2d8:	00 67 01             	add    %ah,0x1(%rdi)
 2db:	00 00                	add    %al,(%rax)
 2dd:	00 00                	add    %al,(%rax)
 2df:	68 01 00 00 00       	push   $0x1
            m_TextPresenter->MoveUp();
 2e4:	00 69 01             	add    %ch,0x1(%rcx)
 2e7:	00 00                	add    %al,(%rax)
 2e9:	00 00                	add    %al,(%rax)
 2eb:	6a 01                	push   $0x1
 2ed:	00 00                	add    %al,(%rax)
 2ef:	00 00                	add    %al,(%rax)
            RenderModifiers();
 2f1:	6b 01 00             	imul   $0x0,(%rcx),%eax
 2f4:	00 00                	add    %al,(%rax)
 2f6:	00 6c 01 00          	add    %ch,0x0(%rcx,%rax,1)
            RenderModifiers();
 2fa:	00 00                	add    %al,(%rax)
 2fc:	00 6d 01             	add    %ch,0x1(%rbp)
 2ff:	00 00                	add    %al,(%rax)
 301:	00 00                	add    %al,(%rax)
            RenderModifiers();
 303:	6e                   	outsb  %ds:(%rsi),(%dx)
 304:	01 00                	add    %eax,(%rax)
 306:	00 00                	add    %al,(%rax)
 308:	00 6f 01             	add    %ch,0x1(%rdi)
 30b:	00 00                	add    %al,(%rax)
 30d:	00 00                	add    %al,(%rax)
 30f:	70 01                	jo     312 <.debug_info+0x312>
    switch (key)
 311:	00 00                	add    %al,(%rax)
 313:	00 00                	add    %al,(%rax)
{
 315:	71 03                	jno    31a <.debug_info+0x31a>
 317:	41 74 00             	rex.B je 31a <.debug_info+0x31a>
 31a:	72 01                	jb     31d <.debug_info+0x31d>
 31c:	00 00                	add    %al,(%rax)
 31e:	00 00                	add    %al,(%rax)
 320:	73 01                	jae    323 <.debug_info+0x323>
    switch (key)
 322:	00 00                	add    %al,(%rax)
 324:	00 00                	add    %al,(%rax)
 326:	74 01                	je     329 <.debug_info+0x329>
 328:	00 00                	add    %al,(%rax)
 32a:	00 00                	add    %al,(%rax)
 32c:	75 01                	jne    32f <.debug_info+0x32f>
 32e:	00 00                	add    %al,(%rax)
 330:	00 00                	add    %al,(%rax)
 332:	76 01                	jbe    335 <.debug_info+0x335>
 334:	00 00                	add    %al,(%rax)
 336:	00 00                	add    %al,(%rax)
 338:	77 01                	ja     33b <.debug_info+0x33b>
 33a:	00 00                	add    %al,(%rax)
        char code = ApplyModifiers(key, m_KeyModifiers);
 33c:	00 00                	add    %al,(%rax)
 33e:	78 01                	js     341 <.debug_info+0x341>
 340:	00 00                	add    %al,(%rax)
 342:	00 00                	add    %al,(%rax)
 344:	79 01                	jns    347 <.debug_info+0x347>
 346:	00 00                	add    %al,(%rax)
 348:	00 00                	add    %al,(%rax)
 34a:	7a 01                	jp     34d <.debug_info+0x34d>
 34c:	00 00                	add    %al,(%rax)
        if (!code || !isPressed || m_LineLength == 255) break;
 34e:	00 00                	add    %al,(%rax)
 350:	7b 01                	jnp    353 <.debug_info+0x353>
 352:	00 00                	add    %al,(%rax)
 354:	00 00                	add    %al,(%rax)
 356:	7c 01                	jl     359 <.debug_info+0x359>
 358:	00 00                	add    %al,(%rax)
 35a:	00 00                	add    %al,(%rax)
 35c:	7d 01                	jge    35f <.debug_info+0x35f>
 35e:	00 00                	add    %al,(%rax)
 360:	00 00                	add    %al,(%rax)
 362:	7e 01                	jle    365 <.debug_info+0x365>
 364:	00 00                	add    %al,(%rax)
}
 366:	00 00                	add    %al,(%rax)
 368:	7f 01                	jg     36b <.debug_info+0x36b>
 36a:	00 00                	add    %al,(%rax)
 36c:	00 00                	add    %al,(%rax)
 36e:	80 01 00             	addb   $0x0,(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 371:	00 00                	add    %al,(%rax)
 373:	00 81 01 00 00 00    	add    %al,0x1(%rcx)
            m_KeyModifiers |= KeyModifiersShift;
 379:	00 82 01 00 00 00    	add    %al,0x1(%rdx)
 37f:	00 83 01 00 00 00    	add    %al,0x1(%rbx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 385:	00 84 01 00 00 00 00 	add    %al,0x0(%rcx,%rax,1)
        RenderModifiers();
 38c:	85 01                	test   %eax,(%rcx)
 38e:	00 00                	add    %al,(%rax)
 390:	00 00                	add    %al,(%rax)
 392:	86 01                	xchg   %al,(%rcx)
 394:	00 00                	add    %al,(%rax)
}
 396:	00 00                	add    %al,(%rax)
 398:	87 01                	xchg   %eax,(%rcx)
        RenderModifiers();
 39a:	00 00                	add    %al,(%rax)
 39c:	00 00                	add    %al,(%rax)
 39e:	88 01                	mov    %al,(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3a0:	00 00                	add    %al,(%rax)
 3a2:	00 00                	add    %al,(%rax)
 3a4:	89 01                	mov    %eax,(%rcx)
            m_KeyModifiers |= KeyModifiersCtrl;
 3a6:	00 00                	add    %al,(%rax)
 3a8:	00 00                	add    %al,(%rax)
 3aa:	8a 01                	mov    (%rcx),%al
 3ac:	00 00                	add    %al,(%rax)
 3ae:	00 00                	add    %al,(%rax)
 3b0:	8b 01                	mov    (%rcx),%eax
 3b2:	00 00                	add    %al,(%rax)
 3b4:	00 00                	add    %al,(%rax)
 3b6:	8c 01                	mov    %es,(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3b8:	00 00                	add    %al,(%rax)
 3ba:	00 00                	add    %al,(%rax)
 3bc:	8d 01                	lea    (%rcx),%eax
            m_KeyModifiers |= KeyModifiersAlt;
 3be:	00 00                	add    %al,(%rax)
 3c0:	00 00                	add    %al,(%rax)
 3c2:	8e 01                	mov    (%rcx),%es
 3c4:	00 00                	add    %al,(%rax)
 3c6:	00 00                	add    %al,(%rax)
 3c8:	8f 01                	pop    (%rcx)
 3ca:	00 00                	add    %al,(%rax)
 3cc:	00 00                	add    %al,(%rax)
 3ce:	90                   	nop
 3cf:	01 00                	add    %eax,(%rax)
        if (isPressed)
 3d1:	00 00                	add    %al,(%rax)
 3d3:	00 91 01 00 00 00    	add    %dl,0x1(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3d9:	00 92 01 00 00 00    	add    %dl,0x1(%rdx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 3df:	00 93 00 22 00 00    	add    %dl,0x2200(%rbx)
 3e5:	00 00                	add    %al,(%rax)
 3e7:	07                   	(bad)  
 3e8:	04 69                	add    $0x69,%al
 3ea:	00 00                	add    %al,(%rax)
 3ec:	00 02                	add    %al,(%rdx)
 3ee:	2b 0a                	sub    (%rdx),%ecx
        AddChar(' '); break;
 3f0:	0d 04 00 00 01       	or     $0x1000004,%eax
        AddChar(code);
 3f5:	00 00                	add    %al,(%rax)
 3f7:	00 00                	add    %al,(%rax)
 3f9:	01 01                	add    %eax,(%rcx)
 3fb:	00 00                	add    %al,(%rax)
 3fd:	00 00                	add    %al,(%rax)
 3ff:	02 01                	add    (%rcx),%al
 401:	00 00                	add    %al,(%rax)
}
 403:	00 00                	add    %al,(%rax)
 405:	04 01                	add    $0x1,%al
        AddChar(code);
 407:	00 00                	add    %al,(%rax)
 409:	00 00                	add    %al,(%rax)
 40b:	08 00                	or     %al,(%rax)
 40d:	23 00                	and    (%rax),%eax
 40f:	00 00                	add    %al,(%rax)
        m_TextPresenter->Clear();
 411:	00 02                	add    %al,(%rdx)
 413:	35 0a 00 00 00       	xor    $0xa,%eax
 418:	00 32                	add    %dh,(%rdx)
 41a:	06                   	(bad)  
 41b:	00 00                	add    %al,(%rax)
 41d:	04 95                	add    $0x95,%al
 41f:	00 00                	add    %al,(%rax)
        if (!isPressed) break;
 421:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 424:	00 00                	add    %al,(%rax)
 426:	00 00                	add    %al,(%rax)
        if (m_OffsetY >= 22)
 428:	00 14 00             	add    %dl,(%rax,%rax,1)
 42b:	00 00                	add    %al,(%rax)
 42d:	00 03                	add    %al,(%rbx)
        m_TextPresenter->Clear();
 42f:	07                   	(bad)  
 430:	e9 04 00 00 24       	jmp    24000439 <ConsoleKeyEventHandler(Input::Key, bool)+0x23ffff89>
        m_LineLength = 0;
 435:	00 00                	add    %al,(%rax)
 437:	00 00                	add    %al,(%rax)
        m_OffsetX = 1;
 439:	08 03                	or     %al,(%rbx)
 43b:	09 0c 54             	or     %ecx,(%rsp,%rdx,2)
        if (m_OffsetY >= 22)
 43e:	04 00                	add    $0x0,%al
 440:	00 15 78 00 18 3c    	add    %dl,0x3c180078(%rip)        # 3c1804be <ConsoleKeyEventHandler(Input::Key, bool)+0x3c18000e>
        } else m_OffsetY++;
 446:	00 00                	add    %al,(%rax)
 448:	00 00                	add    %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 44a:	15 79 00 1b 3c       	adc    $0x3c1b0079,%eax
}
 44f:	00 00                	add    %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 451:	00 04 00             	add    %al,(%rax,%rax,1)
 454:	25 00 00 00 00       	and    $0x0,%eax
}
 459:	08 00                	or     %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45b:	00 00                	add    %al,(%rax)
 45d:	00 04 18             	add    %al,(%rax,%rbx,1)
 460:	0e                   	(bad)  
 461:	00 00                	add    %al,(%rax)
 463:	00 00                	add    %al,(%rax)
 465:	6d                   	insl   (%dx),%es:(%rdi)
 466:	04 00                	add    $0x0,%al
 468:	00 73 04             	add    %dh,0x4(%rbx)
 46b:	00 00                	add    %al,(%rax)
 46d:	05 19 06 00 00       	add    $0x619,%eax
 472:	00 08                	add    %cl,(%rax)
 474:	00 00                	add    %al,(%rax)
 476:	00 00                	add    %al,(%rax)
        AddChar(code);
 478:	04 16                	add    $0x16,%al
 47a:	0e                   	(bad)  
 47b:	00 00                	add    %al,(%rax)
 47d:	00 00                	add    %al,(%rax)
 47f:	87 04 00             	xchg   %eax,(%rax,%rax,1)
            m_TextPresenter->MoveUp();
 482:	00 a1 04 00 00 05    	add    %ah,0x5000004(%rcx)
 488:	19 06                	sbb    %eax,(%rsi)
 48a:	00 00                	add    %al,(%rax)
            RenderModifiers();
 48c:	04 34                	add    $0x34,%al
 48e:	04 00                	add    $0x0,%al
 490:	00 04 52             	add    %al,(%rdx,%rdx,2)
 493:	06                   	(bad)  
 494:	00 00                	add    %al,(%rax)
 496:	04 4f                	add    $0x4f,%al
 498:	00 00                	add    %al,(%rax)
 49a:	00 04 4f             	add    %al,(%rdi,%rcx,2)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 49d:	00 00                	add    %al,(%rax)
 49f:	00 00                	add    %al,(%rax)
 4a1:	08 00                	or     %al,(%rax)
 4a3:	00 00                	add    %al,(%rax)
 4a5:	00 04 17             	add    %al,(%rdi,%rdx,1)
 4a8:	0e                   	(bad)  
 4a9:	00 00                	add    %al,(%rax)
 4ab:	00 00                	add    %al,(%rax)
 4ad:	b5 04                	mov    $0x4,%ch
 4af:	00 00                	add    %al,(%rax)
    console->AcceptKey(key, isPressed);
 4b1:	cf                   	iret   
 4b2:	04 00                	add    $0x0,%al
 4b4:	00 05 19 06 00 00    	add    %al,0x619(%rip)        # ad3 <.debug_info+0xad3>
 4ba:	04 34                	add    $0x34,%al
 4bc:	04 00                	add    $0x0,%al
 4be:	00 04 32             	add    %al,(%rdx,%rsi,1)
 4c1:	06                   	(bad)  
 4c2:	00 00                	add    %al,(%rax)
 4c4:	04 4f                	add    $0x4f,%al
 4c6:	00 00                	add    %al,(%rax)
 4c8:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 4cb:	00 00                	add    %al,(%rax)
 4cd:	00 00                	add    %al,(%rax)
 4cf:	26 00 00             	es add %al,(%rax)
 4d2:	00 00                	add    %al,(%rax)
 4d4:	04 11                	add    $0x11,%al
 4d6:	09 00                	or     %eax,(%rax)
 4d8:	00 00                	add    %al,(%rax)
 4da:	00 01                	add    %al,(%rcx)
 4dc:	e1 04                	loope  4e2 <.debug_info+0x4e2>
 4de:	00 00                	add    %al,(%rax)
 4e0:	00 05 19 06 00 00    	add    %al,0x619(%rip)        # aff <.debug_info+0xaff>
 4e6:	00 00                	add    %al,(%rax)
 4e8:	00 06                	add    %al,(%rsi)
 4ea:	01 02                	add    %eax,(%rdx)
 4ec:	00 00                	add    %al,(%rax)
 4ee:	00 00                	add    %al,(%rax)
 4f0:	27                   	(bad)  
 4f1:	00 00                	add    %al,(%rax)
 4f3:	00 00                	add    %al,(%rax)
 4f5:	20 05 06 07 19 06    	and    %al,0x6190706(%rip)        # 6190c01 <ConsoleKeyEventHandler(Input::Key, bool)+0x6190751>
 4fb:	00 00                	add    %al,(%rax)
 4fd:	09 00                	or     %eax,(%rax)
 4ff:	00 00                	add    %al,(%rax)
 501:	00 09                	add    %cl,(%rcx)
 503:	1f                   	(bad)  
 504:	19 06                	sbb    %eax,(%rsi)
 506:	00 00                	add    %al,(%rax)
 508:	00 09                	add    %cl,(%rcx)
 50a:	00 00                	add    %al,(%rax)
 50c:	00 00                	add    %al,(%rax)
 50e:	0a 0d 4f 00 00 00    	or     0x4f(%rip),%cl        # 563 <.debug_info+0x563>
 514:	08 09                	or     %cl,(%rcx)
 516:	00 00                	add    %al,(%rax)
 518:	00 00                	add    %al,(%rax)
 51a:	0b 0e                	or     (%rsi),%ecx
 51c:	23 06                	and    (%rsi),%eax
 51e:	00 00                	add    %al,(%rax)
 520:	10 09                	adc    %cl,(%rcx)
 522:	00 00                	add    %al,(%rax)
 524:	00 00                	add    %al,(%rax)
 526:	0c 0a                	or     $0xa,%al
 528:	e9 04 00 00 18       	jmp    18000531 <ConsoleKeyEventHandler(Input::Key, bool)+0x18000081>
 52d:	09 00                	or     %eax,(%rax)
 52f:	00 00                	add    %al,(%rax)
 531:	00 0d 0d 4f 00 00    	add    %cl,0x4f0d(%rip)        # 5444 <ConsoleKeyEventHandler(Input::Key, bool)+0x4f94>
 537:	00 19                	add    %bl,(%rcx)
 539:	09 00                	or     %eax,(%rax)
 53b:	00 00                	add    %al,(%rax)
 53d:	00 0d 18 4f 00 00    	add    %cl,0x4f18(%rip)        # 545b <ConsoleKeyEventHandler(Input::Key, bool)+0x4fab>
 543:	00 1a                	add    %bl,(%rdx)
 545:	09 00                	or     %eax,(%rax)
 547:	00 00                	add    %al,(%rax)
 549:	00 0e                	add    %cl,(%rsi)
 54b:	0d 4f 00 00 00       	or     $0x4f,%eax
 550:	1b 08                	sbb    (%rax),%ecx
 552:	00 00                	add    %al,(%rax)
 554:	00 00                	add    %al,(%rax)
 556:	05 11 05 00 00       	add    $0x511,%eax
 55b:	00 00                	add    %al,(%rax)
 55d:	65 05 00 00 6b 05    	gs add $0x56b0000,%eax
 563:	00 00                	add    %al,(%rax)
 565:	05 28 06 00 00       	add    $0x628,%eax
 56a:	00 08                	add    %cl,(%rax)
 56c:	00 00                	add    %al,(%rax)
 56e:	00 00                	add    %al,(%rax)
 570:	05 12 05 00 00       	add    $0x512,%eax
 575:	00 00                	add    %al,(%rax)
 577:	7f 05                	jg     57e <.debug_info+0x57e>
 579:	00 00                	add    %al,(%rax)
 57b:	8a 05 00 00 05 28    	mov    0x28050000(%rip),%al        # 28050581 <ConsoleKeyEventHandler(Input::Key, bool)+0x280500d1>
 581:	06                   	(bad)  
 582:	00 00                	add    %al,(%rax)
 584:	05 3c 00 00 00       	add    $0x3c,%eax
 589:	00 08                	add    %cl,(%rax)
 58b:	00 00                	add    %al,(%rax)
 58d:	00 00                	add    %al,(%rax)
 58f:	05 14 0a 00 00       	add    $0xa14,%eax
 594:	00 00                	add    %al,(%rax)
 596:	9e                   	sahf   
 597:	05 00 00 a4 05       	add    $0x5a40000,%eax
 59c:	00 00                	add    %al,(%rax)
 59e:	05 28 06 00 00       	add    $0x628,%eax
 5a3:	00 08                	add    %cl,(%rax)
 5a5:	00 00                	add    %al,(%rax)
 5a7:	00 00                	add    %al,(%rax)
 5a9:	05 15 0a 00 00       	add    $0xa15,%eax
 5ae:	00 00                	add    %al,(%rax)
 5b0:	b8 05 00 00 be       	mov    $0xbe000005,%eax
 5b5:	05 00 00 05 28       	add    $0x28050000,%eax
 5ba:	06                   	(bad)  
 5bb:	00 00                	add    %al,(%rax)
 5bd:	00 08                	add    %cl,(%rax)
 5bf:	00 00                	add    %al,(%rax)
 5c1:	00 00                	add    %al,(%rax)
 5c3:	05 16 0a 00 00       	add    $0xa16,%eax
 5c8:	00 00                	add    %al,(%rax)
 5ca:	d2 05 00 00 d8 05    	rolb   %cl,0x5d80000(%rip)        # 5d805d0 <ConsoleKeyEventHandler(Input::Key, bool)+0x5d80120>
 5d0:	00 00                	add    %al,(%rax)
 5d2:	05 28 06 00 00       	add    $0x628,%eax
 5d7:	00 08                	add    %cl,(%rax)
 5d9:	00 00                	add    %al,(%rax)
 5db:	00 00                	add    %al,(%rax)
 5dd:	05 17 0a 00 00       	add    $0xa17,%eax
 5e2:	00 00                	add    %al,(%rax)
 5e4:	ec                   	in     (%dx),%al
 5e5:	05 00 00 fc 05       	add    $0x5fc0000,%eax
 5ea:	00 00                	add    %al,(%rax)
 5ec:	05 28 06 00 00       	add    $0x628,%eax
 5f1:	04 95                	add    $0x95,%al
 5f3:	00 00                	add    %al,(%rax)
 5f5:	00 04 e9             	add    %al,(%rcx,%rbp,8)
 5f8:	04 00                	add    $0x0,%al
 5fa:	00 00                	add    %al,(%rax)
 5fc:	28 00                	sub    %al,(%rax)
 5fe:	00 00                	add    %al,(%rax)
 600:	00 05 18 0a 00 00    	add    %al,0xa18(%rip)        # 101e <ConsoleKeyEventHandler(Input::Key, bool)+0xb6e>
 606:	00 00                	add    %al,(%rax)
 608:	01 0d 06 00 00 05    	add    %ecx,0x5000006(%rip)        # 5000614 <ConsoleKeyEventHandler(Input::Key, bool)+0x5000164>
 60e:	28 06                	sub    %al,(%rsi)
 610:	00 00                	add    %al,(%rax)
 612:	04 32                	add    $0x32,%al
 614:	06                   	(bad)  
 615:	00 00                	add    %al,(%rax)
 617:	00 00                	add    %al,(%rax)
 619:	0e                   	(bad)  
 61a:	54                   	push   %rsp
 61b:	04 00                	add    $0x0,%al
 61d:	00 0d 19 06 00 00    	add    %cl,0x619(%rip)        # c3c <.debug_info+0xc3c>
 623:	0e                   	(bad)  
 624:	4f 00 00             	rex.WRXB add %r8b,(%r8)
 627:	00 0e                	add    %cl,(%rsi)
 629:	f0 04 00             	lock add $0x0,%al
 62c:	00 0d 28 06 00 00    	add    %cl,0x628(%rip)        # c5a <ConsoleKeyEventHandler(Input::Key, bool)+0x7aa>
 632:	06                   	(bad)  
 633:	01 06                	add    %eax,(%rsi)
 635:	00 00                	add    %al,(%rax)
 637:	00 00                	add    %al,(%rax)
 639:	0d 32 06 00 00       	or     $0x632,%eax
 63e:	29 00                	sub    %eax,(%rax)
 640:	00 00                	add    %al,(%rax)
 642:	00 05 1b 11 28 06    	add    %al,0x628111b(%rip)        # 6281763 <ConsoleKeyEventHandler(Input::Key, bool)+0x62812b3>
 648:	00 00                	add    %al,(%rax)
 64a:	2a 01                	sub    (%rcx),%al
 64c:	0b 11                	or     (%rcx),%edx
 64e:	8a 00                	mov    (%rax),%al
 650:	00 00                	add    %al,(%rax)
 652:	0e                   	(bad)  
 653:	39 06                	cmp    %eax,(%rsi)
 655:	00 00                	add    %al,(%rax)
 657:	2b cf                	sub    %edi,%ecx
 659:	04 00                	add    $0x0,%al
 65b:	00 00                	add    %al,(%rax)
 65d:	00 00                	add    %al,(%rax)
 65f:	00 68 06             	add    %ch,0x6(%rax)
 662:	00 00                	add    %al,(%rax)
 664:	72 06                	jb     66c <.debug_info+0x66c>
 666:	00 00                	add    %al,(%rax)
 668:	0b 00                	or     (%rax),%eax
 66a:	00 00                	add    %al,(%rax)
 66c:	00 1e                	add    %bl,(%rsi)
 66e:	06                   	(bad)  
 66f:	00 00                	add    %al,(%rax)
 671:	00 11                	add    %dl,(%rcx)
 673:	fc                   	cld    
 674:	05 00 00 7c 06       	add    $0x67c0000,%eax
 679:	82                   	(bad)  
 67a:	06                   	(bad)  
 67b:	00 00                	add    %al,(%rax)
 67d:	01 96 06 00 00 0b    	add    %edx,0xb000006(%rsi)
 683:	00 00                	add    %al,(%rax)
 685:	00 00                	add    %al,(%rax)
 687:	2d 06 00 00 2c       	sub    $0x2c000006,%eax
 68c:	63 00                	movsxd (%rax),%eax
 68e:	01 7c 1c 32          	add    %edi,0x32(%rsp,%rbx,1)
 692:	06                   	(bad)  
 693:	00 00                	add    %al,(%rax)
 695:	00 16                	add    %dl,(%rsi)
 697:	d8 05 00 00 3a b6    	fadds  -0x49c60000(%rip)        # ffffffffb63a069d <ConsoleKeyEventHandler(Input::Key, bool)+0xffffffffb63a01ed>
 69d:	06                   	(bad)  
	...
 6a6:	00 00                	add    %al,(%rax)
 6a8:	97                   	xchg   %eax,%edi
 6a9:	01 00                	add    %eax,(%rax)
 6ab:	00 00                	add    %al,(%rax)
 6ad:	00 00                	add    %al,(%rax)
 6af:	00 01                	add    %al,(%rcx)
 6b1:	9c                   	pushf  
 6b2:	89 07                	mov    %eax,(%rdi)
 6b4:	00 00                	add    %al,(%rax)
 6b6:	0f 00 00             	sldt   (%rax)
 6b9:	00 00                	add    %al,(%rax)
 6bb:	2d 06 00 00 00       	sub    $0x6,%eax
 6c0:	00 00                	add    %al,(%rax)
 6c2:	00 00                	add    %al,(%rax)
 6c4:	00 00                	add    %al,(%rax)
 6c6:	00 17                	add    %dl,(%rdi)
 6c8:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 6cc:	3a 24 95 00 00 00 00 	cmp    0x0(,%rdx,4),%ah
 6d3:	00 00                	add    %al,(%rax)
 6d5:	00 00                	add    %al,(%rax)
 6d7:	00 00                	add    %al,(%rax)
 6d9:	00 18                	add    %bl,(%rax)
 6db:	00 00                	add    %al,(%rax)
 6dd:	00 00                	add    %al,(%rax)
 6df:	3a 2e                	cmp    (%rsi),%ch
 6e1:	e9 04 00 00 00       	jmp    6ea <.debug_info+0x6ea>
 6e6:	00 00                	add    %al,(%rax)
 6e8:	00 00                	add    %al,(%rax)
 6ea:	00 00                	add    %al,(%rax)
 6ec:	00 2d 00 00 00 00    	add    %ch,0x0(%rip)        # 6f2 <.debug_info+0x6f2>
 6f2:	0c 00                	or     $0x0,%al
 6f4:	00 00                	add    %al,(%rax)
 6f6:	00 74 0e 32          	add    %dh,0x32(%rsi,%rcx,1)
 6fa:	06                   	(bad)  
	...
 703:	00 00                	add    %al,(%rax)
 705:	12 00                	adc    (%rax),%al
 707:	00 00                	add    %al,(%rax)
 709:	00 00                	add    %al,(%rax)
 70b:	00 00                	add    %al,(%rax)
 70d:	00 0d 04 00 00 13    	add    %cl,0x13000004(%rip)        # 13000717 <ConsoleKeyEventHandler(Input::Key, bool)+0x13000267>
	...
 71b:	89 07                	mov    %eax,(%rdi)
 71d:	00 00                	add    %al,(%rax)
 71f:	2b 07                	sub    (%rdi),%eax
 721:	00 00                	add    %al,(%rax)
 723:	02 01                	add    (%rcx),%al
 725:	55                   	push   %rbp
 726:	03 a3 01 55 00 13    	add    0x13005501(%rbx),%esp
	...
 734:	72 06                	jb     73c <.debug_info+0x73c>
 736:	00 00                	add    %al,(%rax)
 738:	44 07                	rex.R (bad) 
 73a:	00 00                	add    %al,(%rax)
 73c:	02 01                	add    (%rcx),%al
 73e:	55                   	push   %rbp
 73f:	03 a3 01 55 00 13    	add    0x13005501(%rbx),%esp
	...
 74d:	a1 04 00 00 66 07 00 	movabs 0x200000766000004,%eax
 754:	00 02 
 756:	01 51 02             	add    %edx,0x2(%rcx)
 759:	08 3e                	or     %bh,(%rsi)
 75b:	02 01                	add    (%rcx),%al
 75d:	52                   	push   %rdx
 75e:	01 3f                	add    %edi,(%rdi)
 760:	02 01                	add    (%rcx),%al
 762:	58                   	pop    %rax
 763:	01 30                	add    %esi,(%rax)
 765:	00 12                	add    %dl,(%rdx)
	...
 76f:	59                   	pop    %rcx
 770:	04 00                	add    $0x0,%al
 772:	00 19                	add    %bl,(%rcx)
	...
 77c:	89 07                	mov    %eax,(%rdi)
 77e:	00 00                	add    %al,(%rax)
 780:	02 01                	add    (%rcx),%al
 782:	55                   	push   %rbp
 783:	02 7c 00 00          	add    0x0(%rax,%rax,1),%bh
 787:	00 00                	add    %al,(%rax)
 789:	1a a4 05 00 00 2b a9 	sbb    -0x56d50000(%rbp,%rax,1),%ah
 790:	07                   	(bad)  
	...
 799:	00 00                	add    %al,(%rax)
 79b:	38 01                	cmp    %al,(%rcx)
 79d:	00 00                	add    %al,(%rax)
 79f:	00 00                	add    %al,(%rax)
 7a1:	00 00                	add    %al,(%rax)
 7a3:	01 9c 3a 09 00 00 0f 	add    %ebx,0xf000009(%rdx,%rdi,1)
 7aa:	00 00                	add    %al,(%rax)
 7ac:	00 00                	add    %al,(%rax)
 7ae:	2d 06 00 00 00       	sub    $0x6,%eax
 7b3:	00 00                	add    %al,(%rax)
 7b5:	00 00                	add    %al,(%rax)
 7b7:	00 00                	add    %al,(%rax)
 7b9:	00 0c 00             	add    %cl,(%rax,%rax,1)
 7bc:	00 00                	add    %al,(%rax)
 7be:	00 2d 0a e9 04 00    	add    %ch,0x4e90a(%rip)        # 4f0ce <ConsoleKeyEventHandler(Input::Key, bool)+0x4ec1e>
	...
 7cc:	00 0c 00             	add    %cl,(%rax,%rax,1)
 7cf:	00 00                	add    %al,(%rax)
 7d1:	00 2e                	add    %ch,(%rsi)
 7d3:	0a e9                	or     %cl,%ch
 7d5:	04 00                	add    $0x0,%al
	...
 7df:	00 0c 00             	add    %cl,(%rax,%rax,1)
 7e2:	00 00                	add    %al,(%rax)
 7e4:	00 2f                	add    %ch,(%rdi)
 7e6:	0a e9                	or     %cl,%ch
 7e8:	04 00                	add    $0x0,%al
	...
 7f2:	00 2e                	add    %ch,(%rsi)
 7f4:	61                   	(bad)  
 7f5:	6c                   	insb   (%dx),%es:(%rdi)
 7f6:	74 00                	je     7f8 <.debug_info+0x7f8>
 7f8:	01 30                	add    %esi,(%rax)
 7fa:	0a e9                	or     %cl,%ch
 7fc:	04 00                	add    $0x0,%al
	...
 806:	00 07                	add    %al,(%rdi)
	...
 810:	73 04                	jae    816 <.debug_info+0x816>
 812:	00 00                	add    %al,(%rax)
 814:	35 08 00 00 02       	xor    $0x2000008,%eax
 819:	01 54 01 30          	add    %edx,0x30(%rcx,%rax,1)
 81d:	02 01                	add    (%rcx),%al
 81f:	51                   	push   %rcx
 820:	09 03                	or     %eax,(%rbx)
	...
 82a:	02 01                	add    (%rcx),%al
 82c:	52                   	push   %rdx
 82d:	01 3f                	add    %edi,(%rdi)
 82f:	02 01                	add    (%rcx),%al
 831:	58                   	pop    %rax
 832:	01 30                	add    %esi,(%rax)
 834:	00 07                	add    %al,(%rdi)
	...
 83e:	73 04                	jae    844 <.debug_info+0x844>
 840:	00 00                	add    %al,(%rax)
 842:	56                   	push   %rsi
 843:	08 00                	or     %al,(%rax)
 845:	00 02                	add    %al,(%rdx)
 847:	01 54 01 39          	add    %edx,0x39(%rcx,%rax,1)
 84b:	02 01                	add    (%rcx),%al
 84d:	52                   	push   %rdx
 84e:	01 30                	add    %esi,(%rax)
 850:	02 01                	add    (%rcx),%al
 852:	58                   	pop    %rax
 853:	01 3f                	add    %edi,(%rdi)
 855:	00 07                	add    %al,(%rdi)
	...
 85f:	73 04                	jae    865 <.debug_info+0x865>
 861:	00 00                	add    %al,(%rax)
 863:	8f 08 00 00          	(bad)
 867:	02 01                	add    (%rcx),%al
 869:	54                   	push   %rsp
 86a:	01 3d 02 01 51 09    	add    %edi,0x9510102(%rip)        # 9510972 <ConsoleKeyEventHandler(Input::Key, bool)+0x95104c2>
 870:	03 00                	add    (%rax),%eax
 872:	00 00                	add    %al,(%rax)
 874:	00 00                	add    %al,(%rax)
 876:	00 00                	add    %al,(%rax)
 878:	00 02                	add    %al,(%rdx)
 87a:	01 52 11             	add    %edx,0x11(%rdx)
 87d:	09 ff                	or     %edi,%edi
 87f:	30 91 bf 7f 94 01    	xor    %dl,0x1947fbf(%rcx)
 885:	30 29                	xor    %ch,(%rcx)
 887:	28 01                	sub    %al,(%rcx)
 889:	00 16                	add    %dl,(%rsi)
 88b:	13 3f                	adc    (%rdi),%edi
 88d:	1a 00                	sbb    (%rax),%al
 88f:	07                   	(bad)  
	...
 898:	73 04                	jae    89e <.debug_info+0x89e>
 89a:	00 00                	add    %al,(%rax)
 89c:	c8 08 00 00          	enter  $0x8,$0x0
 8a0:	02 01                	add    (%rcx),%al
 8a2:	54                   	push   %rsp
 8a3:	01 44 02 01          	add    %eax,0x1(%rdx,%rax,1)
 8a7:	51                   	push   %rcx
 8a8:	09 03                	or     %eax,(%rbx)
	...
 8b2:	02 01                	add    (%rcx),%al
 8b4:	52                   	push   %rdx
 8b5:	11 09                	adc    %ecx,(%rcx)
 8b7:	ff 30                	push   (%rax)
 8b9:	7f 00                	jg     8bb <.debug_info+0x8bb>
 8bb:	08 ff                	or     %bh,%bh
 8bd:	1a 30                	sbb    (%rax),%dh
 8bf:	29 28                	sub    %ebp,(%rax)
 8c1:	01 00                	add    %eax,(%rax)
 8c3:	16                   	(bad)  
 8c4:	13 3f                	adc    (%rdi),%edi
 8c6:	1a 00                	sbb    (%rax),%al
 8c8:	07                   	(bad)  
	...
 8d1:	73 04                	jae    8d7 <.debug_info+0x8d7>
 8d3:	00 00                	add    %al,(%rax)
 8d5:	0d 09 00 00 02       	or     $0x2000009,%eax
 8da:	01 54 01 4c          	add    %edx,0x4c(%rcx,%rax,1)
 8de:	02 01                	add    (%rcx),%al
 8e0:	51                   	push   %rcx
 8e1:	09 03                	or     %eax,(%rbx)
	...
 8eb:	02 01                	add    (%rcx),%al
 8ed:	52                   	push   %rdx
 8ee:	11 09                	adc    %ecx,(%rcx)
 8f0:	ff 30                	push   (%rax)
 8f2:	7e 00                	jle    8f4 <.debug_info+0x8f4>
 8f4:	08 ff                	or     %bh,%bh
 8f6:	1a 30                	sbb    (%rax),%dh
 8f8:	29 28                	sub    %ebp,(%rax)
 8fa:	01 00                	add    %eax,(%rax)
 8fc:	16                   	(bad)  
 8fd:	13 3f                	adc    (%rdi),%edi
 8ff:	1a 02                	sbb    (%rdx),%al
 901:	01 58 08             	add    %ebx,0x8(%rax)
 904:	7e 00                	jle    906 <.debug_info+0x906>
 906:	4f 24 4f             	rex.WRXB and $0x4f,%al
 909:	26 3f                	es (bad) 
 90b:	1a 00                	sbb    (%rax),%al
 90d:	0a 00                	or     (%rax),%al
 90f:	00 00                	add    %al,(%rax)
 911:	00 00                	add    %al,(%rax)
 913:	00 00                	add    %al,(%rax)
 915:	00 73 04             	add    %dh,0x4(%rbx)
 918:	00 00                	add    %al,(%rax)
 91a:	02 01                	add    (%rcx),%al
 91c:	54                   	push   %rsp
 91d:	03 40 4c             	add    0x4c(%rax),%eax
 920:	24 02                	and    $0x2,%al
 922:	01 51 09             	add    %edx,0x9(%rcx)
 925:	03 00                	add    (%rax),%eax
 927:	00 00                	add    %al,(%rax)
 929:	00 00                	add    %al,(%rax)
 92b:	00 00                	add    %al,(%rax)
 92d:	00 02                	add    %al,(%rdx)
 92f:	01 52 01             	add    %edx,0x1(%rdx)
 932:	3f                   	(bad)  
 933:	02 01                	add    (%rcx),%al
 935:	58                   	pop    %rax
 936:	01 30                	add    %esi,(%rax)
 938:	00 00                	add    %al,(%rax)
 93a:	1a 8a 05 00 00 23    	sbb    0x23000005(%rdx),%cl
 940:	5a                   	pop    %rdx
 941:	09 00                	or     %eax,(%rax)
	...
 94b:	00 43 00             	add    %al,0x0(%rbx)
 94e:	00 00                	add    %al,(%rax)
 950:	00 00                	add    %al,(%rax)
 952:	00 00                	add    %al,(%rax)
 954:	01 9c a9 09 00 00 0f 	add    %ebx,0xf000009(%rcx,%rbp,4)
 95b:	00 00                	add    %al,(%rax)
 95d:	00 00                	add    %al,(%rax)
 95f:	2d 06 00 00 00       	sub    $0x6,%eax
 964:	00 00                	add    %al,(%rax)
 966:	00 00                	add    %al,(%rax)
 968:	00 00                	add    %al,(%rax)
 96a:	00 07                	add    %al,(%rdi)
	...
 974:	89 07                	mov    %eax,(%rdi)
 976:	00 00                	add    %al,(%rax)
 978:	83 09 00             	orl    $0x0,(%rcx)
 97b:	00 02                	add    %al,(%rdx)
 97d:	01 55 02             	add    %edx,0x2(%rbp)
 980:	73 00                	jae    982 <.debug_info+0x982>
 982:	00 0a                	add    %cl,(%rdx)
	...
 98c:	a1 04 00 00 02 01 54 	movabs 0x4003540102000004,%eax
 993:	03 40 
 995:	4d 24 02             	rex.WRB and $0x2,%al
 998:	01 51 02             	add    %edx,0x2(%rcx)
 99b:	08 3e                	or     %bh,(%rsi)
 99d:	02 01                	add    (%rcx),%al
 99f:	52                   	push   %rdx
 9a0:	01 3f                	add    %edi,(%rdi)
 9a2:	02 01                	add    (%rcx),%al
 9a4:	58                   	pop    %rax
 9a5:	01 30                	add    %esi,(%rax)
 9a7:	00 00                	add    %al,(%rax)
 9a9:	11 6b 05             	adc    %ebp,0x5(%rbx)
 9ac:	00 00                	add    %al,(%rax)
 9ae:	1e                   	(bad)  
 9af:	01 b9 09 00 00 00    	add    %edi,0x9(%rcx)
 9b5:	cc                   	int3   
 9b6:	09 00                	or     %eax,(%rax)
 9b8:	00 0b                	add    %cl,(%rbx)
 9ba:	00 00                	add    %al,(%rax)
 9bc:	00 00                	add    %al,(%rax)
 9be:	2d 06 00 00 0b       	sub    $0xb000006,%eax
 9c3:	00 00                	add    %al,(%rax)
 9c5:	00 00                	add    %al,(%rax)
 9c7:	43 00 00             	rex.XB add %al,(%r8)
 9ca:	00 00                	add    %al,(%rax)
 9cc:	1b a9 09 00 00 00    	sbb    0x9(%rcx),%ebp
 9d2:	00 00                	add    %al,(%rax)
 9d4:	00 ef                	add    %ch,%bh
 9d6:	09 00                	or     %eax,(%rax)
	...
 9e0:	00 01                	add    %al,(%rcx)
 9e2:	00 00                	add    %al,(%rax)
 9e4:	00 00                	add    %al,(%rax)
 9e6:	00 00                	add    %al,(%rax)
 9e8:	00 01                	add    %al,(%rcx)
 9ea:	9c                   	pushf  
 9eb:	f7 09 00 00 2f b9    	testl  $0xb92f0000,(%rcx)
 9f1:	09 00                	or     %eax,(%rax)
 9f3:	00 01                	add    %al,(%rcx)
 9f5:	55                   	push   %rbp
 9f6:	00 16                	add    %dl,(%rsi)
 9f8:	be 05 00 00 17       	mov    $0x17000005,%esi
 9fd:	17                   	(bad)  
 9fe:	0a 00                	or     (%rax),%al
	...
 a08:	00 4e 00             	add    %cl,0x0(%rsi)
 a0b:	00 00                	add    %al,(%rax)
 a0d:	00 00                	add    %al,(%rax)
 a0f:	00 00                	add    %al,(%rax)
 a11:	01 9c 66 0a 00 00 0f 	add    %ebx,0xf00000a(%rsi,%riz,2)
 a18:	00 00                	add    %al,(%rax)
 a1a:	00 00                	add    %al,(%rax)
 a1c:	2d 06 00 00 00       	sub    $0x6,%eax
 a21:	00 00                	add    %al,(%rax)
 a23:	00 00                	add    %al,(%rax)
 a25:	00 00                	add    %al,(%rax)
 a27:	00 07                	add    %al,(%rdi)
	...
 a31:	89 07                	mov    %eax,(%rdi)
 a33:	00 00                	add    %al,(%rax)
 a35:	40 0a 00             	rex or (%rax),%al
 a38:	00 02                	add    %al,(%rdx)
 a3a:	01 55 02             	add    %edx,0x2(%rbp)
 a3d:	73 00                	jae    a3f <.debug_info+0xa3f>
 a3f:	00 0a                	add    %cl,(%rdx)
	...
 a49:	a1 04 00 00 02 01 54 	movabs 0x4003540102000004,%eax
 a50:	03 40 
 a52:	4d 24 02             	rex.WRB and $0x2,%al
 a55:	01 51 02             	add    %edx,0x2(%rcx)
 a58:	08 3e                	or     %bh,(%rsi)
 a5a:	02 01                	add    (%rcx),%al
 a5c:	52                   	push   %rdx
 a5d:	01 3f                	add    %edi,(%rdi)
 a5f:	02 01                	add    (%rcx),%al
 a61:	58                   	pop    %rax
 a62:	01 30                	add    %esi,(%rax)
 a64:	00 00                	add    %al,(%rax)
 a66:	11 51 05             	adc    %edx,0x5(%rcx)
 a69:	00 00                	add    %al,(%rax)
 a6b:	0d 01 76 0a 00       	or     $0xa7601,%eax
 a70:	00 00                	add    %al,(%rax)
 a72:	80 0a 00             	orb    $0x0,(%rdx)
 a75:	00 0b                	add    %cl,(%rbx)
 a77:	00 00                	add    %al,(%rax)
 a79:	00 00                	add    %al,(%rax)
 a7b:	2d 06 00 00 00       	sub    $0x6,%eax
 a80:	1b 66 0a             	sbb    0xa(%rsi),%esp
 a83:	00 00                	add    %al,(%rax)
 a85:	00 00                	add    %al,(%rax)
 a87:	00 00                	add    %al,(%rax)
 a89:	a3 0a 00 00 00 00 00 	movabs %eax,0xa
 a90:	00 00 
 a92:	00 00                	add    %al,(%rax)
 a94:	00 68 00             	add    %ch,0x0(%rax)
 a97:	00 00                	add    %al,(%rax)
 a99:	00 00                	add    %al,(%rax)
 a9b:	00 00                	add    %al,(%rax)
 a9d:	01 9c 0f 0b 00 00 10 	add    %ebx,0x1000000b(%rdi,%rcx,1)
 aa4:	76 0a                	jbe    ab0 <.debug_info+0xab0>
	...
 aae:	00 00                	add    %al,(%rax)
 ab0:	07                   	(bad)  
	...
 ab9:	2a 0c 00             	sub    (%rax,%rax,1),%cl
 abc:	00 c8                	add    %cl,%al
 abe:	0a 00                	or     (%rax),%al
 ac0:	00 02                	add    %al,(%rdx)
 ac2:	01 55 02             	add    %edx,0x2(%rbp)
 ac5:	08 30                	or     %dh,(%rax)
 ac7:	00 07                	add    %al,(%rdi)
	...
 ad1:	57                   	push   %rdi
 ad2:	06                   	(bad)  
 ad3:	00 00                	add    %al,(%rax)
 ad5:	e0 0a                	loopne ae1 <.debug_info+0xae1>
 ad7:	00 00                	add    %al,(%rax)
 ad9:	02 01                	add    (%rcx),%al
 adb:	55                   	push   %rbp
 adc:	02 73 00             	add    0x0(%rbx),%dh
 adf:	00 07                	add    %al,(%rdi)
	...
 ae9:	33 0c 00             	xor    (%rax,%rax,1),%ecx
 aec:	00 f9                	add    %bh,%cl
 aee:	0a 00                	or     (%rax),%al
 af0:	00 02                	add    %al,(%rdx)
 af2:	01 55 03             	add    %edx,0x3(%rbp)
 af5:	0a 30                	or     (%rax),%dh
 af7:	07                   	(bad)  
 af8:	00 0a                	add    %cl,(%rdx)
	...
 b02:	f7 09 00 00 02 01    	testl  $0x1020000,(%rcx)
 b08:	55                   	push   %rbp
 b09:	03 a3 01 55 00 00    	add    0x5501(%rbx),%esp
 b0f:	30 00                	xor    %al,(%rax)
 b11:	00 00                	add    %al,(%rax)
 b13:	00 01                	add    %al,(%rcx)
 b15:	04 06                	add    $0x6,%al
	...
 b23:	1f                   	(bad)  
 b24:	00 00                	add    %al,(%rax)
 b26:	00 00                	add    %al,(%rax)
 b28:	00 00                	add    %al,(%rax)
 b2a:	00 01                	add    %al,(%rcx)
 b2c:	9c                   	pushf  
 b2d:	8a 0b                	mov    (%rbx),%cl
 b2f:	00 00                	add    %al,(%rax)
 b31:	17                   	(bad)  
 b32:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 b36:	04 28                	add    $0x28,%al
 b38:	95                   	xchg   %eax,%ebp
	...
 b41:	00 00                	add    %al,(%rax)
 b43:	00 18                	add    %bl,(%rax)
 b45:	00 00                	add    %al,(%rax)
 b47:	00 00                	add    %al,(%rax)
 b49:	04 32                	add    $0x32,%al
 b4b:	e9 04 00 00 00       	jmp    b54 <.debug_info+0xb54>
 b50:	00 00                	add    %al,(%rax)
 b52:	00 00                	add    %al,(%rax)
 b54:	00 00                	add    %al,(%rax)
 b56:	00 0c 00             	add    %cl,(%rax,%rax,1)
 b59:	00 00                	add    %al,(%rax)
 b5b:	00 06                	add    %al,(%rsi)
 b5d:	0e                   	(bad)  
 b5e:	28 06                	sub    %al,(%rsi)
	...
 b68:	00 00                	add    %al,(%rax)
 b6a:	0a 00                	or     (%rax),%al
 b6c:	00 00                	add    %al,(%rax)
 b6e:	00 00                	add    %al,(%rax)
 b70:	00 00                	add    %al,(%rax)
 b72:	00 96 06 00 00 02    	add    %dl,0x2000006(%rsi)
 b78:	01 54 03 a3          	add    %edx,-0x5d(%rbx,%rax,1)
 b7c:	01 55 02             	add    %edx,0x2(%rbp)
 b7f:	01 51 06             	add    %edx,0x6(%rcx)
 b82:	a3 01 54 08 ff 1a 00 	movabs %eax,0x3100001aff085401
 b89:	00 31 
 b8b:	72 06                	jb     b93 <.debug_info+0xb93>
	...
 b99:	00 00                	add    %al,(%rax)
 b9b:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
 b9c:	00 00                	add    %al,(%rax)
 b9e:	00 00                	add    %al,(%rax)
 ba0:	00 00                	add    %al,(%rax)
 ba2:	00 01                	add    %al,(%rcx)
 ba4:	9c                   	pushf  
 ba5:	2a 0c 00             	sub    (%rax,%rax,1),%cl
 ba8:	00 10                	add    %dl,(%rax)
 baa:	82                   	(bad)  
 bab:	06                   	(bad)  
	...
 bb4:	00 00                	add    %al,(%rax)
 bb6:	10 8b 06 00 00 00    	adc    %cl,0x6(%rbx)
 bbc:	00 00                	add    %al,(%rax)
 bbe:	00 00                	add    %al,(%rax)
 bc0:	00 00                	add    %al,(%rax)
 bc2:	00 32                	add    %dh,(%rdx)
 bc4:	72 06                	jb     bcc <.debug_info+0xbcc>
	...
 bd2:	00 00                	add    %al,(%rax)
 bd4:	00 01                	add    %al,(%rcx)
 bd6:	7c 06                	jl     bde <.debug_info+0xbde>
 bd8:	11 0c 00             	adc    %ecx,(%rax,%rax,1)
 bdb:	00 33                	add    %dh,(%rbx)
 bdd:	8b 06                	mov    (%rsi),%eax
 bdf:	00 00                	add    %al,(%rax)
 be1:	10 82 06 00 00 00    	adc    %al,0x6(%rdx)
 be7:	00 00                	add    %al,(%rax)
 be9:	00 00                	add    %al,(%rax)
 beb:	00 00                	add    %al,(%rax)
 bed:	00 12                	add    %dl,(%rdx)
	...
 bf7:	59                   	pop    %rcx
 bf8:	04 00                	add    $0x0,%al
 bfa:	00 0a                	add    %cl,(%rdx)
	...
 c04:	89 07                	mov    %eax,(%rdi)
 c06:	00 00                	add    %al,(%rax)
 c08:	02 01                	add    (%rcx),%al
 c0a:	55                   	push   %rbp
 c0b:	03 a3 01 55 00 00    	add    0x5501(%rbx),%esp
 c11:	19 00                	sbb    %eax,(%rax)
 c13:	00 00                	add    %al,(%rax)
 c15:	00 00                	add    %al,(%rax)
 c17:	00 00                	add    %al,(%rax)
 c19:	00 a1 04 00 00 02    	add    %ah,0x2000004(%rcx)
 c1f:	01 52 01             	add    %edx,0x1(%rdx)
 c22:	3f                   	(bad)  
 c23:	02 01                	add    (%rcx),%al
 c25:	58                   	pop    %rax
 c26:	01 30                	add    %esi,(%rax)
 c28:	00 00                	add    %al,(%rax)
 c2a:	1c 00                	sbb    $0x0,%al
 c2c:	00 00                	add    %al,(%rax)
 c2e:	00 00                	add    %al,(%rax)
 c30:	00 00                	add    %al,(%rax)
 c32:	00 1c 00             	add    %bl,(%rax,%rax,1)
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
}
   0:	01 28                	add    %ebp,(%rax)
   2:	00 03                	add    %al,(%rbx)
   4:	0e                   	(bad)  
   5:	1c 0b                	sbb    $0xb,%al
   7:	00 00                	add    %al,(%rax)
   9:	02 49 00             	add    0x0(%rcx),%cl
   c:	02 18                	add    (%rax),%bl
   e:	7e 18                	jle    28 <.debug_abbrev+0x28>
{
  10:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  12:	03 28                	add    (%rax),%ebp
  14:	00 03                	add    %al,(%rbx)
  16:	08 1c 0b             	or     %bl,(%rbx,%rcx,1)
  19:	00 00                	add    %al,(%rax)
  1b:	04 05                	add    $0x5,%al
  1d:	00 49 13             	add    %cl,0x13(%rcx)
  20:	00 00                	add    %al,(%rax)
  22:	05 05 00 49 13       	add    $0x13490005,%eax
{
  27:	34 19                	xor    $0x19,%al
  29:	00 00                	add    %al,(%rax)
  2b:	06                   	(bad)  
  2c:	24 00                	and    $0x0,%al
  2e:	0b 0b                	or     (%rbx),%ecx
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  30:	3e 0b 03             	ds or  (%rbx),%eax
  33:	0e                   	(bad)  
  34:	00 00                	add    %al,(%rax)
  36:	07                   	(bad)  
  37:	48 01 7d 01          	add    %rdi,0x1(%rbp)
{
  3b:	7f 13                	jg     50 <.debug_abbrev+0x50>
  3d:	01 13                	add    %edx,(%rbx)
  3f:	00 00                	add    %al,(%rax)
  41:	08 2e                	or     %ch,(%rsi)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  43:	01 3f                	add    %edi,(%rdi)
  45:	19 03                	sbb    %eax,(%rbx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  47:	0e                   	(bad)  
  48:	3a 0b                	cmp    (%rbx),%cl
  4a:	3b 0b                	cmp    (%rbx),%ecx
  4c:	39 0b                	cmp    %ecx,(%rbx)
  4e:	6e                   	outsb  %ds:(%rsi),(%dx)
  4f:	0e                   	(bad)  
  50:	32 21                	xor    (%rcx),%ah
  52:	01 3c 19             	add    %edi,(%rcx,%rbx,1)
  55:	64 13 01             	adc    %fs:(%rcx),%eax
  58:	13 00                	adc    (%rax),%eax
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5a:	00 09                	add    %cl,(%rcx)
  5c:	0d 00 03 0e 3a       	or     $0x3a0e0300,%eax
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  61:	21 05 3b 0b 39 0b    	and    %eax,0xb390b3b(%rip)        # b390ba2 <ConsoleKeyEventHandler(Input::Key, bool)+0xb3906f2>
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  67:	49 13 38             	adc    (%r8),%rdi
  6a:	0b 00                	or     (%rax),%eax
  6c:	00 0a                	add    %cl,(%rdx)
  6e:	48 01 7d 01          	add    %rdi,0x1(%rbp)
  72:	82                   	(bad)  
  73:	01 19                	add    %ebx,(%rcx)
  75:	7f 13                	jg     8a <.debug_abbrev+0x8a>
  77:	00 00                	add    %al,(%rax)
  79:	0b 05 00 03 0e 49    	or     0x490e0300(%rip),%eax        # 490e037f <ConsoleKeyEventHandler(Input::Key, bool)+0x490dfecf>
  7f:	13 34 19             	adc    (%rcx,%rbx,1),%esi
  82:	00 00                	add    %al,(%rax)
  84:	0c 34                	or     $0x34,%al
  86:	00 03                	add    %al,(%rbx)
  88:	0e                   	(bad)  
  89:	3a 21                	cmp    (%rcx),%ah
  8b:	01 3b                	add    %edi,(%rbx)
  8d:	0b 39                	or     (%rcx),%edi
  8f:	0b 49 13             	or     0x13(%rcx),%ecx
  92:	02 17                	add    (%rdi),%dl
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  94:	b7 42                	mov    $0x42,%bh
  96:	17                   	(bad)  
  97:	00 00                	add    %al,(%rax)
  99:	0d 26 00 49 13       	or     $0x13490026,%eax
  9e:	00 00                	add    %al,(%rax)
  a0:	0e                   	(bad)  
  a1:	0f 00 0b             	str    (%rbx)
  a4:	21 08                	and    %ecx,(%rax)
  a6:	49 13 00             	adc    (%r8),%rax
  a9:	00 0f                	add    %cl,(%rdi)
  ab:	05 00 03 0e 49       	add    $0x490e0300,%eax
  b0:	13 34 19             	adc    (%rcx,%rbx,1),%esi
  b3:	02 17                	add    (%rdi),%dl
  b5:	b7 42                	mov    $0x42,%bh
  b7:	17                   	(bad)  
  b8:	00 00                	add    %al,(%rax)
  ba:	10 05 00 31 13 02    	adc    %al,0x2133100(%rip)        # 21331c0 <ConsoleKeyEventHandler(Input::Key, bool)+0x2132d10>
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c0:	17                   	(bad)  
  c1:	b7 42                	mov    $0x42,%bh
  c3:	17                   	(bad)  
  c4:	00 00                	add    %al,(%rax)
  c6:	11 2e                	adc    %ebp,(%rsi)
  c8:	01 47 13             	add    %eax,0x13(%rdi)
  cb:	3a 21                	cmp    (%rcx),%ah
  cd:	01 3b                	add    %edi,(%rbx)
  cf:	0b 39                	or     (%rcx),%edi
  d1:	0b 64 13 20          	or     0x20(%rbx,%rdx,1),%esp
  d5:	0b 01                	or     (%rcx),%eax
  d7:	13 00                	adc    (%rax),%eax
  d9:	00 12                	add    %dl,(%rdx)
  db:	48 00 7d 01          	rex.W add %dil,0x1(%rbp)
  df:	7f 13                	jg     f4 <.debug_abbrev+0xf4>
  e1:	00 00                	add    %al,(%rax)
  e3:	13 48 01             	adc    0x1(%rax),%ecx
  e6:	7d 01                	jge    e9 <.debug_abbrev+0xe9>
  e8:	82                   	(bad)  
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  e9:	01 19                	add    %ebx,(%rcx)
  eb:	7f 13                	jg     100 <.debug_abbrev+0x100>
  ed:	01 13                	add    %edx,(%rbx)
  ef:	00 00                	add    %al,(%rax)
  f1:	14 39                	adc    $0x39,%al
  f3:	01 03                	add    %eax,(%rbx)
  f5:	0e                   	(bad)  
  f6:	3a 0b                	cmp    (%rbx),%cl
  f8:	3b 0b                	cmp    (%rbx),%ecx
  fa:	39 21                	cmp    %esp,(%rcx)
  fc:	0b 01                	or     (%rcx),%eax
  fe:	13 00                	adc    (%rax),%eax
 100:	00 15 0d 00 03 08    	add    %dl,0x803000d(%rip)        # 8030113 <ConsoleKeyEventHandler(Input::Key, bool)+0x802fc63>
 106:	3a 21                	cmp    (%rcx),%ah
 108:	03 3b                	add    (%rbx),%edi
 10a:	21 09                	and    %ecx,(%rcx)
 10c:	39 0b                	cmp    %ecx,(%rbx)
 10e:	49 13 38             	adc    (%r8),%rdi
 111:	0b 00                	or     (%rax),%eax
 113:	00 16                	add    %dl,(%rsi)
 115:	2e 01 47 13          	cs add %eax,0x13(%rdi)
}
 119:	3a 21                	cmp    (%rcx),%ah
 11b:	01 3b                	add    %edi,(%rbx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 11d:	0b 39                	or     (%rcx),%edi
 11f:	21 06                	and    %eax,(%rsi)
 121:	64 13 11             	adc    %fs:(%rcx),%edx
}
 124:	01 12                	add    %edx,(%rdx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 126:	07                   	(bad)  
 127:	40 18 7c 19 01       	sbb    %dil,0x1(%rcx,%rbx,1)
 12c:	13 00                	adc    (%rax),%eax
 12e:	00 17                	add    %dl,(%rdi)
 130:	05 00 03 08 3a       	add    $0x3a080300,%eax
}
 135:	21 01                	and    %eax,(%rcx)
 137:	3b 0b                	cmp    (%rbx),%ecx
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 139:	39 0b                	cmp    %ecx,(%rbx)
 13b:	49 13 02             	adc    (%r10),%rax
 13e:	17                   	(bad)  
 13f:	b7 42                	mov    $0x42,%bh
 141:	17                   	(bad)  
 142:	00 00                	add    %al,(%rax)
}
 144:	18 05 00 03 0e 3a    	sbb    %al,0x3a0e0300(%rip)        # 3a0e044a <ConsoleKeyEventHandler(Input::Key, bool)+0x3a0dff9a>
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 14a:	21 01                	and    %eax,(%rcx)
 14c:	3b 0b                	cmp    (%rbx),%ecx
 14e:	39 0b                	cmp    %ecx,(%rbx)
{
 150:	49 13 02             	adc    (%r10),%rax
 153:	17                   	(bad)  
 154:	b7 42                	mov    $0x42,%bh
 156:	17                   	(bad)  
 157:	00 00                	add    %al,(%rax)
 159:	19 48 01             	sbb    %ecx,0x1(%rax)
    m_TextPresenter->Clear();
 15c:	7d 01                	jge    15f <.debug_abbrev+0x15f>
 15e:	7f 13                	jg     173 <.debug_abbrev+0x173>
 160:	00 00                	add    %al,(%rax)
 162:	1a 2e                	sbb    (%rsi),%ch
    RenderModifiers();
 164:	01 47 13             	add    %eax,0x13(%rdi)
 167:	3a 21                	cmp    (%rcx),%ah
 169:	01 3b                	add    %edi,(%rbx)
 16b:	0b 39                	or     (%rcx),%edi
 16d:	21 06                	and    %eax,(%rsi)
 16f:	64 13 11             	adc    %fs:(%rcx),%edx
 172:	01 12                	add    %edx,(%rdx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 174:	07                   	(bad)  
 175:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
}
 179:	01 13                	add    %edx,(%rbx)
 17b:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17d:	1b 2e                	sbb    (%rsi),%ebp
 17f:	01 31                	add    %esi,(%rcx)
 181:	13 6e 0e             	adc    0xe(%rsi),%ebp
 184:	64 13 11             	adc    %fs:(%rcx),%edx
 187:	01 12                	add    %edx,(%rdx)
 189:	07                   	(bad)  
 18a:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 18e:	01 13                	add    %edx,(%rbx)
 190:	00 00                	add    %al,(%rax)
 192:	1c 2e                	sbb    $0x2e,%al
 194:	00 3f                	add    %bh,(%rdi)
 196:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
 199:	6e                   	outsb  %ds:(%rsi),(%dx)
 19a:	0e                   	(bad)  
}
 19b:	03 0e                	add    (%rsi),%ecx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 19d:	00 00                	add    %al,(%rax)
 19f:	1d 11 01 25 0e       	sbb    $0xe250111,%eax
  : m_TextPresenter(new Video::TextModePresenter()),
 1a4:	13 0b                	adc    (%rbx),%ecx
 1a6:	03 1f                	add    (%rdi),%ebx
 1a8:	1b 1f                	sbb    (%rdi),%ebx
Console::Console()
 1aa:	11 01                	adc    %eax,(%rcx)
 1ac:	12 07                	adc    (%rdi),%al
 1ae:	10 17                	adc    %dl,(%rdi)
 1b0:	00 00                	add    %al,(%rax)
 1b2:	1e                   	(bad)  
  : m_TextPresenter(new Video::TextModePresenter()),
 1b3:	24 00                	and    $0x0,%al
 1b5:	0b 0b                	or     (%rbx),%ecx
 1b7:	3e 0b 03             	ds or  (%rbx),%eax
 1ba:	08 00                	or     %al,(%rax)
 1bc:	00 1f                	add    %bl,(%rdi)
 1be:	16                   	(bad)  
 1bf:	00 03                	add    %al,(%rbx)
 1c1:	0e                   	(bad)  
 1c2:	3a 0b                	cmp    (%rbx),%cl
 1c4:	3b 0b                	cmp    (%rbx),%ecx
 1c6:	39 0b                	cmp    %ecx,(%rbx)
 1c8:	49 13 00             	adc    (%r8),%rax
 1cb:	00 20                	add    %ah,(%rax)
 1cd:	3b 00                	cmp    (%rax),%eax
 1cf:	03 0e                	add    (%rsi),%ecx
    m_Buffers(new uint8_t[23 * 80]),
 1d1:	00 00                	add    %al,(%rax)
 1d3:	21 04 01             	and    %eax,(%rcx,%rax,1)
 1d6:	03 08                	add    (%rax),%ecx
 1d8:	3e 0b 0b             	ds or  (%rbx),%ecx
 1db:	0b 49 13             	or     0x13(%rcx),%ecx
 1de:	3a 0b                	cmp    (%rbx),%cl
    m_KeyModifiers(0)
 1e0:	3b 0b                	cmp    (%rbx),%ecx
 1e2:	39 0b                	cmp    %ecx,(%rbx)
 1e4:	01 13                	add    %edx,(%rbx)
    m_Buffers(new uint8_t[23 * 80]),
 1e6:	00 00                	add    %al,(%rax)
}
 1e8:	22 04 01             	and    (%rcx,%rax,1),%al
    Refresh();
 1eb:	03 0e                	add    (%rsi),%ecx
    m_Buffers(new uint8_t[23 * 80]),
 1ed:	3e 0b 0b             	ds or  (%rbx),%ecx
 1f0:	0b 49 13             	or     0x13(%rcx),%ecx
    m_OffsetX(0),
 1f3:	3a 0b                	cmp    (%rbx),%cl
 1f5:	3b 0b                	cmp    (%rbx),%ecx
 1f7:	39 0b                	cmp    %ecx,(%rbx)
}
 1f9:	01 13                	add    %edx,(%rbx)
    Refresh();
 1fb:	00 00                	add    %al,(%rax)
 1fd:	23 2e                	and    (%rsi),%ebp
 1ff:	01 3f                	add    %edi,(%rdi)
 201:	19 03                	sbb    %eax,(%rbx)
 203:	0e                   	(bad)  
 204:	3a 0b                	cmp    (%rbx),%cl
 206:	3b 0b                	cmp    (%rbx),%ecx
 208:	39 0b                	cmp    %ecx,(%rbx)
 20a:	6e                   	outsb  %ds:(%rsi),(%dx)
 20b:	0e                   	(bad)  
 20c:	49 13 3c 19          	adc    (%r9,%rbx,1),%rdi
    RenderModifiers();
 210:	00 00                	add    %al,(%rax)
 212:	24 13                	and    $0x13,%al
 214:	01 03                	add    %eax,(%rbx)
 216:	0e                   	(bad)  
 217:	0b 0b                	or     (%rbx),%ecx
 219:	3a 0b                	cmp    (%rbx),%cl
{
 21b:	3b 0b                	cmp    (%rbx),%ecx
 21d:	39 0b                	cmp    %ecx,(%rbx)
 21f:	01 13                	add    %edx,(%rbx)
 221:	00 00                	add    %al,(%rax)
 223:	25 02 01 03 0e       	and    $0xe030102,%eax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 228:	3c 19                	cmp    $0x19,%al
 22a:	00 00                	add    %al,(%rax)
 22c:	26 2e 01 3f          	es cs add %edi,(%rdi)
}
 230:	19 03                	sbb    %eax,(%rbx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 232:	0e                   	(bad)  
 233:	3a 0b                	cmp    (%rbx),%cl
 235:	3b 0b                	cmp    (%rbx),%ecx
 237:	39 0b                	cmp    %ecx,(%rbx)
 239:	6e                   	outsb  %ds:(%rsi),(%dx)
 23a:	0e                   	(bad)  
 23b:	32 0b                	xor    (%rbx),%cl
 23d:	3c 19                	cmp    $0x19,%al
 23f:	64 13 20             	adc    %fs:(%rax),%esp
 242:	0b 00                	or     (%rax),%eax
 244:	00 27                	add    %ah,(%rdi)
 246:	02 01                	add    (%rcx),%al
 248:	03 0e                	add    (%rsi),%ecx
 24a:	0b 0b                	or     (%rbx),%ecx
 24c:	3a 0b                	cmp    (%rbx),%cl
 24e:	3b 0b                	cmp    (%rbx),%ecx
}
 250:	39 0b                	cmp    %ecx,(%rbx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 252:	01 13                	add    %edx,(%rbx)
 254:	00 00                	add    %al,(%rax)
 256:	28 2e                	sub    %ch,(%rsi)
 258:	01 3f                	add    %edi,(%rdi)
 25a:	19 03                	sbb    %eax,(%rbx)
 25c:	0e                   	(bad)  
 25d:	3a 0b                	cmp    (%rbx),%cl
 25f:	3b 0b                	cmp    (%rbx),%ecx
{
 261:	39 0b                	cmp    %ecx,(%rbx)
 263:	6e                   	outsb  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 264:	0e                   	(bad)  
 265:	32 0b                	xor    (%rbx),%cl
 267:	3c 19                	cmp    $0x19,%al
 269:	64 13 00             	adc    %fs:(%rax),%eax
 26c:	00 29                	add    %ch,(%rcx)
 26e:	34 00                	xor    $0x0,%al
{
 270:	03 0e                	add    (%rsi),%ecx
 272:	3a 0b                	cmp    (%rbx),%cl
 274:	3b 0b                	cmp    (%rbx),%ecx
 276:	39 0b                	cmp    %ecx,(%rbx)
 278:	49 13 3f             	adc    (%r15),%rdi
 27b:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 27e:	00 00                	add    %al,(%rax)
 280:	2a 3a                	sub    (%rdx),%bh
 282:	00 3a                	add    %bh,(%rdx)
 284:	0b 3b                	or     (%rbx),%edi
 286:	0b 39                	or     (%rcx),%edi
 288:	0b 18                	or     (%rax),%ebx
 28a:	13 00                	adc    (%rax),%eax
 28c:	00 2b                	add    %ch,(%rbx)
 28e:	2e 01 31             	cs add %esi,(%rcx)
 291:	13 6e 0e             	adc    0xe(%rsi),%ebp
 294:	64 13 01             	adc    %fs:(%rcx),%eax
 297:	13 00                	adc    (%rax),%eax
 299:	00 2c 05 00 03 08 3a 	add    %ch,0x3a080300(,%rax,1)
 2a0:	0b 3b                	or     (%rbx),%edi
    if (++m_OffsetX >= 80)
 2a2:	0b 39                	or     (%rcx),%edi
 2a4:	0b 49 13             	or     0x13(%rcx),%ecx
 2a7:	00 00                	add    %al,(%rax)
    m_LineLength++;
 2a9:	2d 0b 01 55 17       	sub    $0x1755010b,%eax
    if (++m_OffsetX >= 80)
 2ae:	00 00                	add    %al,(%rax)
 2b0:	2e 34 00             	cs xor $0x0,%al
 2b3:	03 08                	add    (%rax),%ecx
 2b5:	3a 0b                	cmp    (%rbx),%cl
 2b7:	3b 0b                	cmp    (%rbx),%ecx
 2b9:	39 0b                	cmp    %ecx,(%rbx)
 2bb:	49 13 02             	adc    (%r10),%rax
 2be:	17                   	(bad)  
 2bf:	b7 42                	mov    $0x42,%bh
        if (m_OffsetY >= 22)
 2c1:	17                   	(bad)  
 2c2:	00 00                	add    %al,(%rax)
 2c4:	2f                   	(bad)  
 2c5:	05 00 31 13 02       	add    $0x2133100,%eax
        m_OffsetX = 0;
 2ca:	18 00                	sbb    %al,(%rax)
        if (m_OffsetY >= 22)
 2cc:	00 30                	add    %dh,(%rax)
 2ce:	2e 01 3f             	cs add %edi,(%rdi)
        } else m_OffsetY++;
 2d1:	19 03                	sbb    %eax,(%rbx)
 2d3:	0e                   	(bad)  
 2d4:	3a 0b                	cmp    (%rbx),%cl
 2d6:	3b 0b                	cmp    (%rbx),%ecx
 2d8:	39 0b                	cmp    %ecx,(%rbx)
 2da:	6e                   	outsb  %ds:(%rsi),(%dx)
 2db:	0e                   	(bad)  
 2dc:	11 01                	adc    %eax,(%rcx)
 2de:	12 07                	adc    (%rdi),%al
            m_TextPresenter->MoveUp();
 2e0:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 2e4:	01 13                	add    %edx,(%rbx)
 2e6:	00 00                	add    %al,(%rax)
 2e8:	31 2e                	xor    %ebp,(%rsi)
 2ea:	01 31                	add    %esi,(%rcx)
 2ec:	13 6e 0e             	adc    0xe(%rsi),%ebp
 2ef:	11 01                	adc    %eax,(%rcx)
            RenderModifiers();
 2f1:	12 07                	adc    (%rdi),%al
 2f3:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
            RenderModifiers();
 2f7:	01 13                	add    %edx,(%rbx)
 2f9:	00 00                	add    %al,(%rax)
 2fb:	32 1d 01 31 13 52    	xor    0x52133101(%rip),%bl        # 52133402 <ConsoleKeyEventHandler(Input::Key, bool)+0x52132f52>
 301:	01 b8 42 0b 55 17    	add    %edi,0x17550b42(%rax)
            RenderModifiers();
 307:	58                   	pop    %rax
 308:	0b 59 0b             	or     0xb(%rcx),%ebx
 30b:	57                   	push   %rdi
 30c:	0b 01                	or     (%rcx),%eax
 30e:	13 00                	adc    (%rax),%eax
{
 310:	00 33                	add    %dh,(%rbx)
    switch (key)
 312:	05 00 31 13 00       	add    $0x133100,%eax
	...

Disassembly of section .debug_loclists:

0000000000000000 <.debug_loclists>:
}
   0:	63 03                	movsxd (%rbx),%eax
   2:	00 00                	add    %al,(%rax)
   4:	05 00 08 00 00       	add    $0x800,%eax
	...
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	00 00                	add    %al,(%rax)
  23:	00 04 90             	add    %al,(%rax,%rdx,4)
{
  26:	06                   	(bad)  
  27:	9e                   	sahf   
  28:	06                   	(bad)  
  29:	01 55 04             	add    %edx,0x4(%rbp)
  2c:	9e                   	sahf   
  2d:	06                   	(bad)  
  2e:	e9 06 01 5c 04       	jmp    45c0139 <ConsoleKeyEventHandler(Input::Key, bool)+0x45bfc89>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  33:	e9 06 eb 06 04       	jmp    406eb3e <ConsoleKeyEventHandler(Input::Key, bool)+0x406e68e>
  38:	a3 01 55 9f 04 eb 06 	movabs %eax,0x79906eb049f5501
  3f:	99 07 
{
  41:	01 5c 04 99          	add    %ebx,-0x67(%rsp,%rax,1)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  45:	07                   	(bad)  
  46:	9b                   	fwait
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  47:	07                   	(bad)  
  48:	01 55 04             	add    %edx,0x4(%rbp)
  4b:	9b                   	fwait
  4c:	07                   	(bad)  
  4d:	9c                   	pushf  
  4e:	07                   	(bad)  
  4f:	04 a3                	add    $0xa3,%al
  51:	01 55 9f             	add    %edx,-0x61(%rbp)
  54:	04 9c                	add    $0x9c,%al
  56:	07                   	(bad)  
  57:	86 08                	xchg   %cl,(%rax)
  59:	01 5c 04 86          	add    %ebx,-0x7a(%rsp,%rax,1)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5d:	08 88 08 01 55 04    	or     %cl,0x4550108(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  63:	88 08                	mov    %cl,(%rax)
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  65:	89 08                	mov    %ecx,(%rax)
  67:	04 a3                	add    $0xa3,%al
  69:	01 55 9f             	add    %edx,-0x61(%rbp)
  6c:	04 89                	add    $0x89,%al
  6e:	08 d1                	or     %dl,%cl
  70:	08 01                	or     %al,(%rcx)
  72:	5c                   	pop    %rsp
  73:	04 d1                	add    $0xd1,%al
  75:	08 f3                	or     %dh,%bl
  77:	08 04 a3             	or     %al,(%rbx,%riz,4)
  7a:	01 55 9f             	add    %edx,-0x61(%rbp)
  7d:	04 f3                	add    $0xf3,%al
  7f:	08 a7 09 01 5c 00    	or     %ah,0x5c0109(%rdi)
  85:	00 00                	add    %al,(%rax)
  87:	00 00                	add    %al,(%rax)
  89:	00 00                	add    %al,(%rax)
  8b:	00 01                	add    %al,(%rcx)
  8d:	01 00                	add    %eax,(%rax)
	...
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  9f:	04 90                	add    $0x90,%al
  a1:	06                   	(bad)  
  a2:	c1 06 01             	roll   $0x1,(%rsi)
  a5:	54                   	push   %rsp
  a6:	04 c1                	add    $0xc1,%al
  a8:	06                   	(bad)  
  a9:	cc                   	int3   
  aa:	06                   	(bad)  
  ab:	01 55 04             	add    %edx,0x4(%rbp)
  ae:	cc                   	int3   
  af:	06                   	(bad)  
  b0:	eb 06                	jmp    b8 <.debug_loclists+0xb8>
  b2:	04 a3                	add    $0xa3,%al
  b4:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  b8:	eb 06                	jmp    c0 <.debug_loclists+0xc0>
  ba:	88 07                	mov    %al,(%rdi)
  bc:	01 54 04 88          	add    %edx,-0x78(%rsp,%rax,1)
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c0:	07                   	(bad)  
  c1:	9c                   	pushf  
  c2:	07                   	(bad)  
  c3:	04 a3                	add    $0xa3,%al
  c5:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  c9:	9c                   	pushf  
  ca:	07                   	(bad)  
  cb:	f5                   	cmc    
  cc:	07                   	(bad)  
  cd:	01 54 04 f5          	add    %edx,-0xb(%rsp,%rax,1)
  d1:	07                   	(bad)  
  d2:	89 08                	mov    %ecx,(%rax)
  d4:	04 a3                	add    $0xa3,%al
  d6:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  da:	89 08                	mov    %ecx,(%rax)
  dc:	98                   	cwtl   
  dd:	08 01                	or     %al,(%rcx)
  df:	54                   	push   %rsp
  e0:	04 98                	add    $0x98,%al
  e2:	08 9e 08 04 a3 01    	or     %bl,0x1a30408(%rsi)
  e8:	54                   	push   %rsp
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  e9:	9f                   	lahf   
  ea:	04 9e                	add    $0x9e,%al
  ec:	08 ca                	or     %cl,%dl
  ee:	08 01                	or     %al,(%rcx)
  f0:	54                   	push   %rsp
  f1:	04 ca                	add    $0xca,%al
  f3:	08 80 09 04 a3 01    	or     %al,0x1a30409(%rax)
  f9:	54                   	push   %rsp
  fa:	9f                   	lahf   
  fb:	04 80                	add    $0x80,%al
  fd:	09 8b 09 01 54 04    	or     %ecx,0x4540109(%rbx)
 103:	8b 09                	mov    (%rcx),%ecx
 105:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 106:	09 04 a3             	or     %eax,(%rbx,%riz,4)
 109:	01 54 9f 00          	add    %edx,0x0(%rdi,%rbx,4)
	...
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 129:	04 90                	add    $0x90,%al
 12b:	06                   	(bad)  
 12c:	cc                   	int3   
 12d:	06                   	(bad)  
 12e:	01 51 04             	add    %edx,0x4(%rcx)
 131:	cc                   	int3   
 132:	06                   	(bad)  
 133:	eb 06                	jmp    13b <.debug_loclists+0x13b>
}
 135:	04 a3                	add    $0xa3,%al
 137:	01 51 9f             	add    %edx,-0x61(%rcx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 13a:	04 eb                	add    $0xeb,%al
 13c:	06                   	(bad)  
 13d:	83 07 01             	addl   $0x1,(%rdi)
 140:	51                   	push   %rcx
 141:	04 83                	add    $0x83,%al
}
 143:	07                   	(bad)  
 144:	9c                   	pushf  
 145:	07                   	(bad)  
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 146:	04 a3                	add    $0xa3,%al
 148:	01 51 9f             	add    %edx,-0x61(%rcx)
 14b:	04 9c                	add    $0x9c,%al
 14d:	07                   	(bad)  
 14e:	da 07                	fiaddl (%rdi)
{
 150:	01 51 04             	add    %edx,0x4(%rcx)
 153:	da 07                	fiaddl (%rdi)
 155:	ec                   	in     (%dx),%al
 156:	07                   	(bad)  
 157:	04 a3                	add    $0xa3,%al
 159:	01 51 9f             	add    %edx,-0x61(%rcx)
    m_TextPresenter->Clear();
 15c:	04 ec                	add    $0xec,%al
 15e:	07                   	(bad)  
 15f:	f5                   	cmc    
 160:	07                   	(bad)  
 161:	01 51 04             	add    %edx,0x4(%rcx)
    RenderModifiers();
 164:	f5                   	cmc    
 165:	07                   	(bad)  
 166:	89 08                	mov    %ecx,(%rax)
 168:	04 a3                	add    $0xa3,%al
 16a:	01 51 9f             	add    %edx,-0x61(%rcx)
 16d:	04 89                	add    $0x89,%al
 16f:	08 98 08 01 51 04    	or     %bl,0x4510108(%rax)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 175:	98                   	cwtl   
 176:	08 9e 08 04 a3 01    	or     %bl,0x1a30408(%rsi)
}
 17c:	51                   	push   %rcx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17d:	9f                   	lahf   
 17e:	04 9e                	add    $0x9e,%al
 180:	08 ca                	or     %cl,%dl
 182:	08 01                	or     %al,(%rcx)
 184:	51                   	push   %rcx
 185:	04 ca                	add    $0xca,%al
 187:	08 80 09 04 a3 01    	or     %al,0x1a30409(%rax)
 18d:	51                   	push   %rcx
 18e:	9f                   	lahf   
 18f:	04 80                	add    $0x80,%al
 191:	09 8b 09 01 51 04    	or     %ecx,0x4510109(%rbx)
 197:	8b 09                	mov    (%rcx),%ecx
 199:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 19a:	09 04 a3             	or     %eax,(%rbx,%riz,4)
 19d:	01 51 9f             	add    %edx,-0x61(%rcx)
  : m_TextPresenter(new Video::TextModePresenter()),
 1a0:	00 00                	add    %al,(%rax)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	00 04 cd 06 e5 06 01 	add    %al,0x106e506(,%rcx,8)
Console::Console()
 1ab:	50                   	push   %rax
 1ac:	04 f3                	add    $0xf3,%al
 1ae:	08 80 09 01 50 00    	or     %al,0x500109(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1b4:	00 00                	add    %al,(%rax)
 1b6:	00 00                	add    %al,(%rax)
Console::Console()
 1b8:	00 00                	add    %al,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1ba:	04 10                	add    $0x10,%al
 1bc:	4a 01 55 04          	rex.WX add %rdx,0x4(%rbp)
 1c0:	4a a1 02 01 53 04 a1 	rex.WX movabs 0x2c802a104530102,%rax
 1c7:	02 c8 02 
 1ca:	04 a3                	add    $0xa3,%al
 1cc:	01 55 9f             	add    %edx,-0x61(%rbp)
 1cf:	00 00                	add    %al,(%rax)
    m_Buffers(new uint8_t[23 * 80]),
 1d1:	00 04 47             	add    %al,(%rdi,%rax,2)
 1d4:	68 0a 7d 00 38       	push   $0x38007d0a
 1d9:	1a 08                	sbb    (%rax),%cl
 1db:	ff 1a                	lcall  *(%rdx)
 1dd:	30 2e                	xor    %ch,(%rsi)
 1df:	9f                   	lahf   
    m_KeyModifiers(0)
 1e0:	00 00                	add    %al,(%rax)
 1e2:	00 04 5a             	add    %al,(%rdx,%rbx,2)
 1e5:	c5 02 08             	(bad)
}
 1e8:	7f 00                	jg     1ea <.debug_loclists+0x1ea>
    Refresh();
 1ea:	08 ff                	or     %bh,%bh
    m_Buffers(new uint8_t[23 * 80]),
 1ec:	1a 30                	sbb    (%rax),%dh
 1ee:	2e 9f                	cs lahf 
 1f0:	00 00                	add    %al,(%rax)
    m_OffsetX(0),
 1f2:	00 00                	add    %al,(%rax)
 1f4:	00 04 61             	add    %al,(%rcx,%riz,2)
 1f7:	63 08                	movsxd (%rax),%ecx
}
 1f9:	70 00                	jo     1fb <.debug_loclists+0x1fb>
    Refresh();
 1fb:	08 ff                	or     %bh,%bh
 1fd:	1a 30                	sbb    (%rax),%dh
 1ff:	2e 9f                	cs lahf 
 201:	04 63                	add    $0x63,%al
 203:	c8 02 08 91          	enter  $0x802,$0x91
 207:	bf 7f 94 01 30       	mov    $0x3001947f,%edi
 20c:	2e 9f                	cs lahf 
 20e:	00 01                	add    %al,(%rcx)
    RenderModifiers();
 210:	00 04 61             	add    %al,(%rcx,%riz,2)
 213:	b9 02 08 7e 00       	mov    $0x7e0802,%ecx
 218:	08 ff                	or     %bh,%bh
{
 21a:	1a 30                	sbb    (%rax),%dh
 21c:	2e 9f                	cs lahf 
 21e:	00 00                	add    %al,(%rax)
 220:	00 00                	add    %al,(%rax)
 222:	00 00                	add    %al,(%rax)
 224:	00 04 90             	add    %al,(%rax,%rdx,4)
    RenderModifiers();
 227:	04 a7                	add    $0xa7,%al
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 229:	04 01                	add    $0x1,%al
 22b:	55                   	push   %rbp
 22c:	04 a7                	add    $0xa7,%al
}
 22e:	04 b2                	add    $0xb2,%al
 230:	04 01                	add    $0x1,%al
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 232:	53                   	push   %rbx
 233:	04 b2                	add    $0xb2,%al
 235:	04 d3                	add    $0xd3,%al
 237:	04 04                	add    $0x4,%al
 239:	a3 01 55 9f 00 00 00 	movabs %eax,0x9f5501
 240:	00 00 
 242:	00 00                	add    %al,(%rax)
 244:	04 d0                	add    $0xd0,%al
 246:	02 df                	add    %bh,%bl
 248:	02 01                	add    (%rcx),%al
 24a:	55                   	push   %rbp
 24b:	04 df                	add    $0xdf,%al
 24d:	02 fd                	add    %ch,%bh
 24f:	02 01                	add    (%rcx),%al
 251:	53                   	push   %rbx
 252:	04 fd                	add    $0xfd,%al
 254:	02 9e 03 04 a3 01    	add    0x1a30403(%rsi),%bl
 25a:	55                   	push   %rbp
 25b:	9f                   	lahf   
	...
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 264:	00 04 a0             	add    %al,(%rax,%riz,4)
 267:	03 b8 03 01 55 04    	add    0x4550103(%rax),%edi
 26d:	b8 03 fb 03 01       	mov    $0x103fb03,%eax
{
 272:	5c                   	pop    %rsp
 273:	04 fb                	add    $0xfb,%al
 275:	03 87 04 01 55 04    	add    0x4550104(%rdi),%eax
 27b:	87 04 88             	xchg   %eax,(%rax,%rcx,4)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 27e:	04 04                	add    $0x4,%al
 280:	a3 01 55 9f 00 00 00 	movabs %eax,0x9f5501
 287:	00 00 
 289:	00 00                	add    %al,(%rax)
 28b:	04 b0                	add    $0xb0,%al
 28d:	09 c3                	or     %eax,%ebx
 28f:	09 01                	or     %eax,(%rcx)
 291:	55                   	push   %rbp
 292:	04 c3                	add    $0xc3,%al
 294:	09 ce                	or     %ecx,%esi
 296:	09 01                	or     %eax,(%rcx)
 298:	54                   	push   %rsp
 299:	04 ce                	add    $0xce,%al
 29b:	09 cf                	or     %ecx,%edi
 29d:	09 04 a3             	or     %eax,(%rbx,%riz,4)
 2a0:	01 55 9f             	add    %edx,-0x61(%rbp)
    if (++m_OffsetX >= 80)
 2a3:	00 00                	add    %al,(%rax)
 2a5:	00 00                	add    %al,(%rax)
 2a7:	00 00                	add    %al,(%rax)
    m_LineLength++;
 2a9:	00 04 b0             	add    %al,(%rax,%rsi,4)
 2ac:	09 c0                	or     %eax,%eax
    if (++m_OffsetX >= 80)
 2ae:	09 01                	or     %eax,(%rcx)
 2b0:	54                   	push   %rsp
 2b1:	04 c0                	add    $0xc0,%al
 2b3:	09 ce                	or     %ecx,%esi
 2b5:	09 01                	or     %eax,(%rcx)
 2b7:	51                   	push   %rcx
 2b8:	04 ce                	add    $0xce,%al
 2ba:	09 cf                	or     %ecx,%edi
 2bc:	09 04 a3             	or     %eax,(%rbx,%riz,4)
 2bf:	01 54 9f 00          	add    %edx,0x0(%rdi,%rbx,4)
        if (m_OffsetY >= 22)
 2c3:	00 00                	add    %al,(%rax)
 2c5:	00 00                	add    %al,(%rax)
        m_OffsetX = 0;
 2c7:	04 ba                	add    $0xba,%al
 2c9:	09 cd                	or     %ecx,%ebp
 2cb:	09 02                	or     %eax,(%rdx)
        if (m_OffsetY >= 22)
 2cd:	70 00                	jo     2cf <.debug_loclists+0x2cf>
 2cf:	04 cd                	add    $0xcd,%al
        } else m_OffsetY++;
 2d1:	09 ce                	or     %ecx,%esi
 2d3:	09 01                	or     %eax,(%rcx)
 2d5:	55                   	push   %rbp
	...
            m_TextPresenter->MoveUp();
 2e6:	00 04 e0             	add    %al,(%rax,%riz,8)
 2e9:	04 8b                	add    $0x8b,%al
 2eb:	05 01 55 04 8b       	add    $0x8b045501,%eax
            RenderModifiers();
 2f0:	05 be 05 01 5c       	add    $0x5c0105be,%eax
 2f5:	04 be                	add    $0xbe,%al
            RenderModifiers();
 2f7:	05 c0 05 04 a3       	add    $0xa30405c0,%eax
 2fc:	01 55 9f             	add    %edx,-0x61(%rbp)
 2ff:	04 c0                	add    $0xc0,%al
 301:	05 dc 05 01 5c       	add    $0x5c0105dc,%eax
            RenderModifiers();
 306:	04 dc                	add    $0xdc,%al
 308:	05 de 05 04 a3       	add    $0xa30405de,%eax
 30d:	01 55 9f             	add    %edx,-0x61(%rbp)
{
 310:	04 de                	add    $0xde,%al
    switch (key)
 312:	05 f7 05 01 5c       	add    $0x5c0105f7,%eax
{
 317:	04 f7                	add    $0xf7,%al
 319:	05 83 06 01 55       	add    $0x55010683,%eax
 31e:	04 83                	add    $0x83,%al
 320:	06                   	(bad)  
 321:	84 06                	test   %al,(%rsi)
    switch (key)
 323:	04 a3                	add    $0xa3,%al
 325:	01 55 9f             	add    %edx,-0x61(%rbp)
 328:	00 00                	add    %al,(%rax)
 32a:	00 00                	add    %al,(%rax)
 32c:	00 04 e0             	add    %al,(%rax,%riz,8)
 32f:	04 88                	add    $0x88,%al
 331:	05 01 54 04 88       	add    $0x88045401,%eax
 336:	05 84 06 04 a3       	add    $0xa3040684,%eax
        char code = ApplyModifiers(key, m_KeyModifiers);
 33b:	01 54 9f 00          	add    %edx,0x0(%rdi,%rbx,4)
	...
 347:	04 c0                	add    $0xc0,%al
 349:	05 d8 05 01 5c       	add    $0x5c0105d8,%eax
        if (!code || !isPressed || m_LineLength == 255) break;
 34e:	04 de                	add    $0xde,%al
 350:	05 f7 05 01 5c       	add    $0x5c0105f7,%eax
 355:	04 f7                	add    $0xf7,%al
 357:	05 83 06 01 55       	add    $0x55010683,%eax
 35c:	04 83                	add    $0x83,%al
 35e:	06                   	(bad)  
 35f:	84 06                	test   %al,(%rsi)
 361:	04 a3                	add    $0xa3,%al
 363:	01 55 9f             	add    %edx,-0x61(%rbp)
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
}
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
	...
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  18:	cf                   	iret   
  19:	04 00                	add    $0x0,%al
	...

Disassembly of section .debug_rnglists:

0000000000000000 <.debug_rnglists>:
}
   0:	3c 00                	cmp    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	05 00 08 00 00       	add    $0x800,%eax
   9:	00 00                	add    %al,(%rax)
   b:	00 04 c0             	add    %al,(%rax,%rax,8)
   e:	05 d8 05 04 e0       	add    $0xe00405d8,%eax
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  13:	05 f3 05 04 f7       	add    $0xf70405f3,%eax
  18:	05 81 06 04 82       	add    $0x82040681,%eax
  1d:	06                   	(bad)  
  1e:	84 06                	test   %al,(%rsi)
  20:	00 04 bb             	add    %al,(%rbx,%rdi,4)
  23:	06                   	(bad)  
  24:	e5 06                	in     $0x6,%eax
{
  26:	04 f0                	add    $0xf0,%al
  28:	06                   	(bad)  
  29:	95                   	xchg   %eax,%ebp
  2a:	07                   	(bad)  
  2b:	04 9a                	add    $0x9a,%al
  2d:	07                   	(bad)  
  2e:	82                   	(bad)  
  2f:	08 04 87             	or     %al,(%rdi,%rax,4)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  32:	08 cd                	or     %cl,%ch
  34:	08 04 d1             	or     %al,(%rcx,%rdx,8)
  37:	08 d9                	or     %bl,%cl
  39:	08 04 da             	or     %al,(%rdx,%rbx,8)
{
  3c:	08                   	.byte 0x8
  3d:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
  3e:	09 00                	or     %eax,(%rax)

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
}
   0:	6e                   	outsb  %ds:(%rsi),(%dx)
   1:	03 00                	add    (%rax),%eax
   3:	00 05 00 08 00 53    	add    %al,0x53000800(%rip)        # 53000809 <ConsoleKeyEventHandler(Input::Key, bool)+0x53000359>
   9:	00 00                	add    %al,(%rax)
   b:	00 01                	add    %al,(%rcx)
   d:	01 01                	add    %eax,(%rcx)
   f:	fb                   	sti    
{
  10:	0e                   	(bad)  
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	0d 00 01 01 01       	or     $0x1010100,%eax
  16:	01 00                	add    %eax,(%rax)
  18:	00 00                	add    %al,(%rax)
  1a:	01 00                	add    %eax,(%rax)
  1c:	00 01                	add    %al,(%rcx)
  1e:	01 01                	add    %eax,(%rcx)
  20:	1f                   	(bad)  
  21:	05 00 00 00 00       	add    $0x0,%eax
	...
  36:	02 01                	add    (%rcx),%al
  38:	1f                   	(bad)  
  39:	02 0f                	add    (%rdi),%cl
{
  3b:	07                   	(bad)  
  3c:	00 00                	add    %al,(%rax)
  3e:	00 00                	add    %al,(%rax)
  40:	01 00                	add    %eax,(%rax)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  42:	00 00                	add    %al,(%rax)
  44:	00 01                	add    %al,(%rcx)
  46:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  48:	00 00                	add    %al,(%rax)
  4a:	02 00                	add    (%rax),%al
  4c:	00 00                	add    %al,(%rax)
  4e:	00 03                	add    %al,(%rbx)
  50:	00 00                	add    %al,(%rax)
  52:	00 00                	add    %al,(%rax)
  54:	03 00                	add    (%rax),%eax
  56:	00 00                	add    %al,(%rax)
  58:	00 02                	add    %al,(%rdx)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5a:	00 00                	add    %al,(%rax)
  5c:	00 00                	add    %al,(%rax)
  5e:	04 05                	add    $0x5,%al
  60:	01 00                	add    %eax,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  62:	09 02                	or     %eax,(%rdx)
	...
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  6c:	03 1d 01 06 15 06    	add    0x6150601(%rip),%ebx        # 6150673 <ConsoleKeyEventHandler(Input::Key, bool)+0x61501c3>
  72:	03 0b                	add    (%rbx),%ecx
  74:	f2 05 05 13 05 01    	repnz add $0x1051305,%eax
  7a:	06                   	(bad)  
  7b:	11 05 1a 26 05 01    	adc    %eax,0x105261a(%rip)        # 105269b <ConsoleKeyEventHandler(Input::Key, bool)+0x10521eb>
  81:	03 7a 08             	add    0x8(%rdx),%edi
  84:	3c 05                	cmp    $0x5,%al
  86:	1a b2 05 01 03 7a    	sbb    0x7a030105(%rdx),%dh
  8c:	9e                   	sahf   
  8d:	05 11 83 05 05       	add    $0x5058311,%eax
  92:	06                   	(bad)  
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  93:	59                   	pop    %rcx
  94:	06                   	(bad)  
  95:	16                   	(bad)  
  96:	3c 06                	cmp    $0x6,%al
  98:	ef                   	out    %eax,(%dx)
  99:	75 14                	jne    af <.debug_line+0xaf>
  9b:	05 1a 06 01 05       	add    $0x501061a,%eax
  a0:	05 06 3d 05 1a       	add    $0x1a053d06,%eax
  a5:	06                   	(bad)  
  a6:	01 05 05 4a 05 1a    	add    %eax,0x1a054a05(%rip)        # 1a054ab1 <ConsoleKeyEventHandler(Input::Key, bool)+0x1a054601>
  ac:	3c 05                	cmp    $0x5,%al
  ae:	05 06 02 28 13       	add    $0x13280206,%eax
  b3:	05 1a 06 01 05       	add    $0x501061a,%eax
  b8:	05 4a 05 1a 3c       	add    $0x3c1a054a,%eax
  bd:	05 05 06 02 25       	add    $0x25020605,%eax
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c2:	13 05 1a 06 01 05    	adc    0x501061a(%rip),%eax        # 50106e2 <ConsoleKeyEventHandler(Input::Key, bool)+0x5010232>
  c8:	05 3c 05 1a 3c       	add    $0x3c1a053c,%eax
  cd:	05 05 06 02 24       	add    $0x24020605,%eax
  d2:	13 05 1a 06 01 05    	adc    0x501061a(%rip),%eax        # 50106f2 <ConsoleKeyEventHandler(Input::Key, bool)+0x5010242>
  d8:	05 3c 05 1a 3c       	add    $0x3c1a053c,%eax
  dd:	05 05 06 02 27       	add    $0x27020605,%eax
  e2:	13 05 01 06 3d 05    	adc    0x53d0601(%rip),%eax        # 53d06e9 <ConsoleKeyEventHandler(Input::Key, bool)+0x53d0239>
  e8:	1a 49 05             	sbb    0x5(%rcx),%cl
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  eb:	01 3d 05 1a 1f 05    	add    %edi,0x51f1a05(%rip)        # 51f1af6 <ConsoleKeyEventHandler(Input::Key, bool)+0x51f1646>
  f1:	01 3d 05 1a 2d 05    	add    %edi,0x52d1a05(%rip)        # 52d1afc <ConsoleKeyEventHandler(Input::Key, bool)+0x52d164c>
  f7:	01 e5                	add    %esp,%ebp
  f9:	05 1a 49 05 01       	add    $0x105491a,%eax
  fe:	9f                   	lahf   
  ff:	2e 05 1a 1f 05 01    	cs add $0x1051f1a,%eax
 105:	06                   	(bad)  
 106:	03 61 9e             	add    -0x62(%rcx),%esp
 109:	05 05 13 05 01       	add    $0x1051305,%eax
 10e:	06                   	(bad)  
 10f:	11 05 05 bb 05 1b    	adc    %eax,0x1b05bb05(%rip)        # 1b05bc1a <ConsoleKeyEventHandler(Input::Key, bool)+0x1b05b76a>
 115:	3c 05                	cmp    $0x5,%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 117:	05 06 59 05 14       	add    $0x14055906,%eax
}
 11c:	06                   	(bad)  
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 11d:	01 05 05 06 e5 05    	add    %eax,0x5e50605(%rip)        # 5e50728 <ConsoleKeyEventHandler(Input::Key, bool)+0x5e50278>
 123:	1a 06                	sbb    (%rsi),%al
}
 125:	3c 05                	cmp    $0x5,%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 127:	01 3d 05 1a 49 05    	add    %edi,0x5491a05(%rip)        # 5491b32 <ConsoleKeyEventHandler(Input::Key, bool)+0x5491682>
 12d:	01 08                	add    %ecx,(%rax)
 12f:	c9                   	leave  
 130:	05 1a 1f 05 01       	add    $0x1051f1a,%eax
}
 135:	06                   	(bad)  
 136:	03 72 4a             	add    0x4a(%rdx),%esi
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 139:	05 32 06 13 05       	add    $0x5130632,%eax
 13e:	01 9d 05 32 91 58    	add    %ebx,0x58913205(%rbp)
}
 144:	05 01 11 05 32       	add    $0x32051101,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 149:	21 05 05 58 05 22    	and    %eax,0x22055805(%rip)        # 22055954 <ConsoleKeyEventHandler(Input::Key, bool)+0x220554a4>
 14f:	08 2f                	or     %ch,(%rdi)
{
 151:	05 05 e7 05 22       	add    $0x2205e705,%eax
 156:	63 05 01 34 05 0c    	movsxd 0xc053401(%rip),%eax        # c05355d <ConsoleKeyEventHandler(Input::Key, bool)+0xc0530ad>
    m_TextPresenter->Clear();
 15c:	1f                   	(bad)  
 15d:	05 05 37 59 06       	add    $0x6593705,%eax
 162:	86 05 01 06 13 05    	xchg   %al,0x5130601(%rip)        # 5130769 <ConsoleKeyEventHandler(Input::Key, bool)+0x51302b9>
    RenderModifiers();
 168:	0c 2d                	or     $0x2d,%al
 16a:	05 01 9f 05 0c       	add    $0xc059f01,%eax
 16f:	1f                   	(bad)  
 170:	2e 05 01 06 00 09    	cs add $0x9000601,%eax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 176:	02 00                	add    (%rax),%al
 178:	00 00                	add    %al,(%rax)
}
 17a:	00 00                	add    %al,(%rax)
 17c:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17e:	00 03                	add    %al,(%rbx)
 180:	10 01                	adc    %al,(%rcx)
 182:	05 05 13 05 14       	add    $0x14051305,%eax
 187:	06                   	(bad)  
 188:	01 05 01 9d 05 14    	add    %eax,0x14059d01(%rip)        # 14059e8f <ConsoleKeyEventHandler(Input::Key, bool)+0x140599df>
 18e:	bb 05 05 06 2f       	mov    $0x2f060505,%ebx
 193:	05 1a 06 3c 05       	add    $0x53c061a,%eax
 198:	01 3d 05 1a 49 05    	add    %edi,0x5491a05(%rip)        # 5491ba3 <ConsoleKeyEventHandler(Input::Key, bool)+0x54916f3>
 19e:	01 08                	add    %ecx,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1a0:	c9                   	leave  
 1a1:	05 1a 1f 05 01       	add    $0x1051f1a,%eax
 1a6:	06                   	(bad)  
 1a7:	03 d7                	add    %edi,%edx
 1a9:	00 e4                	add    %ah,%ah
Console::Console()
 1ab:	06                   	(bad)  
 1ac:	01 05 05 06 4b 05    	add    %eax,0x54b0605(%rip)        # 54b07b7 <ConsoleKeyEventHandler(Input::Key, bool)+0x54b0307>
 1b2:	1a 06                	sbb    (%rsi),%al
  : m_TextPresenter(new Video::TextModePresenter()),
 1b4:	01 05 01 b9 05 2a    	add    %eax,0x2a05b901(%rip)        # 2a05babb <ConsoleKeyEventHandler(Input::Key, bool)+0x2a05b60b>
 1ba:	bb 05 1a 66 05       	mov    $0x5661a05,%ebx
 1bf:	05 66 05 1a 3c       	add    $0x3c1a0566,%eax
 1c4:	05 05 06 08 67       	add    $0x67080605,%eax
 1c9:	05 09 06 13 05       	add    $0x5130609,%eax
 1ce:	11 65 05             	adc    %esp,0x5(%rbp)
    m_Buffers(new uint8_t[23 * 80]),
 1d1:	05 06 67 05 09       	add    $0x9056706,%eax
 1d6:	06                   	(bad)  
 1d7:	01 05 05 3c 05 15    	add    %eax,0x15053c05(%rip)        # 15053de2 <ConsoleKeyEventHandler(Input::Key, bool)+0x15053932>
 1dd:	4a 05 01 03 09 58    	rex.WX add $0x58090301,%rax
    m_KeyModifiers(0)
 1e3:	4a 05 06 06 03 73    	rex.WX add $0x73030606,%rax
    Refresh();
 1e9:	2e 05 09 18 05 0d    	cs add $0xd051809,%eax
    m_Buffers(new uint8_t[23 * 80]),
 1ef:	06                   	(bad)  
 1f0:	13 05 13 65 05 09    	adc    0x9056513(%rip),%eax        # 9056709 <ConsoleKeyEventHandler(Input::Key, bool)+0x9056259>
    m_OffsetX(0),
 1f6:	06                   	(bad)  
 1f7:	67 05 10 4e 05 19    	addr32 add $0x19054e10,%eax
    Refresh();
 1fd:	06                   	(bad)  
 1fe:	01 82 05 01 14 4a    	add    %eax,0x4a140105(%rdx)
 204:	05 0d 06 46 05       	add    $0x546060d,%eax
 209:	24 06                	and    $0x6,%al
 20b:	01 05 0d 06 f3 05    	add    %eax,0x5f3060d(%rip)        # 5f3081e <ConsoleKeyEventHandler(Input::Key, bool)+0x5f3036e>
    RenderModifiers();
 211:	1c 06                	sbb    $0x6,%al
 213:	01 05 01 3f 05 1c    	add    %eax,0x1c053f01(%rip)        # 1c05411a <ConsoleKeyEventHandler(Input::Key, bool)+0x1c053c6a>
 219:	47 05 01 a1 05 1c    	rex.RXB add $0x1c05a101,%eax
{
 21f:	1d 2e 05 01 06       	sbb    $0x601052e,%eax
 224:	00 09                	add    %cl,(%rcx)
    RenderModifiers();
 226:	02 00                	add    (%rax),%al
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 228:	00 00                	add    %al,(%rax)
 22a:	00 00                	add    %al,(%rax)
 22c:	00 00                	add    %al,(%rax)
}
 22e:	00 03                	add    %al,(%rbx)
 230:	b5 7f                	mov    $0x7f,%ch
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 232:	01 05 05 13 05 01    	add    %eax,0x1051305(%rip)        # 105153d <ConsoleKeyEventHandler(Input::Key, bool)+0x105108d>
 238:	06                   	(bad)  
 239:	11 05 05 21 05 01    	adc    %eax,0x1052105(%rip)        # 1052344 <ConsoleKeyEventHandler(Input::Key, bool)+0x1051e94>
 23f:	3b 9e 05 05 4b 06    	cmp    0x64b0505(%rsi),%ebx
 245:	03 37                	add    (%rdi),%esi
 247:	08 82 05 09 13 05    	or     %al,0x5130905(%rdx)
 24d:	23 06                	and    (%rsi),%eax
 24f:	01 66 05             	add    %esp,0x5(%rsi)
 252:	09 06                	or     %eax,(%rsi)
 254:	bb 05 21 00 02       	mov    $0x2002105,%ebx
 259:	04 01                	add    $0x1,%al
 25b:	06                   	(bad)  
 25c:	ba 00 02 04 01       	mov    $0x1040200,%edx
{
 261:	ba 05 01 17 4a       	mov    $0x4a170105,%edx
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 266:	05 05 06 03 4c       	add    $0x4c030605,%eax
 26b:	74 13                	je     280 <.debug_line+0x280>
 26d:	05 09 13 05 11       	add    $0x11051309,%eax
{
 272:	06                   	(bad)  
 273:	03 78 01             	add    0x1(%rax),%edi
 276:	05 1c 03 09 66       	add    $0x6609031c,%eax
 27b:	05 20 03 78 c8       	add    $0xc8780320,%eax
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 280:	05 09 06 5b 03       	add    $0x35b0609,%eax
 285:	1c 01                	sbb    $0x1,%al
 287:	05 18 06 01 05       	add    $0x5010618,%eax
 28c:	01 03                	add    %eax,(%rbx)
 28e:	1a c8                	sbb    %al,%cl
 290:	4a 05 18 03 66 20    	rex.WX add $0x20660318,%rax
 296:	05 05 06 03 6e       	add    $0x6e030605,%eax
 29b:	66 13 05 09 13 05 11 	adc    0x11051309(%rip),%ax        # 110515ab <ConsoleKeyEventHandler(Input::Key, bool)+0x110510fb>
    if (++m_OffsetX >= 80)
 2a2:	06                   	(bad)  
 2a3:	03 70 01             	add    0x1(%rax),%esi
 2a6:	05 1c 03 11 66       	add    $0x6611031c,%eax
    m_LineLength++;
 2ab:	05 05 06 08 25       	add    $0x25080605,%eax
    if (++m_OffsetX >= 80)
 2b0:	13 05 09 13 05 11    	adc    0x11051309(%rip),%eax        # 110515bf <ConsoleKeyEventHandler(Input::Key, bool)+0x1105110f>
 2b6:	06                   	(bad)  
 2b7:	03 68 01             	add    0x1(%rax),%ebp
 2ba:	05 1c 03 19 66       	add    $0x6619031c,%eax
 2bf:	05 05 06 03 65       	add    $0x65030605,%eax
        if (m_OffsetY >= 22)
 2c4:	08 20                	or     %ah,(%rax)
        m_OffsetX = 0;
 2c6:	05 09 13 05 0d       	add    $0xd051309,%eax
 2cb:	4b 05 11 06 01 05    	rex.WXB add $0x5010611,%rax
        } else m_OffsetY++;
 2d1:	20 67 05             	and    %ah,0x5(%rdi)
 2d4:	05 06 03 2d 08       	add    $0x82d0306,%eax
 2d9:	58                   	pop    %rax
 2da:	05 09 13 05 10       	add    $0x10051309,%eax
 2df:	06                   	(bad)  
            m_TextPresenter->MoveUp();
 2e0:	01 60 05             	add    %esp,0x5(%rax)
 2e3:	01 cb                	add    %ecx,%ebx
 2e5:	4a 05 10 1d 05 05    	rex.WX add $0x5051d10,%rax
 2eb:	06                   	(bad)  
 2ec:	03 67 90             	add    -0x70(%rdi),%esp
 2ef:	05 09 13 05 1f       	add    $0x1f051309,%eax
 2f4:	06                   	(bad)  
 2f5:	4a 58                	rex.WX pop %rax
            RenderModifiers();
 2f7:	05 05 06 77 05       	add    $0x5770605,%eax
 2fc:	09 13                	or     %edx,(%rbx)
 2fe:	84 05 0d 06 14 05    	test   %al,0x514060d(%rip)        # 5140911 <ConsoleKeyEventHandler(Input::Key, bool)+0x5140461>
 304:	09 03                	or     %eax,(%rbx)
 306:	78 66                	js     36e <.debug_line+0x36e>
 308:	05 16 50 05 09       	add    $0x9055016,%eax
 30d:	06                   	(bad)  
 30e:	67 05 13 06 01 05    	addr32 add $0x5010613,%eax
{
 314:	09 06                	or     %eax,(%rsi)
 316:	67 05 10 4e 05 19    	addr32 add $0x19054e10,%eax
 31c:	06                   	(bad)  
 31d:	01 05 09 06 83 05    	add    %eax,0x5830609(%rip)        # 583092c <ConsoleKeyEventHandler(Input::Key, bool)+0x583047c>
    switch (key)
 323:	2e 06                	cs (bad) 
 325:	01 05 01 03 0e 3c    	add    %eax,0x3c0e0301(%rip)        # 3c0e062c <ConsoleKeyEventHandler(Input::Key, bool)+0x3c0e017c>
 32b:	05 1e 03 72 4a       	add    $0x4a72031e,%eax
 330:	05 01 03 0e 82       	add    $0x820e0301,%eax
 335:	05 1e 03 72 20       	add    $0x2072031e,%eax
 33a:	05 09 06 03 0b       	add    $0xb030609,%eax
        char code = ApplyModifiers(key, m_KeyModifiers);
 33f:	08 c8                	or     %cl,%al
 341:	05 10 06 01 05       	add    $0x5010610,%eax
 346:	0d 06 03 72 82       	or     $0x82720306,%eax
 34b:	05 24 06 01 05       	add    $0x5010624,%eax
        if (!code || !isPressed || m_LineLength == 255) break;
 350:	0d 06 bb 05 1c       	or     $0x1c05bb06,%eax
 355:	06                   	(bad)  
 356:	01 05 24 e6 05 01    	add    %eax,0x105e624(%rip)        # 105e980 <ConsoleKeyEventHandler(Input::Key, bool)+0x105e4d0>
 35c:	06                   	(bad)  
 35d:	03 99 7f 08 4a 05    	add    0x54a087f(%rcx),%ebx
 363:	05 13 14 05 17       	add    $0x17051413,%eax
}
 368:	06                   	(bad)  
 369:	01 9e 66 3c 9e 2e    	add    %ebx,0x2e9e3c66(%rsi)
 36f:	00 01                	add    %al,(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 371:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
}
   0:	69 73 50 72 65 73 73 	imul   $0x73736572,0x50(%rbx),%esi
   7:	65 64 00 63 61       	gs add %ah,%fs:0x61(%rbx)
   c:	70 73                	jo     81 <.debug_str+0x81>
   e:	00 4d 69             	add    %cl,0x69(%rbp)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	6e                   	outsb  %ds:(%rsi),(%dx)
  12:	75 73                	jne    87 <.debug_str+0x87>
  14:	00 48 6f             	add    %cl,0x6f(%rax)
  17:	6d                   	insl   (%dx),%es:(%rdi)
  18:	65 00 6d 5f          	add    %ch,%gs:0x5f(%rbp)
  1c:	4f                   	rex.WRXB
  1d:	66 66 73 65          	data16 data16 jae 86 <.debug_str+0x86>
  21:	74 58                	je     7b <.debug_str+0x7b>
  23:	00 50 6f             	add    %dl,0x6f(%rax)
{
  26:	75 6e                	jne    96 <.debug_str+0x96>
  28:	64 00 41 70          	add    %al,%fs:0x70(%rcx)
  2c:	70 73                	jo     a1 <.debug_str+0xa1>
  2e:	00 44 6f 75          	add    %al,0x75(%rdi,%rbp,2)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  32:	62                   	(bad)  
  33:	6c                   	insb   (%dx),%es:(%rdi)
  34:	65 51                	gs push %rcx
  36:	75 6f                	jne    a7 <.debug_str+0xa7>
  38:	74 65                	je     9f <.debug_str+0x9f>
{
  3a:	00 41 72             	add    %al,0x72(%rcx)
  3d:	72 6f                	jb     ae <.debug_str+0xae>
  3f:	77 4c                	ja     8d <.debug_str+0x8d>
  41:	65 66 74 00          	gs data16 je 45 <.debug_str+0x45>
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  45:	44 6f                	rex.R outsl %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  47:	6c                   	insb   (%dx),%es:(%rdi)
  48:	6c                   	insb   (%dx),%es:(%rdi)
  49:	61                   	(bad)  
  4a:	72 00                	jb     4c <.debug_str+0x4c>
  4c:	4c                   	rex.WR
  4d:	43 74 72             	rex.XB je c2 <.debug_str+0xc2>
  50:	6c                   	insb   (%dx),%es:(%rdi)
  51:	00 43 75             	add    %al,0x75(%rbx)
  54:	72 73                	jb     c9 <.debug_str+0xc9>
  56:	6f                   	outsl  %ds:(%rsi),(%dx)
  57:	72 55                	jb     ae <.debug_str+0xae>
  59:	70 00                	jo     5b <.debug_str+0x5b>
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5b:	57                   	push   %rdi
  5c:	61                   	(bad)  
  5d:	76 65                	jbe    c4 <.debug_str+0xc4>
  5f:	00 4b 65             	add    %cl,0x65(%rbx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  62:	79 4d                	jns    b1 <.debug_str+0xb1>
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  64:	6f                   	outsl  %ds:(%rsi),(%dx)
  65:	64 69 66 69 65 72 73 	imul   $0x41737265,%fs:0x69(%rsi),%esp
  6c:	41 
  6d:	6c                   	insb   (%dx),%es:(%rdi)
  6e:	74 00                	je     70 <.debug_str+0x70>
  70:	4e 75 6d             	rex.WRX jne e0 <.debug_str+0xe0>
  73:	32 00                	xor    (%rax),%al
  75:	6f                   	outsl  %ds:(%rsi),(%dx)
  76:	70 65                	jo     dd <.debug_str+0xdd>
  78:	72 61                	jb     db <.debug_str+0xdb>
  7a:	74 6f                	je     eb <.debug_str+0xeb>
  7c:	72 20                	jb     9e <.debug_str+0x9e>
  7e:	6e                   	outsb  %ds:(%rsi),(%dx)
  7f:	65 77 20             	gs ja  a2 <.debug_str+0xa2>
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	00 4d 65             	add    %cl,0x65(%rbp)
  87:	64 69 61 53 65 6c 65 	imul   $0x63656c65,%fs:0x53(%rcx),%esp
  8e:	63 
  8f:	74 00                	je     91 <.debug_str+0x91>
  91:	52                   	push   %rdx
  92:	69 67 68 74 42 72 61 	imul   $0x61724274,0x68(%rdi),%esp
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  99:	63 65 00             	movsxd 0x0(%rbp),%esp
  9c:	7e 43                	jle    e1 <.debug_str+0xe1>
  9e:	6f                   	outsl  %ds:(%rsi),(%dx)
  9f:	6e                   	outsb  %ds:(%rsi),(%dx)
  a0:	73 6f                	jae    111 <.debug_str+0x111>
  a2:	6c                   	insb   (%dx),%es:(%rdi)
  a3:	65 00 5f 5a          	add    %bl,%gs:0x5a(%rdi)
  a7:	4e 37                	rex.WRX (bad) 
  a9:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  ab:	6e                   	outsb  %ds:(%rsi),(%dx)
  ac:	73 6f                	jae    11d <.debug_str+0x11d>
  ae:	6c                   	insb   (%dx),%es:(%rdi)
  af:	65 36 52             	gs ss push %rdx
  b2:	65 6e                	outsb  %gs:(%rsi),(%dx)
  b4:	64 65 72 45          	fs gs jb fd <.debug_str+0xfd>
  b8:	76 00                	jbe    ba <.debug_str+0xba>
  ba:	5f                   	pop    %rdi
  bb:	5f                   	pop    %rdi
  bc:	69 6e 5f 63 68 72 67 	imul   $0x67726863,0x5f(%rsi),%ebp
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c3:	00 52 41             	add    %dl,0x41(%rdx)
  c6:	6c                   	insb   (%dx),%es:(%rdi)
  c7:	74 00                	je     c9 <.debug_str+0xc9>
  c9:	42 61                	rex.X (bad) 
  cb:	63 6b 74             	movsxd 0x74(%rbx),%ebp
  ce:	69 63 6b 00 6c 6f 6e 	imul   $0x6e6f6c00,0x6b(%rbx),%esp
  d5:	67 20 6c 6f 6e       	and    %ch,0x6e(%edi,%ebp,2)
  da:	67 20 69 6e          	and    %ch,0x6e(%ecx)
  de:	74 00                	je     e0 <.debug_str+0xe0>
  e0:	73 69                	jae    14b <.debug_str+0x14b>
  e2:	67 6e                	outsb  %ds:(%esi),(%dx)
  e4:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  e9:	61                   	(bad)  
  ea:	72 00                	jb     ec <.debug_str+0xec>
  ec:	5f                   	pop    %rdi
  ed:	5a                   	pop    %rdx
  ee:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
  f4:	6f                   	outsl  %ds:(%rsi),(%dx)
  f5:	31 37                	xor    %esi,(%rdi)
  f7:	54                   	push   %rsp
  f8:	65 78 74             	gs js  16f <.debug_str+0x16f>
  fb:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
  fd:	64 65 50             	fs gs push %rax
 100:	72 65                	jb     167 <.debug_str+0x167>
 102:	73 65                	jae    169 <.debug_str+0x169>
 104:	6e                   	outsb  %ds:(%rsi),(%dx)
 105:	74 65                	je     16c <.debug_str+0x16c>
 107:	72 34                	jb     13d <.debug_str+0x13d>
 109:	54                   	push   %rsp
 10a:	65 78 74             	gs js  181 <.debug_str+0x181>
 10d:	45                   	rex.RB
 10e:	4e 53                	rex.WRX push %rbx
 110:	5f                   	pop    %rdi
 111:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 116:	74 45                	je     15d <.debug_str+0x15d>
 118:	63 68 68             	movsxd 0x68(%rax),%ebp
}
 11b:	00 50 65             	add    %dl,0x65(%rax)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 11e:	72 69                	jb     189 <.debug_str+0x189>
}
 120:	6f                   	outsl  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 121:	64 00 4b 65          	add    %cl,%fs:0x65(%rbx)
}
 125:	79 4d                	jns    174 <.debug_str+0x174>
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 127:	6f                   	outsl  %ds:(%rsi),(%dx)
 128:	64 69 66 69 65 72 73 	imul   $0x53737265,%fs:0x69(%rsi),%esp
 12f:	53 
 130:	68 69 66 74 00       	push   $0x746669
}
 135:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 137:	6d                   	insl   (%dx),%es:(%rdi)
 138:	6d                   	insl   (%dx),%es:(%rdi)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 139:	61                   	(bad)  
 13a:	00 4e 75             	add    %cl,0x75(%rsi)
 13d:	6d                   	insl   (%dx),%es:(%rdi)
 13e:	30 00                	xor    %al,(%rax)
 140:	4e 75 6d             	rex.WRX jne 1b0 <.debug_str+0x1b0>
}
 143:	31 00                	xor    %eax,(%rax)
 145:	50                   	push   %rax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 146:	61                   	(bad)  
 147:	67 65 55             	addr32 gs push %rbp
 14a:	70 00                	jo     14c <.debug_str+0x14c>
 14c:	4e 75 6d             	rex.WRX jne 1bc <.debug_str+0x1bc>
 14f:	33 00                	xor    (%rax),%eax
{
 151:	4e 75 6d             	rex.WRX jne 1c1 <.debug_str+0x1c1>
 154:	34 00                	xor    $0x0,%al
 156:	4e 75 6d             	rex.WRX jne 1c6 <.debug_str+0x1c6>
 159:	35 00 4e 75 6d       	xor    $0x6d754e00,%eax
    m_TextPresenter->Clear();
 15e:	36 00 4e 75          	ss add %cl,0x75(%rsi)
 162:	6d                   	insl   (%dx),%es:(%rdi)
 163:	37                   	(bad)  
    RenderModifiers();
 164:	00 4e 75             	add    %cl,0x75(%rsi)
 167:	6d                   	insl   (%dx),%es:(%rdi)
 168:	38 00                	cmp    %al,(%rax)
 16a:	4e 75 6d             	rex.WRX jne 1da <.debug_str+0x1da>
 16d:	39 00                	cmp    %eax,(%rax)
 16f:	47 72 65             	rex.RXB jb 1d7 <.debug_str+0x1d7>
 172:	61                   	(bad)  
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 173:	74 65                	je     1da <.debug_str+0x1da>
 175:	72 54                	jb     1cb <.debug_str+0x1cb>
 177:	68 61 6e 00 6c       	push   $0x6c006e61
}
 17c:	6f                   	outsl  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 17d:	6e                   	outsb  %ds:(%rsi),(%dx)
 17e:	67 20 69 6e          	and    %ch,0x6e(%ecx)
 182:	74 00                	je     184 <.debug_str+0x184>
 184:	45 71 75             	rex.RB jno 1fc <.debug_str+0x1fc>
 187:	61                   	(bad)  
 188:	6c                   	insb   (%dx),%es:(%rdi)
 189:	73 00                	jae    18b <.debug_str+0x18b>
 18b:	57                   	push   %rdi
 18c:	65 62 46             	gs (bad) 
 18f:	61                   	(bad)  
 190:	76 6f                	jbe    201 <.debug_str+0x201>
 192:	72 69                	jb     1fd <.debug_str+0x1fd>
 194:	74 65                	je     1fb <.debug_str+0x1fb>
 196:	73 00                	jae    198 <.debug_str+0x198>
 198:	6f                   	outsl  %ds:(%rsi),(%dx)
 199:	70 65                	jo     200 <.debug_str+0x200>
}
 19b:	72 61                	jb     1fe <.debug_str+0x1fe>
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 19d:	74 6f                	je     20e <.debug_str+0x20e>
 19f:	72 20                	jb     1c1 <.debug_str+0x1c1>
  : m_TextPresenter(new Video::TextModePresenter()),
 1a1:	6e                   	outsb  %ds:(%rsi),(%dx)
 1a2:	65 77 00             	gs ja  1a5 <.debug_str+0x1a5>
 1a5:	52                   	push   %rdx
 1a6:	65 66 72 65          	gs data16 jb 20f <.debug_str+0x20f>
Console::Console()
 1aa:	73 68                	jae    214 <.debug_str+0x214>
 1ac:	00 5f 5a             	add    %bl,0x5a(%rdi)
 1af:	4e 37                	rex.WRX (bad) 
 1b1:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  : m_TextPresenter(new Video::TextModePresenter()),
 1b3:	6e                   	outsb  %ds:(%rsi),(%dx)
 1b4:	73 6f                	jae    225 <.debug_str+0x225>
 1b6:	6c                   	insb   (%dx),%es:(%rdi)
 1b7:	65 39 41 63          	cmp    %eax,%gs:0x63(%rcx)
 1bb:	63 65 70             	movsxd 0x70(%rbp),%esp
 1be:	74 4b                	je     20b <.debug_str+0x20b>
 1c0:	65 79 45             	gs jns 208 <.debug_str+0x208>
 1c3:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
 1c9:	74 33                	je     1fe <.debug_str+0x1fe>
 1cb:	4b                   	rex.WXB
 1cc:	65 79 45             	gs jns 214 <.debug_str+0x214>
 1cf:	62                   	(bad)  
 1d0:	00 50 6f             	add    %dl,0x6f(%rax)
    m_Buffers(new uint8_t[23 * 80]),
 1d3:	69 6e 74 00 56 6f 6c 	imul   $0x6c6f5600,0x74(%rsi),%ebp
 1da:	75 6d                	jne    249 <.debug_str+0x249>
 1dc:	65 44 6f             	rex.R outsl %gs:(%rsi),(%dx)
 1df:	77 6e                	ja     24f <.debug_str+0x24f>
    m_KeyModifiers(0)
 1e1:	00 43 75             	add    %al,0x75(%rbx)
 1e4:	72 73                	jb     259 <.debug_str+0x259>
    m_Buffers(new uint8_t[23 * 80]),
 1e6:	6f                   	outsl  %ds:(%rsi),(%dx)
 1e7:	72 4c                	jb     235 <.debug_str+0x235>
    Refresh();
 1e9:	65 66 74 00          	gs data16 je 1ed <.debug_str+0x1ed>
    m_Buffers(new uint8_t[23 * 80]),
 1ed:	5f                   	pop    %rdi
 1ee:	5a                   	pop    %rdx
 1ef:	6e                   	outsb  %ds:(%rsi),(%dx)
 1f0:	77 6d                	ja     25f <.debug_str+0x25f>
    m_OffsetX(0),
 1f2:	00 57 65             	add    %dl,0x65(%rdi)
 1f5:	62 42                	(bad)  
 1f7:	61                   	(bad)  
 1f8:	63 6b 77             	movsxd 0x77(%rbx),%ebp
    Refresh();
 1fb:	61                   	(bad)  
 1fc:	72 64                	jb     262 <.debug_str+0x262>
 1fe:	00 45 6e             	add    %al,0x6e(%rbp)
 201:	74 65                	je     268 <.debug_str+0x268>
 203:	72 00                	jb     205 <.debug_str+0x205>
}
 205:	74 68                	je     26f <.debug_str+0x26f>
    Refresh();
 207:	69 73 00 73 68 69 66 	imul   $0x66696873,0x0(%rbx),%esi
 20e:	74 00                	je     210 <.debug_str+0x210>
    RenderModifiers();
 210:	52                   	push   %rdx
 211:	65 6e                	outsb  %gs:(%rsi),(%dx)
 213:	64 65 72 4d          	fs gs jb 264 <.debug_str+0x264>
 217:	6f                   	outsl  %ds:(%rsi),(%dx)
 218:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 21f:	00 
{
 220:	55                   	push   %rbp
 221:	6e                   	outsb  %ds:(%rsi),(%dx)
 222:	64 65 72 6c          	fs gs jb 292 <.debug_str+0x292>
    RenderModifiers();
 226:	69 6e 65 00 41 70 70 	imul   $0x70704100,0x65(%rsi),%ebp
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 22d:	6c                   	insb   (%dx),%es:(%rdi)
}
 22e:	79 4d                	jns    27d <.debug_str+0x27d>
 230:	6f                   	outsl  %ds:(%rsi),(%dx)
 231:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 238:	00 
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 239:	43 61                	rex.XB (bad) 
 23b:	70 73                	jo     2b0 <.debug_str+0x2b0>
 23d:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 23f:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 242:	53                   	push   %rbx
 243:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 246:	6c                   	insb   (%dx),%es:(%rdi)
 247:	6c                   	insb   (%dx),%es:(%rdi)
 248:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 24a:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 24d:	6d                   	insl   (%dx),%es:(%rdi)
 24e:	5f                   	pop    %rdi
 24f:	4b                   	rex.WXB
}
 250:	65 79 4d             	gs jns 2a0 <.debug_str+0x2a0>
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 253:	6f                   	outsl  %ds:(%rsi),(%dx)
 254:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 25b:	00 
 25c:	4e 75 6d             	rex.WRX jne 2cc <.debug_str+0x2cc>
 25f:	70 61                	jo     2c2 <.debug_str+0x2c2>
{
 261:	64 4d 75 6c          	fs rex.WRB jne 2d1 <.debug_str+0x2d1>
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 265:	74 69                	je     2d0 <.debug_str+0x2d0>
 267:	70 6c                	jo     2d5 <.debug_str+0x2d5>
 269:	79 00                	jns    26b <.debug_str+0x26b>
 26b:	63 74 72 6c          	movsxd 0x6c(%rdx,%rsi,2),%esi
 26f:	00 57 61             	add    %dl,0x61(%rdi)
{
 272:	6b 65 00 45          	imul   $0x45,0x0(%rbp),%esp
 276:	6d                   	insl   (%dx),%es:(%rdi)
 277:	61                   	(bad)  
 278:	69 6c 00 4d 75 74 65 	imul   $0x657475,0x4d(%rax,%rax,1),%ebp
 27f:	00 
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 280:	4b                   	rex.WXB
 281:	65 79 4d             	gs jns 2d1 <.debug_str+0x2d1>
 284:	6f                   	outsl  %ds:(%rsi),(%dx)
 285:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 28c:	43 
 28d:	74 72                	je     301 <.debug_str+0x301>
 28f:	6c                   	insb   (%dx),%es:(%rdi)
 290:	00 5f 5a             	add    %bl,0x5a(%rdi)
 293:	4e 37                	rex.WRX (bad) 
 295:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 297:	6e                   	outsb  %ds:(%rsi),(%dx)
 298:	73 6f                	jae    309 <.debug_str+0x309>
 29a:	6c                   	insb   (%dx),%es:(%rdi)
 29b:	65 44 34 45          	gs rex.R xor $0x45,%al
 29f:	76 00                	jbe    2a1 <.debug_str+0x2a1>
 2a1:	42 61                	rex.X (bad) 
    if (++m_OffsetX >= 80)
 2a3:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 2a6:	6c                   	insb   (%dx),%es:(%rdi)
 2a7:	61                   	(bad)  
    m_LineLength++;
 2a8:	73 68                	jae    312 <.debug_str+0x312>
 2aa:	00 52 69             	add    %dl,0x69(%rdx)
 2ad:	67 68 74 42 72 61    	addr32 push $0x61724274
    if (++m_OffsetX >= 80)
 2b3:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 2b6:	74 00                	je     2b8 <.debug_str+0x2b8>
 2b8:	75 6e                	jne    328 <.debug_str+0x328>
 2ba:	73 69                	jae    325 <.debug_str+0x325>
 2bc:	67 6e                	outsb  %ds:(%esi),(%dx)
 2be:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
        if (m_OffsetY >= 22)
 2c3:	74 00                	je     2c5 <.debug_str+0x2c5>
 2c5:	52                   	push   %rdx
        m_OffsetX = 0;
 2c6:	53                   	push   %rbx
 2c7:	68 69 66 74 00       	push   $0x746669
        if (m_OffsetY >= 22)
 2cc:	5f                   	pop    %rdi
 2cd:	5a                   	pop    %rdx
 2ce:	6e                   	outsb  %ds:(%rsi),(%dx)
 2cf:	61                   	(bad)  
        } else m_OffsetY++;
 2d0:	6d                   	insl   (%dx),%es:(%rdi)
 2d1:	00 5f 5a             	add    %bl,0x5a(%rdi)
 2d4:	4e 37                	rex.WRX (bad) 
 2d6:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 2d8:	6e                   	outsb  %ds:(%rsi),(%dx)
 2d9:	73 6f                	jae    34a <.debug_str+0x34a>
 2db:	6c                   	insb   (%dx),%es:(%rdi)
 2dc:	65 37                	gs (bad) 
 2de:	52                   	push   %rdx
 2df:	65 66 72 65          	gs data16 jb 348 <.debug_str+0x348>
            m_TextPresenter->MoveUp();
 2e3:	73 68                	jae    34d <.debug_str+0x34d>
 2e5:	45 76 00             	rex.RB jbe 2e8 <.debug_str+0x2e8>
 2e8:	6c                   	insb   (%dx),%es:(%rdi)
 2e9:	6f                   	outsl  %ds:(%rsi),(%dx)
 2ea:	6e                   	outsb  %ds:(%rsi),(%dx)
 2eb:	67 20 75 6e          	and    %dh,0x6e(%ebp)
 2ef:	73 69                	jae    35a <.debug_str+0x35a>
            RenderModifiers();
 2f1:	67 6e                	outsb  %ds:(%esi),(%dx)
 2f3:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
            RenderModifiers();
 2f8:	74 00                	je     2fa <.debug_str+0x2fa>
 2fa:	41 63 63 65          	movsxd 0x65(%r11),%esp
 2fe:	70 74                	jo     374 <.debug_str+0x374>
 300:	4b                   	rex.WXB
 301:	65 79 00             	gs jns 304 <.debug_str+0x304>
            RenderModifiers();
 304:	50                   	push   %rax
 305:	61                   	(bad)  
 306:	67 65 44 6f          	rex.R outsl %gs:(%esi),(%dx)
 30a:	77 6e                	ja     37a <.debug_str+0x37a>
 30c:	00 41 72             	add    %al,0x72(%rcx)
 30f:	72 6f                	jb     380 <.debug_str+0x380>
    switch (key)
 311:	77 44                	ja     357 <.debug_str+0x357>
 313:	6f                   	outsl  %ds:(%rsi),(%dx)
{
 314:	77 6e                	ja     384 <.debug_str+0x384>
 316:	00 56 69             	add    %dl,0x69(%rsi)
 319:	64 65 6f             	fs outsl %gs:(%rsi),(%dx)
 31c:	00 4d 6f             	add    %cl,0x6f(%rbp)
 31f:	76 65                	jbe    386 <.debug_str+0x386>
 321:	55                   	push   %rbp
    switch (key)
 322:	70 00                	jo     324 <.debug_str+0x324>
 324:	73 68                	jae    38e <.debug_str+0x38e>
 326:	6f                   	outsl  %ds:(%rsi),(%dx)
 327:	72 74                	jb     39d <.debug_str+0x39d>
 329:	20 75 6e             	and    %dh,0x6e(%rbp)
 32c:	73 69                	jae    397 <.debug_str+0x397>
 32e:	67 6e                	outsb  %ds:(%esi),(%dx)
 330:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 335:	74 00                	je     337 <.debug_str+0x337>
 337:	4e 75 6d             	rex.WRX jne 3a7 <.debug_str+0x3a7>
 33a:	70 61                	jo     39d <.debug_str+0x39d>
        char code = ApplyModifiers(key, m_KeyModifiers);
 33c:	64 41                	fs rex.B
 33e:	64 64 00 49 6e       	fs add %cl,%fs:0x6e(%rcx)
 343:	73 65                	jae    3aa <.debug_str+0x3aa>
 345:	72 74                	jb     3bb <.debug_str+0x3bb>
 347:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
 34b:	74 4d                	je     39a <.debug_str+0x39a>
        if (!code || !isPressed || m_LineLength == 255) break;
 34d:	6f                   	outsl  %ds:(%rsi),(%dx)
 34e:	64 65 50             	fs gs push %rax
 351:	72 65                	jb     3b8 <.debug_str+0x3b8>
 353:	73 65                	jae    3ba <.debug_str+0x3ba>
 355:	6e                   	outsb  %ds:(%rsi),(%dx)
 356:	74 65                	je     3bd <.debug_str+0x3bd>
 358:	72 00                	jb     35a <.debug_str+0x35a>
 35a:	4e 75 6d             	rex.WRX jne 3ca <.debug_str+0x3ca>
 35d:	70 61                	jo     3c0 <.debug_str+0x3c0>
 35f:	64 4d 69 6e 75 73 00 	imul   $0x65570073,%fs:0x75(%r14),%r13
 366:	57 65 
}
 368:	62 53 74 6f 70       	(bad)
 36d:	00 50 72             	add    %dl,0x72(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 370:	65 76 69             	gs jbe 3dc <.debug_str+0x3dc>
 373:	6f                   	outsl  %ds:(%rsi),(%dx)
 374:	75 73                	jne    3e9 <.debug_str+0x3e9>
            m_KeyModifiers |= KeyModifiersShift;
 376:	54                   	push   %rsp
 377:	72 61                	jb     3da <.debug_str+0x3da>
 379:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 37c:	5f                   	pop    %rdi
 37d:	5a                   	pop    %rdx
 37e:	4e 37                	rex.WRX (bad) 
 380:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 382:	6e                   	outsb  %ds:(%rsi),(%dx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 383:	73 6f                	jae    3f4 <.debug_str+0x3f4>
 385:	6c                   	insb   (%dx),%es:(%rdi)
 386:	65 43 34 45          	gs rex.XB xor $0x45,%al
        RenderModifiers();
 38a:	76 00                	jbe    38c <.debug_str+0x38c>
 38c:	4e                   	rex.WRX
 38d:	65 78 74             	gs js  404 <.debug_str+0x404>
 390:	54                   	push   %rsp
 391:	72 61                	jb     3f4 <.debug_str+0x3f4>
 393:	63 6b 00             	movsxd 0x0(%rbx),%ebp
}
 396:	62                   	(bad)  
 397:	6f                   	outsl  %ds:(%rsi),(%dx)
 398:	6f                   	outsl  %ds:(%rsi),(%dx)
 399:	6c                   	insb   (%dx),%es:(%rdi)
        RenderModifiers();
 39a:	00 4e 75             	add    %cl,0x75(%rsi)
 39d:	6d                   	insl   (%dx),%es:(%rdi)
 39e:	70 61                	jo     401 <.debug_str+0x401>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3a0:	64 45 6e             	rex.RB outsb %fs:(%rsi),(%dx)
 3a3:	74 65                	je     40a <.debug_str+0x40a>
 3a5:	72 00                	jb     3a7 <.debug_str+0x3a7>
            m_KeyModifiers |= KeyModifiersCtrl;
 3a7:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 3a9:	6e                   	outsb  %ds:(%rsi),(%dx)
 3aa:	73 6f                	jae    41b <.debug_str+0x41b>
 3ac:	6c                   	insb   (%dx),%es:(%rdi)
 3ad:	65 00 56 6f          	add    %dl,%gs:0x6f(%rsi)
 3b1:	6c                   	insb   (%dx),%es:(%rdi)
 3b2:	75 6d                	jne    421 <.debug_str+0x421>
 3b4:	65 55                	gs push %rbp
 3b6:	70 00                	jo     3b8 <.debug_str+0x3b8>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3b8:	64 65 63 6c 74 79    	fs movsxd %gs:0x79(%rsp,%rsi,2),%ebp
            m_KeyModifiers |= KeyModifiersAlt;
 3be:	70 65                	jo     425 <.debug_str+0x425>
 3c0:	28 6e 75             	sub    %ch,0x75(%rsi)
 3c3:	6c                   	insb   (%dx),%es:(%rdi)
 3c4:	6c                   	insb   (%dx),%es:(%rdi)
 3c5:	70 74                	jo     43b <.debug_str+0x43b>
 3c7:	72 29                	jb     3f2 <.debug_str+0x3f2>
 3c9:	00 4d 65             	add    %cl,0x65(%rbp)
 3cc:	64 69 61 50 6c 61 79 	imul   $0x79616c,%fs:0x50(%rcx),%esp
 3d3:	00 
            if (m_KeyModifiers & KeyModifiersCapsLock)
 3d4:	6d                   	insl   (%dx),%es:(%rdi)
 3d5:	5f                   	pop    %rdi
 3d6:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 3d8:	69 74 00 4e 6f 6e 65 	imul   $0x656e6f,0x4e(%rax,%rax,1),%esi
 3df:	00 
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 3e0:	67 5f                	addr32 pop %rdi
 3e2:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 3e4:	6e                   	outsb  %ds:(%rsi),(%dx)
 3e5:	73 6f                	jae    456 <.debug_str+0x456>
 3e7:	6c                   	insb   (%dx),%es:(%rdi)
 3e8:	65 00 57 65          	add    %dl,%gs:0x65(%rdi)
 3ec:	62 53 65 61 72       	(bad)
        AddChar(' '); break;
 3f1:	63 68 00             	movsxd 0x0(%rax),%ebp
 3f4:	50                   	push   %rax
        AddChar(code);
 3f5:	6f                   	outsl  %ds:(%rsi),(%dx)
 3f6:	77 65                	ja     45d <.debug_str+0x45d>
 3f8:	72 00                	jb     3fa <.debug_str+0x3fa>
 3fa:	4d                   	rex.WRB
 3fb:	65 64 69 61 53 74 6f 	gs imul $0x706f74,%fs:0x53(%rcx),%esp
 402:	70 00 
}
 404:	6c                   	insb   (%dx),%es:(%rdi)
 405:	6f                   	outsl  %ds:(%rsi),(%dx)
 406:	6e                   	outsb  %ds:(%rsi),(%dx)
        AddChar(code);
 407:	67 20 64 6f 75       	and    %ah,0x75(%edi,%ebp,2)
 40c:	62                   	(bad)  
 40d:	6c                   	insb   (%dx),%es:(%rdi)
 40e:	65 00 63 6f          	add    %ah,%gs:0x6f(%rbx)
        m_TextPresenter->Clear();
 412:	6e                   	outsb  %ds:(%rsi),(%dx)
 413:	73 6f                	jae    484 <.debug_str+0x484>
 415:	6c                   	insb   (%dx),%es:(%rdi)
 416:	65 00 53 6c          	add    %dl,%gs:0x6c(%rbx)
 41a:	61                   	(bad)  
 41b:	73 68                	jae    485 <.debug_str+0x485>
 41d:	00 44 65 6c          	add    %al,0x6c(%rbp,%riz,2)
        if (!isPressed) break;
 421:	65 74 65             	gs je  489 <.debug_str+0x489>
 424:	00 43 75             	add    %al,0x75(%rbx)
 427:	72 73                	jb     49c <.debug_str+0x49c>
        if (m_OffsetY >= 22)
 429:	6f                   	outsl  %ds:(%rsi),(%dx)
 42a:	72 52                	jb     47e <.debug_str+0x47e>
 42c:	69 67 68 74 00 43 75 	imul   $0x75430074,0x68(%rdi),%esp
        m_LineLength = 0;
 433:	72 73                	jb     4a8 <.debug_str+0x4a8>
 435:	6f                   	outsl  %ds:(%rsi),(%dx)
 436:	72 44                	jb     47c <.debug_str+0x47c>
        m_OffsetX = 1;
 438:	6f                   	outsl  %ds:(%rsi),(%dx)
 439:	77 6e                	ja     4a9 <.debug_str+0x4a9>
 43b:	00 4c 65 66          	add    %cl,0x66(%rbp,%riz,2)
        if (m_OffsetY >= 22)
 43f:	74 4d                	je     48e <.debug_str+0x48e>
 441:	65 6e                	outsb  %gs:(%rsi),(%dx)
        } else m_OffsetY++;
 443:	75 00                	jne    445 <.debug_str+0x445>
 445:	4c                   	rex.WR
 446:	65 66 74 42          	gs data16 je 48c <.debug_str+0x48c>
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 44a:	72 61                	jb     4ad <.debug_str+0x4ad>
 44c:	63 65 00             	movsxd 0x0(%rbp),%esp
}
 44f:	41 72 72             	rex.B jb 4c4 <.debug_str+0x4c4>
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 452:	6f                   	outsl  %ds:(%rsi),(%dx)
 453:	77 55                	ja     4aa <.debug_str+0x4aa>
 455:	70 00                	jo     457 <.debug_str+0x457>
 457:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
}
 459:	70 75                	jo     4d0 <.debug_str+0x4d0>
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45b:	74 00                	je     45d <.debug_str+0x45d>
 45d:	75 6e                	jne    4cd <.debug_str+0x4cd>
 45f:	73 69                	jae    4ca <.debug_str+0x4ca>
 461:	67 6e                	outsb  %ds:(%esi),(%dx)
 463:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
 468:	61                   	(bad)  
 469:	72 00                	jb     46b <.debug_str+0x46b>
 46b:	53                   	push   %rbx
 46c:	65 6d                	gs insl (%dx),%es:(%rdi)
 46e:	69 63 6f 6c 6f 6e 00 	imul   $0x6e6f6c,0x6f(%rbx),%esp
 475:	52                   	push   %rdx
 476:	69 67 68 74 4d 65 6e 	imul   $0x6e654d74,0x68(%rdi),%esp
        AddChar(code);
 47d:	75 00                	jne    47f <.debug_str+0x47f>
 47f:	73 68                	jae    4e9 <.debug_str+0x4e9>
            m_TextPresenter->MoveUp();
 481:	6f                   	outsl  %ds:(%rsi),(%dx)
 482:	72 74                	jb     4f8 <.debug_str+0x4f8>
 484:	20 69 6e             	and    %ch,0x6e(%rcx)
 487:	74 00                	je     489 <.debug_str+0x489>
 489:	5f                   	pop    %rdi
 48a:	5a                   	pop    %rdx
 48b:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
            RenderModifiers();
 491:	6f                   	outsl  %ds:(%rsi),(%dx)
 492:	31 37                	xor    %esi,(%rdi)
 494:	54                   	push   %rsp
 495:	65 78 74             	gs js  50c <.debug_str+0x50c>
 498:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 49a:	64 65 50             	fs gs push %rax
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 49d:	72 65                	jb     504 <.debug_str+0x504>
 49f:	73 65                	jae    506 <.debug_str+0x506>
 4a1:	6e                   	outsb  %ds:(%rsi),(%dx)
 4a2:	74 65                	je     509 <.debug_str+0x509>
 4a4:	72 34                	jb     4da <.debug_str+0x4da>
 4a6:	54                   	push   %rsp
 4a7:	65 78 74             	gs js  51e <.debug_str+0x51e>
 4aa:	45                   	rex.RB
 4ab:	4e 53                	rex.WRX push %rbx
 4ad:	5f                   	pop    %rdi
 4ae:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
    console->AcceptKey(key, isPressed);
 4b3:	74 45                	je     4fa <.debug_str+0x4fa>
 4b5:	50                   	push   %rax
 4b6:	4b 63 68 68          	rex.WXB movslq 0x68(%r8),%rbp
 4ba:	00 5f 5a             	add    %bl,0x5a(%rdi)
 4bd:	4e 37                	rex.WRX (bad) 
 4bf:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 4c1:	6e                   	outsb  %ds:(%rsi),(%dx)
 4c2:	73 6f                	jae    533 <.debug_str+0x533>
 4c4:	6c                   	insb   (%dx),%es:(%rdi)
 4c5:	65 44 32 45 76       	xor    %gs:0x76(%rbp),%r8b
 4ca:	00 6d 5f             	add    %ch,0x5f(%rbp)
 4cd:	4c 69 6e 65 4c 65 6e 	imul   $0x676e654c,0x65(%rsi),%r13
 4d4:	67 
 4d5:	74 68                	je     53f <.debug_str+0x53f>
 4d7:	00 41 64             	add    %al,0x64(%rcx)
 4da:	64 43 68 61 72 00 43 	fs rex.XB push $0x43007261
 4e1:	6f                   	outsl  %ds:(%rsi),(%dx)
 4e2:	6c                   	insb   (%dx),%es:(%rdi)
 4e3:	6f                   	outsl  %ds:(%rsi),(%dx)
 4e4:	6e                   	outsb  %ds:(%rsi),(%dx)
 4e5:	00 4c 65 73          	add    %cl,0x73(%rbp,%riz,2)
 4e9:	73 54                	jae    53f <.debug_str+0x53f>
 4eb:	68 61 6e 00 5f       	push   $0x5f006e61
 4f0:	5a                   	pop    %rdx
 4f1:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 4f7:	6f                   	outsl  %ds:(%rsi),(%dx)
 4f8:	31 37                	xor    %esi,(%rdi)
 4fa:	54                   	push   %rsp
 4fb:	65 78 74             	gs js  572 <.debug_str+0x572>
 4fe:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 500:	64 65 50             	fs gs push %rax
 503:	72 65                	jb     56a <.debug_str+0x56a>
 505:	73 65                	jae    56c <.debug_str+0x56c>
 507:	6e                   	outsb  %ds:(%rsi),(%dx)
 508:	74 65                	je     56f <.debug_str+0x56f>
 50a:	72 43                	jb     54f <.debug_str+0x54f>
 50c:	34 45                	xor    $0x45,%al
 50e:	76 00                	jbe    510 <.debug_str+0x510>
 510:	5f                   	pop    %rdi
 511:	5a                   	pop    %rdx
 512:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 518:	6f                   	outsl  %ds:(%rsi),(%dx)
 519:	31 37                	xor    %esi,(%rdi)
 51b:	54                   	push   %rsp
 51c:	65 78 74             	gs js  593 <.debug_str+0x593>
 51f:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 521:	64 65 50             	fs gs push %rax
 524:	72 65                	jb     58b <.debug_str+0x58b>
 526:	73 65                	jae    58d <.debug_str+0x58d>
 528:	6e                   	outsb  %ds:(%rsi),(%dx)
 529:	74 65                	je     590 <.debug_str+0x590>
 52b:	72 43                	jb     570 <.debug_str+0x570>
 52d:	31 45 76             	xor    %eax,0x76(%rbp)
 530:	00 43 6f             	add    %al,0x6f(%rbx)
 533:	6e                   	outsb  %ds:(%rsi),(%dx)
 534:	73 6f                	jae    5a5 <.debug_str+0x5a5>
 536:	6c                   	insb   (%dx),%es:(%rdi)
 537:	65 4b                	gs rex.WXB
 539:	65 79 45             	gs jns 581 <.debug_str+0x581>
 53c:	76 65                	jbe    5a3 <.debug_str+0x5a3>
 53e:	6e                   	outsb  %ds:(%rsi),(%dx)
 53f:	74 48                	je     589 <.debug_str+0x589>
 541:	61                   	(bad)  
 542:	6e                   	outsb  %ds:(%rsi),(%dx)
 543:	64 6c                	fs insb (%dx),%es:(%rdi)
 545:	65 72 00             	gs jb  548 <.debug_str+0x548>
 548:	50                   	push   %rax
 549:	61                   	(bad)  
 54a:	67 65 53             	addr32 gs push %rbx
 54d:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 550:	6c                   	insb   (%dx),%es:(%rdi)
 551:	6c                   	insb   (%dx),%es:(%rdi)
 552:	00 57 65             	add    %dl,0x65(%rdi)
 555:	62 46 6f 72 77       	(bad)
 55a:	61                   	(bad)  
 55b:	72 64                	jb     5c1 <.debug_str+0x5c1>
 55d:	00 4b 65             	add    %cl,0x65(%rbx)
 560:	79 4d                	jns    5af <.debug_str+0x5af>
 562:	6f                   	outsl  %ds:(%rsi),(%dx)
 563:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 56a:	43 
 56b:	61                   	(bad)  
 56c:	70 73                	jo     5e1 <.debug_str+0x5e1>
 56e:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 570:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 573:	52                   	push   %rdx
 574:	65 6e                	outsb  %gs:(%rsi),(%dx)
 576:	64 65 72 00          	fs gs jb 57a <.debug_str+0x57a>
 57a:	63 68 61             	movsxd 0x61(%rax),%ebp
 57d:	72 00                	jb     57f <.debug_str+0x57f>
 57f:	42 61                	rex.X (bad) 
 581:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 584:	70 61                	jo     5e7 <.debug_str+0x5e7>
 586:	63 65 00             	movsxd 0x0(%rbp),%esp
 589:	47                   	rex.RXB
 58a:	4e 55                	rex.WRX push %rbp
 58c:	20 43 2b             	and    %al,0x2b(%rbx)
 58f:	2b 31                	sub    (%rcx),%esi
 591:	37                   	(bad)  
 592:	20 31                	and    %dh,(%rcx)
 594:	31 2e                	xor    %ebp,(%rsi)
 596:	32 2e                	xor    (%rsi),%ch
 598:	30 20                	xor    %ah,(%rax)
 59a:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 59f:	6d                   	insl   (%dx),%es:(%rdi)
 5a0:	6d                   	insl   (%dx),%es:(%rdi)
 5a1:	78 20                	js     5c3 <.debug_str+0x5c3>
 5a3:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 5a8:	73 73                	jae    61d <.debug_str+0x61d>
 5aa:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f741e <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f6f6e>
 5b1:	73 73                	jae    626 <.debug_str+0x626>
 5b3:	65 32 20             	xor    %gs:(%rax),%ah
 5b6:	2d 6d 63 6d 6f       	sub    $0x6f6d636d,%eax
 5bb:	64 65 6c             	fs gs insb (%dx),%es:(%rdi)
 5be:	3d 6c 61 72 67       	cmp    $0x6772616c,%eax
 5c3:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f7437 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f6f87>
 5ca:	72 65                	jb     631 <.debug_str+0x631>
 5cc:	64 2d 7a 6f 6e 65    	fs sub $0x656e6f7a,%eax
 5d2:	20 2d 6d 74 75 6e    	and    %ch,0x6e75746d(%rip)        # 6e757a45 <ConsoleKeyEventHandler(Input::Key, bool)+0x6e757595>
 5d8:	65 3d 67 65 6e 65    	gs cmp $0x656e6567,%eax
 5de:	72 69                	jb     649 <.debug_str+0x649>
 5e0:	63 20                	movsxd (%rax),%esp
 5e2:	2d 6d 61 72 63       	sub    $0x6372616d,%eax
 5e7:	68 3d 78 38 36       	push   $0x3638783d
 5ec:	2d 36 34 20 2d       	sub    $0x2d203436,%eax
 5f1:	67 20 2d 4f 32 20 2d 	and    %ch,0x2d20324f(%eip)        # 2d203847 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d203397>
 5f8:	66 66 72 65          	data16 data16 jb 661 <.debug_str+0x661>
 5fc:	65 73 74             	gs jae 673 <.debug_str+0x673>
 5ff:	61                   	(bad)  
 600:	6e                   	outsb  %ds:(%rsi),(%dx)
 601:	64 69 6e 67 20 2d 66 	imul   $0x69662d20,%fs:0x67(%rsi),%ebp
 608:	69 
 609:	6e                   	outsb  %ds:(%rsi),(%dx)
 60a:	6c                   	insb   (%dx),%es:(%rdi)
 60b:	69 6e 65 2d 66 75 6e 	imul   $0x6e75662d,0x65(%rsi),%ebp
 612:	63 74 69 6f          	movsxd 0x6f(%rcx,%rbp,2),%esi
 616:	6e                   	outsb  %ds:(%rsi),(%dx)
 617:	73 20                	jae    639 <.debug_str+0x639>
 619:	2d 66 6e 6f 2d       	sub    $0x2d6f6e66,%eax
 61e:	65 78 63             	gs js  684 <.debug_str+0x684>
 621:	65 70 74             	gs jo  698 <.debug_str+0x698>
 624:	69 6f 6e 73 20 2d 66 	imul   $0x662d2073,0x6e(%rdi),%ebp
 62b:	6e                   	outsb  %ds:(%rsi),(%dx)
 62c:	6f                   	outsl  %ds:(%rsi),(%dx)
 62d:	2d 72 74 74 69       	sub    $0x69747472,%eax
 632:	20 2d 66 6e 6f 2d    	and    %ch,0x2d6f6e66(%rip)        # 2d6f749e <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f6fee>
 638:	70 69                	jo     6a3 <.debug_str+0x6a3>
 63a:	63 00                	movsxd (%rax),%eax
 63c:	5f                   	pop    %rdi
 63d:	5a                   	pop    %rdx
 63e:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
 644:	74 31                	je     677 <.debug_str+0x677>
 646:	34 41                	xor    $0x41,%al
 648:	70 70                	jo     6ba <.debug_str+0x6ba>
 64a:	6c                   	insb   (%dx),%es:(%rdi)
 64b:	79 4d                	jns    69a <.debug_str+0x69a>
 64d:	6f                   	outsl  %ds:(%rsi),(%dx)
 64e:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 655:	45 
 656:	4e 53                	rex.WRX push %rbx
 658:	5f                   	pop    %rdi
 659:	33 4b 65             	xor    0x65(%rbx),%ecx
 65c:	79 45                	jns    6a3 <.debug_str+0x6a3>
 65e:	68 00 43 61 72       	push   $0x72614300
 663:	65 74 00             	gs je  666 <.debug_str+0x666>
 666:	4e 75 6d             	rex.WRX jne 6d6 <.debug_str+0x6d6>
 669:	62 65                	(bad)  
 66b:	72 4c                	jb     6b9 <.debug_str+0x6b9>
 66d:	6f                   	outsl  %ds:(%rsi),(%dx)
 66e:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 671:	5f                   	pop    %rdi
 672:	5a                   	pop    %rdx
 673:	4e 37                	rex.WRX (bad) 
 675:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 677:	6e                   	outsb  %ds:(%rsi),(%dx)
 678:	73 6f                	jae    6e9 <.debug_str+0x6e9>
 67a:	6c                   	insb   (%dx),%es:(%rdi)
 67b:	65 43 32 45 76       	rex.XB xor %gs:0x76(%r13),%al
 680:	00 4c 41 6c          	add    %cl,0x6c(%rcx,%rax,2)
 684:	74 00                	je     686 <.debug_str+0x686>
 686:	57                   	push   %rdi
 687:	65 62 52 65 66 72    	(bad)
 68d:	65 73 68             	gs jae 6f8 <.debug_str+0x6f8>
 690:	00 6d 5f             	add    %ch,0x5f(%rbp)
 693:	54                   	push   %rsp
 694:	65 78 74             	gs js  70b <.debug_str+0x70b>
 697:	50                   	push   %rax
 698:	72 65                	jb     6ff <.debug_str+0x6ff>
 69a:	73 65                	jae    701 <.debug_str+0x701>
 69c:	6e                   	outsb  %ds:(%rsi),(%dx)
 69d:	74 65                	je     704 <.debug_str+0x704>
 69f:	72 00                	jb     6a1 <.debug_str+0x6a1>
 6a1:	57                   	push   %rdi
 6a2:	65 62                	gs (bad) 
 6a4:	48 6f                	rex.W outsl %ds:(%rsi),(%dx)
 6a6:	6d                   	insl   (%dx),%es:(%rdi)
 6a7:	65 00 4e 75          	add    %cl,%gs:0x75(%rsi)
 6ab:	6d                   	insl   (%dx),%es:(%rdi)
 6ac:	70 61                	jo     70f <.debug_str+0x70f>
 6ae:	64 30 00             	xor    %al,%fs:(%rax)
 6b1:	4e 75 6d             	rex.WRX jne 721 <.debug_str+0x721>
 6b4:	70 61                	jo     717 <.debug_str+0x717>
 6b6:	64 31 00             	xor    %eax,%fs:(%rax)
 6b9:	4e 75 6d             	rex.WRX jne 729 <.debug_str+0x729>
 6bc:	70 61                	jo     71f <.debug_str+0x71f>
 6be:	64 32 00             	xor    %fs:(%rax),%al
 6c1:	4e 75 6d             	rex.WRX jne 731 <.debug_str+0x731>
 6c4:	70 61                	jo     727 <.debug_str+0x727>
 6c6:	64 33 00             	xor    %fs:(%rax),%eax
 6c9:	4e 75 6d             	rex.WRX jne 739 <.debug_str+0x739>
 6cc:	70 61                	jo     72f <.debug_str+0x72f>
 6ce:	64 34 00             	fs xor $0x0,%al
 6d1:	4e 75 6d             	rex.WRX jne 741 <.debug_str+0x741>
 6d4:	70 61                	jo     737 <.debug_str+0x737>
 6d6:	64 35 00 4e 75 6d    	fs xor $0x6d754e00,%eax
 6dc:	70 61                	jo     73f <.debug_str+0x73f>
 6de:	64 36 00 4e 75       	fs add %cl,%fs:0x75(%rsi)
 6e3:	6d                   	insl   (%dx),%es:(%rdi)
 6e4:	70 61                	jo     747 <.debug_str+0x747>
 6e6:	64 37                	fs (bad) 
 6e8:	00 4e 75             	add    %cl,0x75(%rsi)
 6eb:	6d                   	insl   (%dx),%es:(%rdi)
 6ec:	70 61                	jo     74f <.debug_str+0x74f>
 6ee:	64 38 00             	cmp    %al,%fs:(%rax)
 6f1:	4e 75 6d             	rex.WRX jne 761 <.debug_str+0x761>
 6f4:	70 61                	jo     757 <.debug_str+0x757>
 6f6:	64 39 00             	cmp    %eax,%fs:(%rax)
 6f9:	50                   	push   %rax
 6fa:	65 72 63             	gs jb  760 <.debug_str+0x760>
 6fd:	65 6e                	outsb  %gs:(%rsi),(%dx)
 6ff:	74 61                	je     762 <.debug_str+0x762>
 701:	67 65 00 4c 65 66    	add    %cl,%gs:0x66(%ebp,%eiz,2)
 707:	74 42                	je     74b <.debug_str+0x74b>
 709:	72 61                	jb     76c <.debug_str+0x76c>
 70b:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 70e:	74 00                	je     710 <.debug_str+0x710>
 710:	52                   	push   %rdx
 711:	43 74 72             	rex.XB je 786 <.debug_str+0x786>
 714:	6c                   	insb   (%dx),%es:(%rdi)
 715:	00 45 78             	add    %al,0x78(%rbp)
 718:	63 6c 61 6d          	movsxd 0x6d(%rcx,%riz,2),%ebp
 71c:	61                   	(bad)  
 71d:	74 69                	je     788 <.debug_str+0x788>
 71f:	6f                   	outsl  %ds:(%rsi),(%dx)
 720:	6e                   	outsb  %ds:(%rsi),(%dx)
 721:	00 63 6f             	add    %ah,0x6f(%rbx)
 724:	64 65 00 51 75       	fs add %dl,%gs:0x75(%rcx)
 729:	6f                   	outsl  %ds:(%rsi),(%dx)
 72a:	74 65                	je     791 <.debug_str+0x791>
 72c:	00 43 6f             	add    %al,0x6f(%rbx)
 72f:	6d                   	insl   (%dx),%es:(%rdi)
 730:	70 75                	jo     7a7 <.debug_str+0x7a7>
 732:	74 65                	je     799 <.debug_str+0x799>
 734:	72 00                	jb     736 <.debug_str+0x736>
 736:	5f                   	pop    %rdi
 737:	5a                   	pop    %rdx
 738:	4e 37                	rex.WRX (bad) 
 73a:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 73c:	6e                   	outsb  %ds:(%rsi),(%dx)
 73d:	73 6f                	jae    7ae <.debug_str+0x7ae>
 73f:	6c                   	insb   (%dx),%es:(%rdi)
 740:	65 31 35 52 65 6e 64 	xor    %esi,%gs:0x646e6552(%rip)        # 646e6c99 <ConsoleKeyEventHandler(Input::Key, bool)+0x646e67e9>
 747:	65 72 4d             	gs jb  797 <.debug_str+0x797>
 74a:	6f                   	outsl  %ds:(%rsi),(%dx)
 74b:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 752:	45 
 753:	76 00                	jbe    755 <.debug_str+0x755>
 755:	41 72 72             	rex.B jb 7ca <.debug_str+0x7ca>
 758:	6f                   	outsl  %ds:(%rsi),(%dx)
 759:	77 52                	ja     7ad <.debug_str+0x7ad>
 75b:	69 67 68 74 00 75 69 	imul   $0x69750074,0x68(%rdi),%esp
 762:	6e                   	outsb  %ds:(%rsi),(%dx)
 763:	74 38                	je     79d <.debug_str+0x79d>
 765:	5f                   	pop    %rdi
 766:	74 00                	je     768 <.debug_str+0x768>
 768:	4d 75 6c             	rex.WRB jne 7d7 <.debug_str+0x7d7>
 76b:	74 69                	je     7d6 <.debug_str+0x7d6>
 76d:	70 6c                	jo     7db <.debug_str+0x7db>
 76f:	79 00                	jns    771 <.debug_str+0x771>
 771:	4e 75 6d             	rex.WRX jne 7e1 <.debug_str+0x7e1>
 774:	70 61                	jo     7d7 <.debug_str+0x7d7>
 776:	64 53                	fs push %rbx
 778:	6c                   	insb   (%dx),%es:(%rdi)
 779:	61                   	(bad)  
 77a:	73 68                	jae    7e4 <.debug_str+0x7e4>
 77c:	00 50 61             	add    %dl,0x61(%rax)
 77f:	75 73                	jne    7f4 <.debug_str+0x7f4>
 781:	65 42 72 65          	gs rex.X jb 7ea <.debug_str+0x7ea>
 785:	61                   	(bad)  
 786:	6b 00 45             	imul   $0x45,(%rax),%eax
 789:	73 63                	jae    7ee <.debug_str+0x7ee>
 78b:	61                   	(bad)  
 78c:	70 65                	jo     7f3 <.debug_str+0x7f3>
 78e:	00 6d 5f             	add    %ch,0x5f(%rbp)
 791:	42 75 66             	rex.X jne 7fa <.debug_str+0x7fa>
 794:	66 65 72 73          	data16 gs jb 80b <.debug_str+0x80b>
 798:	00 43 61             	add    %al,0x61(%rbx)
 79b:	6c                   	insb   (%dx),%es:(%rdi)
 79c:	63 75 6c             	movsxd 0x6c(%rbp),%esi
 79f:	61                   	(bad)  
 7a0:	74 6f                	je     811 <.debug_str+0x811>
 7a2:	72 00                	jb     7a4 <.debug_str+0x7a4>
 7a4:	4e 75 6d             	rex.WRX jne 814 <.debug_str+0x814>
 7a7:	70 61                	jo     80a <.debug_str+0x80a>
 7a9:	64 50                	fs push %rax
 7ab:	65 72 69             	gs jb  817 <.debug_str+0x817>
 7ae:	6f                   	outsl  %ds:(%rsi),(%dx)
 7af:	64 00 51 75          	add    %dl,%fs:0x75(%rcx)
 7b3:	65 73 74             	gs jae 82a <.debug_str+0x82a>
 7b6:	69 6f 6e 00 5f 5a 4e 	imul   $0x4e5a5f00,0x6e(%rdi),%ebp
 7bd:	35 56 69 64 65       	xor    $0x65646956,%eax
 7c2:	6f                   	outsl  %ds:(%rsi),(%dx)
 7c3:	31 37                	xor    %esi,(%rdi)
 7c5:	54                   	push   %rsp
 7c6:	65 78 74             	gs js  83d <.debug_str+0x83d>
 7c9:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 7cb:	64 65 50             	fs gs push %rax
 7ce:	72 65                	jb     835 <.debug_str+0x835>
 7d0:	73 65                	jae    837 <.debug_str+0x837>
 7d2:	6e                   	outsb  %ds:(%rsi),(%dx)
 7d3:	74 65                	je     83a <.debug_str+0x83a>
 7d5:	72 36                	jb     80d <.debug_str+0x80d>
 7d7:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 7d9:	76 65                	jbe    840 <.debug_str+0x840>
 7db:	55                   	push   %rbp
 7dc:	70 45                	jo     823 <.debug_str+0x823>
 7de:	76 00                	jbe    7e0 <.debug_str+0x7e0>
 7e0:	6d                   	insl   (%dx),%es:(%rdi)
 7e1:	5f                   	pop    %rdi
 7e2:	4f                   	rex.WRXB
 7e3:	66 66 73 65          	data16 data16 jae 84c <.debug_str+0x84c>
 7e7:	74 59                	je     842 <.debug_str+0x842>
 7e9:	00 53 70             	add    %dl,0x70(%rbx)
 7ec:	61                   	(bad)  
 7ed:	63 65 00             	movsxd 0x0(%rbp),%esp
 7f0:	53                   	push   %rbx
 7f1:	6c                   	insb   (%dx),%es:(%rdi)
 7f2:	65 65 70 00          	gs gs jo 7f6 <.debug_str+0x7f6>
 7f6:	5f                   	pop    %rdi
 7f7:	5a                   	pop    %rdx
 7f8:	4e 37                	rex.WRX (bad) 
 7fa:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 7fc:	6e                   	outsb  %ds:(%rsi),(%dx)
 7fd:	73 6f                	jae    86e <ConsoleKeyEventHandler(Input::Key, bool)+0x3be>
 7ff:	6c                   	insb   (%dx),%es:(%rdi)
 800:	65 37                	gs (bad) 
 802:	41                   	rex.B
 803:	64 64 43 68 61 72 45 	fs fs rex.XB push $0x63457261
 80a:	63 
 80b:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
 80f:	74 00                	je     811 <.debug_str+0x811>
 811:	4b                   	rex.WXB
 812:	65 79 4d             	gs jns 862 <ConsoleKeyEventHandler(Input::Key, bool)+0x3b2>
 815:	6f                   	outsl  %ds:(%rsi),(%dx)
 816:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 81d:	00 
 81e:	4c 53                	rex.WR push %rbx
 820:	68 69 66 74 00       	push   $0x746669
 825:	5f                   	pop    %rdi
 826:	5a                   	pop    %rdx
 827:	32 32                	xor    (%rdx),%dh
 829:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 82b:	6e                   	outsb  %ds:(%rsi),(%dx)
 82c:	73 6f                	jae    89d <ConsoleKeyEventHandler(Input::Key, bool)+0x3ed>
 82e:	6c                   	insb   (%dx),%es:(%rdi)
 82f:	65 4b                	gs rex.WXB
 831:	65 79 45             	gs jns 879 <ConsoleKeyEventHandler(Input::Key, bool)+0x3c9>
 834:	76 65                	jbe    89b <ConsoleKeyEventHandler(Input::Key, bool)+0x3eb>
 836:	6e                   	outsb  %ds:(%rsi),(%dx)
 837:	74 48                	je     881 <ConsoleKeyEventHandler(Input::Key, bool)+0x3d1>
 839:	61                   	(bad)  
 83a:	6e                   	outsb  %ds:(%rsi),(%dx)
 83b:	64 6c                	fs insb (%dx),%es:(%rdi)
 83d:	65 72 4e             	gs jb  88e <ConsoleKeyEventHandler(Input::Key, bool)+0x3de>
 840:	35 49 6e 70 75       	xor    $0x75706e49,%eax
 845:	74 33                	je     87a <ConsoleKeyEventHandler(Input::Key, bool)+0x3ca>
 847:	4b                   	rex.WXB
 848:	65 79 45             	gs jns 890 <ConsoleKeyEventHandler(Input::Key, bool)+0x3e0>
 84b:	62                   	.byte 0x62
	...

Disassembly of section .debug_line_str:

0000000000000000 <.debug_line_str>:
}
   0:	2f                   	(bad)  
   1:	68 6f 6d 65 2f       	push   $0x2f656d6f
   6:	75 6d                	jne    75 <.debug_line_str+0x75>
   8:	61                   	(bad)  
   9:	72 69                	jb     74 <.debug_line_str+0x74>
   b:	6e                   	outsb  %ds:(%rsi),(%dx)
   c:	2f                   	(bad)  
   d:	73 6f                	jae    7e <.debug_line_str+0x7e>
   f:	75 72                	jne    83 <.debug_line_str+0x83>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  14:	6e                   	outsb  %ds:(%rsi),(%dx)
  15:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  1c:	65 
  1d:	72 6e                	jb     8d <.debug_line_str+0x8d>
  1f:	65 6c                	gs insb (%dx),%es:(%rdi)
  21:	00 73 72             	add    %dh,0x72(%rbx)
  24:	63 2f                	movsxd (%rdi),%ebp
{
  26:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  28:	70 75                	jo     9f <.debug_line_str+0x9f>
  2a:	74 2f                	je     5b <.debug_line_str+0x5b>
  2c:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  2e:	6e                   	outsb  %ds:(%rsi),(%dx)
  2f:	73 6f                	jae    a0 <.debug_line_str+0xa0>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  31:	6c                   	insb   (%dx),%es:(%rdi)
  32:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  35:	70 6c                	jo     a3 <.debug_line_str+0xa3>
  37:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
{
  3b:	2f                   	(bad)  
  3c:	68 6f 6d 65 2f       	push   $0x2f656d6f
  41:	75 6d                	jne    b0 <.debug_line_str+0xb0>
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  43:	61                   	(bad)  
  44:	72 69                	jb     af <.debug_line_str+0xaf>
  46:	6e                   	outsb  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  47:	2f                   	(bad)  
  48:	73 6f                	jae    b9 <.debug_line_str+0xb9>
  4a:	75 72                	jne    be <.debug_line_str+0xbe>
  4c:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  4f:	6e                   	outsb  %ds:(%rsi),(%dx)
  50:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  57:	65 
  58:	72 6e                	jb     c8 <.debug_line_str+0xc8>
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  5a:	65 6c                	gs insb (%dx),%es:(%rdi)
  5c:	00 73 72             	add    %dh,0x72(%rbx)
  5f:	63 2f                	movsxd (%rdi),%ebp
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  61:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  63:	70 75                	jo     da <.debug_line_str+0xda>
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  65:	74 00                	je     67 <.debug_line_str+0x67>
  67:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  6e:	2f                   	(bad)  
  6f:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  71:	70 75                	jo     e8 <.debug_line_str+0xe8>
  73:	74 00                	je     75 <.debug_line_str+0x75>
  75:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  7c:	2f                   	(bad)  
  7d:	56                   	push   %rsi
  7e:	69 64 65 6f 00 2f 68 	imul   $0x6f682f00,0x6f(%rbp,%riz,2),%esp
  85:	6f 
  86:	6d                   	insl   (%dx),%es:(%rdi)
  87:	65 2f                	gs (bad) 
  89:	75 6d                	jne    f8 <.debug_line_str+0xf8>
  8b:	61                   	(bad)  
  8c:	72 69                	jb     f7 <.debug_line_str+0xf7>
  8e:	6e                   	outsb  %ds:(%rsi),(%dx)
  8f:	2f                   	(bad)  
  90:	62 75                	(bad)  
  92:	69 6c 64 2f 78 38 36 	imul   $0x5f363878,0x2f(%rsp,%riz,2),%ebp
  99:	5f 
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  9a:	36 34 2d             	ss xor $0x2d,%al
  9d:	65 6c                	gs insb (%dx),%es:(%rdi)
  9f:	66 2f                	data16 (bad) 
  a1:	6c                   	insb   (%dx),%es:(%rdi)
  a2:	69 62 2f 67 63 63 2f 	imul   $0x2f636367,0x2f(%rdx),%esp
  a9:	78 38                	js     e3 <.debug_line_str+0xe3>
  ab:	36 5f                	ss pop %rdi
  ad:	36 34 2d             	ss xor $0x2d,%al
  b0:	65 6c                	gs insb (%dx),%es:(%rdi)
  b2:	66 2f                	data16 (bad) 
  b4:	31 31                	xor    %esi,(%rcx)
  b6:	2e 32 2e             	cs xor (%rsi),%ch
  b9:	30 2f                	xor    %ch,(%rdi)
  bb:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  c2:	00 43 6f             	add    %al,0x6f(%rbx)
  c5:	6e                   	outsb  %ds:(%rsi),(%dx)
  c6:	73 6f                	jae    137 <Console::RenderModifiers()+0x127>
  c8:	6c                   	insb   (%dx),%es:(%rdi)
  c9:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  cc:	70 6c                	jo     13a <Console::RenderModifiers()+0x12a>
  ce:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  d2:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  d4:	6e                   	outsb  %ds:(%rsi),(%dx)
  d5:	73 6f                	jae    146 <Console::RenderModifiers()+0x136>
  d7:	6c                   	insb   (%dx),%es:(%rdi)
  d8:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  db:	70 6c                	jo     149 <Console::RenderModifiers()+0x139>
  dd:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  e1:	4b                   	rex.WXB
  e2:	65 79 43             	gs jns 128 <Console::RenderModifiers()+0x118>
  e5:	6f                   	outsl  %ds:(%rsi),(%dx)
  e6:	64 65 2e 68 00 56 69 	fs gs cs push $0x64695600
  ed:	64 
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  ee:	65 6f                	outsl  %gs:(%rsi),(%dx)
  f0:	2e 68 00 54 65 78    	cs push $0x78655400
  f6:	74 4d                	je     145 <Console::RenderModifiers()+0x135>
  f8:	6f                   	outsl  %ds:(%rsi),(%dx)
  f9:	64 65 50             	fs gs push %rax
  fc:	72 65                	jb     163 <Console::Refresh()+0x13>
  fe:	73 65                	jae    165 <Console::Refresh()+0x15>
 100:	6e                   	outsb  %ds:(%rsi),(%dx)
 101:	74 65                	je     168 <Console::Refresh()+0x18>
 103:	72 2e                	jb     133 <Console::RenderModifiers()+0x123>
 105:	68 00 43 6f 6e       	push   $0x6e6f4300
 10a:	73 6f                	jae    17b <Console::Refresh()+0x2b>
 10c:	6c                   	insb   (%dx),%es:(%rdi)
 10d:	65 2e 68 00 73 74 64 	gs cs push $0x64747300
 114:	69 6e 74 2d 67 63 63 	imul   $0x6363672d,0x74(%rsi),%ebp
}
 11b:	2e                   	cs
 11c:	68                   	.byte 0x68
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
}
   0:	00 47 43             	add    %al,0x43(%rdi)
   3:	43 3a 20             	rex.XB cmp (%r8),%spl
   6:	28 47 4e             	sub    %al,0x4e(%rdi)
   9:	55                   	push   %rbp
   a:	29 20                	sub    %esp,(%rax)
   c:	31 31                	xor    %esi,(%rcx)
   e:	2e 32 2e             	cs xor (%rsi),%ch
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  11:	30 00                	xor    %al,(%rax)

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	00 00                	add    %al,(%rax)
   6:	00 00                	add    %al,(%rax)
   8:	01 7a 52             	add    %edi,0x52(%rdx)
   b:	00 01                	add    %al,(%rcx)
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    %ebx,(%rbx)
  11:	0c 07                	or     $0x7,%al
  13:	08 90 01 00 00 10    	or     %dl,0x10000001(%rax)
  19:	00 00                	add    %al,(%rax)
  1b:	00 1c 00             	add    %bl,(%rax,%rax,1)
  1e:	00 00                	add    %al,(%rax)
  20:	00 00                	add    %al,(%rax)
  22:	00 00                	add    %al,(%rax)
  24:	01 00                	add    %eax,(%rax)
  26:	00 00                	add    %al,(%rax)
  28:	00 00                	add    %al,(%rax)
  2a:	00 00                	add    %al,(%rax)
  2c:	34 00                	xor    $0x0,%al
  2e:	00 00                	add    %al,(%rax)
  30:	30 00                	xor    %al,(%rax)
  32:	00 00                	add    %al,(%rax)
  34:	00 00                	add    %al,(%rax)
  36:	00 00                	add    %al,(%rax)
  38:	38 01                	cmp    %al,(%rcx)
  3a:	00 00                	add    %al,(%rax)
  3c:	00 41 0e             	add    %al,0xe(%rcx)
  3f:	10 86 02 57 0d 06    	adc    %al,0x60d5702(%rsi)
  45:	48 8f 03             	rex.W pop (%rbx)
  48:	8e 04 8d 05 8c 06 4b 	mov    0x4b068c05(,%rcx,4),%es
  4f:	83 07 02             	addl   $0x2,(%rdi)
  52:	e6 c3                	out    %al,$0xc3
  54:	45 cc                	rex.RB int3 
  56:	51                   	push   %rcx
  57:	cd 42                	int    $0x42
  59:	ce                   	(bad)  
  5a:	4c cf                	rex.WR iretq 
  5c:	41 c6                	rex.B (bad) 
  5e:	0c 07                	or     $0x7,%al
  60:	08 00                	or     %al,(%rax)
  62:	00 00                	add    %al,(%rax)
  64:	20 00                	and    %al,(%rax)
  66:	00 00                	add    %al,(%rax)
  68:	68 00 00 00 00       	push   $0x0
  6d:	00 00                	add    %al,(%rax)
  6f:	00 4e 00             	add    %cl,0x0(%rsi)
  72:	00 00                	add    %al,(%rax)
  74:	00 41 0e             	add    %al,0xe(%rcx)
  77:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  7d:	41 83 03 02          	addl   $0x2,(%r11)
  81:	47 c6 c3 0c          	rex.RXB mov $0xc,%r11b
  85:	07                   	(bad)  
  86:	08 00                	or     %al,(%rax)
  88:	24 00                	and    $0x0,%al
  8a:	00 00                	add    %al,(%rax)
  8c:	8c 00                	mov    %es,(%rax)
  8e:	00 00                	add    %al,(%rax)
  90:	00 00                	add    %al,(%rax)
  92:	00 00                	add    %al,(%rax)
  94:	68 00 00 00 00       	push   $0x0
  99:	4b 0e                	rex.WXB (bad) 
  9b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  a1:	42 8c 03             	rex.X mov %es,(%rbx)
  a4:	49 83 04 70 c3       	addq   $0xffffffffffffffc3,(%r8,%rsi,2)
  a9:	52                   	push   %rdx
  aa:	cc                   	int3   
  ab:	4b c6                	rex.WXB (bad) 
  ad:	0c 07                	or     $0x7,%al
  af:	08 20                	or     %ah,(%rax)
  b1:	00 00                	add    %al,(%rax)
  b3:	00 b4 00 00 00 00 00 	add    %dh,0x0(%rax,%rax,1)
  ba:	00 00                	add    %al,(%rax)
  bc:	43 00 00             	rex.XB add %al,(%r8)
  bf:	00 00                	add    %al,(%rax)
  c1:	4b 0e                	rex.WXB (bad) 
  c3:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  c9:	41 83 03 72          	addl   $0x72,(%r11)
  cd:	c6 c3 0c             	mov    $0xc,%bl
  d0:	07                   	(bad)  
  d1:	08 00                	or     %al,(%rax)
  d3:	00 34 00             	add    %dh,(%rax,%rax,1)
  d6:	00 00                	add    %al,(%rax)
  d8:	d8 00                	fadds  (%rax)
  da:	00 00                	add    %al,(%rax)
  dc:	00 00                	add    %al,(%rax)
  de:	00 00                	add    %al,(%rax)
  e0:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  e1:	00 00                	add    %al,(%rax)
  e3:	00 00                	add    %al,(%rax)
  e5:	41 0e                	rex.B (bad) 
  e7:	10 86 02 52 0d 06    	adc    %al,0x60d5202(%rsi)
  ed:	42 8c 03             	rex.X mov %es,(%rbx)
  f0:	02 4a 0a             	add    0xa(%rdx),%cl
  f3:	c6                   	(bad)  
  f4:	cc                   	int3   
  f5:	0c 07                	or     $0x7,%al
  f7:	08 41 0b             	or     %al,0xb(%rcx)
  fa:	5d                   	pop    %rbp
  fb:	0a c6                	or     %dh,%al
  fd:	cc                   	int3   
  fe:	0c 07                	or     $0x7,%al
 100:	08 43 0b             	or     %al,0xb(%rbx)
 103:	62 c6 cc 0c 07       	(bad)
 108:	08 00                	or     %al,(%rax)
 10a:	00 00                	add    %al,(%rax)
 10c:	40 00 00             	rex add %al,(%rax)
 10f:	00 10                	add    %dl,(%rax)
 111:	01 00                	add    %eax,(%rax)
 113:	00 00                	add    %al,(%rax)
 115:	00 00                	add    %al,(%rax)
 117:	00 97 01 00 00 00    	add    %dl,0x1(%rdi)
 11d:	41 0e                	rex.B (bad) 
 11f:	10 86 02 46 0d 06    	adc    %al,0x60d4602(%rsi)
 125:	42 8c 03             	rex.X mov %es,(%rbx)
 128:	02 51 0a             	add    0xa(%rcx),%dl
 12b:	c6                   	(bad)  
 12c:	cc                   	int3   
 12d:	0c 07                	or     $0x7,%al
 12f:	08 46 0b             	or     %al,0xb(%rsi)
 132:	6a 0a                	push   $0xa
 134:	c6                   	(bad)  
 135:	cc                   	int3   
 136:	0c 07                	or     $0x7,%al
 138:	08 46 0b             	or     %al,0xb(%rsi)
 13b:	02 67 0a             	add    0xa(%rdi),%ah
 13e:	c6                   	(bad)  
 13f:	cc                   	int3   
 140:	0c 07                	or     $0x7,%al
 142:	08 49 0b             	or     %cl,0xb(%rcx)
 145:	02 4a 0a             	add    0xa(%rdx),%cl
 148:	c6                   	(bad)  
 149:	cc                   	int3   
 14a:	0c 07                	or     $0x7,%al
 14c:	08 5e 0b             	or     %bl,0xb(%rsi)
 14f:	00 14 00             	add    %dl,(%rax,%rax,1)
 152:	00 00                	add    %al,(%rax)
 154:	54                   	push   %rsp
 155:	01 00                	add    %eax,(%rax)
 157:	00 00                	add    %al,(%rax)
 159:	00 00                	add    %al,(%rax)
 15b:	00 1f                	add    %bl,(%rdi)
	...
