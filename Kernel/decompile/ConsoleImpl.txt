
build/kernel/Input/ConsoleImpl.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <Console::~Console()>:
}

Console::~Console()
{

}
   0:	c3                   	ret    
   1:	90                   	nop
   2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   9:	00 00 00 00 
   d:	0f 1f 00             	nopl   (%rax)

0000000000000010 <Console::Render()>:

void Console::Render()
{
    
}
  10:	c3                   	ret    
  11:	90                   	nop
  12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  19:	00 00 00 00 
  1d:	0f 1f 00             	nopl   (%rax)

0000000000000020 <Console::RenderModifiers()>:
    RenderModifiers();
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
}

void Console::RenderModifiers()
{
  20:	55                   	push   %rbp
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
    bool shift = m_KeyModifiers & KeyModifiersShift;
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
    bool alt = m_KeyModifiers & KeyModifiersAlt;

    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	45 31 c0             	xor    %r8d,%r8d
  24:	31 f6                	xor    %esi,%esi
  26:	b9 0f 00 00 00       	mov    $0xf,%ecx
  2b:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  32:	00 00 00 
{
  35:	48 89 e5             	mov    %rsp,%rbp
  38:	41 57                	push   %r15
  3a:	41 56                	push   %r14
  3c:	41 55                	push   %r13
  3e:	41 54                	push   %r12
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  40:	49 bc 00 00 00 00 00 	movabs $0x0,%r12
  47:	00 00 00 
{
  4a:	53                   	push   %rbx
  4b:	48 89 fb             	mov    %rdi,%rbx
  4e:	48 83 ec 18          	sub    $0x18,%rsp
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  52:	44 0f b6 6f 08       	movzbl 0x8(%rdi),%r13d
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  57:	48 8b 3f             	mov    (%rdi),%rdi
  5a:	44 89 e8             	mov    %r13d,%eax
  5d:	45 89 ef             	mov    %r13d,%r15d
  60:	45 89 ee             	mov    %r13d,%r14d
  63:	83 e0 04             	and    $0x4,%eax
  66:	41 83 e7 02          	and    $0x2,%r15d
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6a:	41 83 e6 01          	and    $0x1,%r14d
  6e:	88 45 cf             	mov    %al,-0x31(%rbp)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  71:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  74:	41 83 e5 08          	and    $0x8,%r13d
  78:	48 8b 3b             	mov    (%rbx),%rdi
  7b:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
  81:	48 b9 00 00 00 00 00 	movabs $0x0,%rcx
  88:	00 00 00 
  8b:	be 09 00 00 00       	mov    $0x9,%esi
  90:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  97:	00 00 00 
  9a:	48 0f 44 d1          	cmove  %rcx,%rdx
  9e:	31 c9                	xor    %ecx,%ecx
  a0:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a3:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  a7:	48 8b 3b             	mov    (%rbx),%rdi
  aa:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  b1:	00 00 00 
  b4:	89 c6                	mov    %eax,%esi
  b6:	40 f6 de             	neg    %sil
  b9:	be 0d 00 00 00       	mov    $0xd,%esi
  be:	45 19 c0             	sbb    %r8d,%r8d
  c1:	3c 01                	cmp    $0x1,%al
  c3:	19 c9                	sbb    %ecx,%ecx
  c5:	41 83 e0 0f          	and    $0xf,%r8d
  c9:	83 e1 0f             	and    $0xf,%ecx
  cc:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  cf:	44 89 f8             	mov    %r15d,%eax
  d2:	48 8b 3b             	mov    (%rbx),%rdi
  d5:	be 14 00 00 00       	mov    $0x14,%esi
  da:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
  e1:	00 00 00 
  e4:	f6 d8                	neg    %al
  e6:	45 19 c0             	sbb    %r8d,%r8d
  e9:	41 80 ff 01          	cmp    $0x1,%r15b
  ed:	19 c9                	sbb    %ecx,%ecx
  ef:	41 83 e0 0f          	and    $0xf,%r8d
  f3:	83 e1 0f             	and    $0xf,%ecx
  f6:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  f9:	45 89 f0             	mov    %r14d,%r8d
  fc:	48 8b 3b             	mov    (%rbx),%rdi
  ff:	be 1c 00 00 00       	mov    $0x1c,%esi
 104:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 10b:	00 00 00 
 10e:	41 c1 e0 1f          	shl    $0x1f,%r8d
 112:	41 c1 f8 1f          	sar    $0x1f,%r8d
 116:	41 80 fe 01          	cmp    $0x1,%r14b
 11a:	19 c9                	sbb    %ecx,%ecx
 11c:	41 83 e0 0f          	and    $0xf,%r8d
 120:	83 e1 0f             	and    $0xf,%ecx
 123:	41 ff d4             	call   *%r12
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 126:	48 8b 3b             	mov    (%rbx),%rdi
}
 129:	48 83 c4 18          	add    $0x18,%rsp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 12d:	4c 89 e0             	mov    %r12,%rax
}
 130:	5b                   	pop    %rbx
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 131:	45 31 c0             	xor    %r8d,%r8d
}
 134:	41 5c                	pop    %r12
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 136:	b9 0f 00 00 00       	mov    $0xf,%ecx
 13b:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 142:	00 00 00 
}
 145:	41 5d                	pop    %r13
 147:	41 5e                	pop    %r14
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 149:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
 150:	00 00 00 
}
 153:	41 5f                	pop    %r15
 155:	5d                   	pop    %rbp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 156:	ff e0                	jmp    *%rax
 158:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 15f:	00 

0000000000000160 <Console::Refresh()>:
{
 160:	55                   	push   %rbp
 161:	48 89 e5             	mov    %rsp,%rbp
 164:	53                   	push   %rbx
 165:	48 89 fb             	mov    %rdi,%rbx
 168:	48 83 ec 08          	sub    $0x8,%rsp
    m_TextPresenter->Clear();
 16c:	48 8b 3f             	mov    (%rdi),%rdi
 16f:	48 8b 07             	mov    (%rdi),%rax
 172:	ff 10                	call   *(%rax)
    RenderModifiers();
 174:	48 89 df             	mov    %rbx,%rdi
 177:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 17e:	00 00 00 
 181:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 183:	48 8b 3b             	mov    (%rbx),%rdi
 186:	45 31 c0             	xor    %r8d,%r8d
}
 189:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 18d:	b9 0f 00 00 00       	mov    $0xf,%ecx
 192:	ba 3e 00 00 00       	mov    $0x3e,%edx
 197:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
 19e:	00 00 00 
 1a1:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1a8:	00 00 00 
}
 1ab:	c9                   	leave  
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 1ac:	ff e0                	jmp    *%rax
 1ae:	66 90                	xchg   %ax,%ax

00000000000001b0 <Console::Console()>:
  : m_TextPresenter(new Video::TextModePresenter()),
 1b0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1b7:	00 00 00 
Console::Console()
 1ba:	55                   	push   %rbp
 1bb:	48 89 e5             	mov    %rsp,%rbp
 1be:	41 54                	push   %r12
 1c0:	49 89 fc             	mov    %rdi,%r12
  : m_TextPresenter(new Video::TextModePresenter()),
 1c3:	bf 30 00 00 00       	mov    $0x30,%edi
Console::Console()
 1c8:	53                   	push   %rbx
  : m_TextPresenter(new Video::TextModePresenter()),
 1c9:	ff d0                	call   *%rax
 1cb:	48 89 c3             	mov    %rax,%rbx
 1ce:	48 89 c7             	mov    %rax,%rdi
 1d1:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1d8:	00 00 00 
 1db:	ff d0                	call   *%rax
 1dd:	49 89 1c 24          	mov    %rbx,(%r12)
    m_Buffers(new uint8_t[23 * 80]),
 1e1:	bf 30 07 00 00       	mov    $0x730,%edi
 1e6:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 1ed:	00 00 00 
    m_KeyModifiers(0)
 1f0:	41 c6 44 24 08 00    	movb   $0x0,0x8(%r12)
    m_Buffers(new uint8_t[23 * 80]),
 1f6:	ff d0                	call   *%rax
}
 1f8:	5b                   	pop    %rbx
    Refresh();
 1f9:	4c 89 e7             	mov    %r12,%rdi
    m_Buffers(new uint8_t[23 * 80]),
 1fc:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    m_OffsetX(0),
 201:	31 c0                	xor    %eax,%eax
 203:	66 41 89 44 24 19    	mov    %ax,0x19(%r12)
}
 209:	41 5c                	pop    %r12
    Refresh();
 20b:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 212:	00 00 00 
}
 215:	5d                   	pop    %rbp
    Refresh();
 216:	ff e0                	jmp    *%rax
 218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 21f:	00 

0000000000000220 <Console::AddChar(char)>:
        break;
    }
}

void Console::AddChar(char c)
{
 220:	55                   	push   %rbp
 221:	41 89 f0             	mov    %esi,%r8d
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 224:	b9 0f 00 00 00       	mov    $0xf,%ecx
 229:	41 0f be d0          	movsbl %r8b,%edx
 22d:	45 31 c0             	xor    %r8d,%r8d
{
 230:	48 89 e5             	mov    %rsp,%rbp
 233:	41 54                	push   %r12
 235:	49 89 fc             	mov    %rdi,%r12
 238:	48 83 ec 08          	sub    $0x8,%rsp
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 23c:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
 242:	41 0f b6 74 24 19    	movzbl 0x19(%r12),%esi
 248:	48 8b 3f             	mov    (%rdi),%rdi
 24b:	48 83 c0 02          	add    $0x2,%rax
 24f:	48 c1 e0 20          	shl    $0x20,%rax
 253:	48 09 c6             	or     %rax,%rsi
 256:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 25d:	00 00 00 
 260:	ff d0                	call   *%rax
    m_LineLength++;
    if (++m_OffsetX >= 80)
 262:	41 0f b6 44 24 19    	movzbl 0x19(%r12),%eax
    m_LineLength++;
 268:	41 80 44 24 1b 01    	addb   $0x1,0x1b(%r12)
    if (++m_OffsetX >= 80)
 26e:	83 c0 01             	add    $0x1,%eax
 271:	3c 4f                	cmp    $0x4f,%al
 273:	77 0b                	ja     280 <Console::AddChar(char)+0x60>
 275:	41 88 44 24 19       	mov    %al,0x19(%r12)
        {
            m_TextPresenter->MoveUp();
            RenderModifiers();
        } else m_OffsetY++;
    }
 27a:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 27e:	c9                   	leave  
 27f:	c3                   	ret    
        if (m_OffsetY >= 22)
 280:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
        m_OffsetX = 0;
 286:	41 c6 44 24 19 00    	movb   $0x0,0x19(%r12)
        if (m_OffsetY >= 22)
 28c:	3c 15                	cmp    $0x15,%al
 28e:	77 10                	ja     2a0 <Console::AddChar(char)+0x80>
        } else m_OffsetY++;
 290:	83 c0 01             	add    $0x1,%eax
 293:	41 88 44 24 1a       	mov    %al,0x1a(%r12)
 298:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 29c:	c9                   	leave  
 29d:	c3                   	ret    
 29e:	66 90                	xchg   %ax,%ax
            m_TextPresenter->MoveUp();
 2a0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 2a7:	00 00 00 
 2aa:	49 8b 3c 24          	mov    (%r12),%rdi
 2ae:	ff d0                	call   *%rax
            RenderModifiers();
 2b0:	4c 89 e7             	mov    %r12,%rdi
 2b3:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
            RenderModifiers();
 2b7:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 2be:	00 00 00 
 2c1:	c9                   	leave  
            RenderModifiers();
 2c2:	ff e0                	jmp    *%rax
 2c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
 2cb:	00 00 00 00 
 2cf:	90                   	nop

00000000000002d0 <Console::AcceptKey(Input::Key, bool)>:
{
 2d0:	55                   	push   %rbp
    switch (key)
 2d1:	8d 46 fb             	lea    -0x5(%rsi),%eax
{
 2d4:	48 89 e5             	mov    %rsp,%rbp
 2d7:	41 54                	push   %r12
 2d9:	49 89 fc             	mov    %rdi,%r12
 2dc:	89 f7                	mov    %esi,%edi
 2de:	48 83 ec 18          	sub    $0x18,%rsp
    switch (key)
 2e2:	83 f8 1d             	cmp    $0x1d,%eax
 2e5:	77 11                	ja     2f8 <Console::AcceptKey(Input::Key, bool)+0x28>
 2e7:	48 b9 00 00 00 00 00 	movabs $0x0,%rcx
 2ee:	00 00 00 
 2f1:	ff 24 c1             	jmp    *(%rcx,%rax,8)
 2f4:	0f 1f 40 00          	nopl   0x0(%rax)
 2f8:	89 55 ec             	mov    %edx,-0x14(%rbp)
        char code = ApplyModifiers(key, m_KeyModifiers);
 2fb:	41 0f b6 74 24 08    	movzbl 0x8(%r12),%esi
 301:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 308:	00 00 00 
 30b:	ff d0                	call   *%rax
        if (!code || !isPressed || m_LineLength == 255) break;
 30d:	84 c0                	test   %al,%al
 30f:	74 14                	je     325 <Console::AcceptKey(Input::Key, bool)+0x55>
 311:	8b 55 ec             	mov    -0x14(%rbp),%edx
 314:	80 fa 01             	cmp    $0x1,%dl
 317:	75 0c                	jne    325 <Console::AcceptKey(Input::Key, bool)+0x55>
 319:	41 80 7c 24 1b ff    	cmpb   $0xff,0x1b(%r12)
 31f:	0f 85 13 01 00 00    	jne    438 <Console::AcceptKey(Input::Key, bool)+0x168>
}
 325:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 329:	c9                   	leave  
 32a:	c3                   	ret    
 32b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 330:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersShift;
 336:	89 c1                	mov    %eax,%ecx
 338:	83 e0 fd             	and    $0xfffffffd,%eax
 33b:	83 c9 02             	or     $0x2,%ecx
 33e:	84 d2                	test   %dl,%dl
 340:	0f 45 c1             	cmovne %ecx,%eax
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 343:	41 88 44 24 08       	mov    %al,0x8(%r12)
        RenderModifiers();
 348:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 34f:	00 00 00 
 352:	4c 89 e7             	mov    %r12,%rdi
}
 355:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 359:	c9                   	leave  
        RenderModifiers();
 35a:	ff e0                	jmp    *%rax
 35c:	0f 1f 40 00          	nopl   0x0(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 360:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersCtrl;
 366:	89 c1                	mov    %eax,%ecx
 368:	83 e0 fb             	and    $0xfffffffb,%eax
 36b:	83 c9 04             	or     $0x4,%ecx
 36e:	84 d2                	test   %dl,%dl
 370:	0f 45 c1             	cmovne %ecx,%eax
 373:	eb ce                	jmp    343 <Console::AcceptKey(Input::Key, bool)+0x73>
 375:	0f 1f 00             	nopl   (%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 378:	41 0f b6 44 24 08    	movzbl 0x8(%r12),%eax
            m_KeyModifiers |= KeyModifiersAlt;
 37e:	89 c1                	mov    %eax,%ecx
 380:	83 e0 fe             	and    $0xfffffffe,%eax
 383:	83 c9 01             	or     $0x1,%ecx
 386:	84 d2                	test   %dl,%dl
 388:	0f 45 c1             	cmovne %ecx,%eax
 38b:	eb b6                	jmp    343 <Console::AcceptKey(Input::Key, bool)+0x73>
 38d:	0f 1f 00             	nopl   (%rax)
        if (isPressed)
 390:	84 d2                	test   %dl,%dl
 392:	74 b4                	je     348 <Console::AcceptKey(Input::Key, bool)+0x78>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 394:	41 0f b6 54 24 08    	movzbl 0x8(%r12),%edx
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 39a:	89 d1                	mov    %edx,%ecx
 39c:	89 d0                	mov    %edx,%eax
 39e:	83 c9 08             	or     $0x8,%ecx
 3a1:	83 e0 f7             	and    $0xfffffff7,%eax
 3a4:	83 e2 08             	and    $0x8,%edx
 3a7:	0f 44 c1             	cmove  %ecx,%eax
 3aa:	eb 97                	jmp    343 <Console::AcceptKey(Input::Key, bool)+0x73>
 3ac:	0f 1f 40 00          	nopl   0x0(%rax)
        AddChar(' '); break;
 3b0:	be 20 00 00 00       	mov    $0x20,%esi
        AddChar(code);
 3b5:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 3bc:	00 00 00 
 3bf:	4c 89 e7             	mov    %r12,%rdi
}
 3c2:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
 3c6:	c9                   	leave  
        AddChar(code);
 3c7:	ff e0                	jmp    *%rax
 3c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        m_TextPresenter->Clear();
 3d0:	49 8b 3c 24          	mov    (%r12),%rdi
 3d4:	48 8b 07             	mov    (%rdi),%rax
 3d7:	ff 10                	call   *(%rax)
 3d9:	e9 6a ff ff ff       	jmp    348 <Console::AcceptKey(Input::Key, bool)+0x78>
 3de:	66 90                	xchg   %ax,%ax
        if (!isPressed) break;
 3e0:	84 d2                	test   %dl,%dl
 3e2:	0f 84 3d ff ff ff    	je     325 <Console::AcceptKey(Input::Key, bool)+0x55>
        if (m_OffsetY >= 22)
 3e8:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
        m_TextPresenter->Clear();
 3ee:	49 8b 3c 24          	mov    (%r12),%rdi
        m_LineLength = 0;
 3f2:	41 c6 44 24 1b 00    	movb   $0x0,0x1b(%r12)
        m_OffsetX = 1;
 3f8:	41 c6 44 24 19 01    	movb   $0x1,0x19(%r12)
        if (m_OffsetY >= 22)
 3fe:	3c 15                	cmp    $0x15,%al
 400:	77 3e                	ja     440 <Console::AcceptKey(Input::Key, bool)+0x170>
        } else m_OffsetY++;
 402:	83 c0 01             	add    $0x1,%eax
 405:	41 88 44 24 1a       	mov    %al,0x1a(%r12)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 40a:	0f b6 c0             	movzbl %al,%eax
}
 40d:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 411:	45 31 c0             	xor    %r8d,%r8d
 414:	b9 0f 00 00 00       	mov    $0xf,%ecx
}
 419:	c9                   	leave  
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 41a:	48 8d 70 02          	lea    0x2(%rax),%rsi
 41e:	ba 3e 00 00 00       	mov    $0x3e,%edx
 423:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 42a:	00 00 00 
 42d:	48 c1 e6 20          	shl    $0x20,%rsi
 431:	ff e0                	jmp    *%rax
 433:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        AddChar(code);
 438:	0f be f0             	movsbl %al,%esi
 43b:	e9 75 ff ff ff       	jmp    3b5 <Console::AcceptKey(Input::Key, bool)+0xe5>
            m_TextPresenter->MoveUp();
 440:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 447:	00 00 00 
 44a:	ff d0                	call   *%rax
            RenderModifiers();
 44c:	4c 89 e7             	mov    %r12,%rdi
 44f:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 456:	00 00 00 
 459:	ff d0                	call   *%rax
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45b:	41 0f b6 44 24 1a    	movzbl 0x1a(%r12),%eax
 461:	49 8b 3c 24          	mov    (%r12),%rdi
 465:	eb a3                	jmp    40a <Console::AcceptKey(Input::Key, bool)+0x13a>
 467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 46e:	00 00 

0000000000000470 <ConsoleKeyEventHandler(Input::Key, bool)>:
    console->AcceptKey(key, isPressed);
 470:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 477:	00 00 00 
 47a:	40 0f b6 d6          	movzbl %sil,%edx
 47e:	89 fe                	mov    %edi,%esi
 480:	48 8b 38             	mov    (%rax),%rdi
 483:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 48a:	00 00 00 
 48d:	ff e0                	jmp    *%rax

Disassembly of section .rodata.str1.1:

0000000000000000 <.rodata.str1.1>:
   0:	20 41 20             	and    %al,0x20(%rcx)
   3:	00 20                	add    %ah,(%rax)
   5:	61                   	(bad)  
   6:	20 00                	and    %al,(%rax)
   8:	20 43 74             	and    %al,0x74(%rbx)
   b:	72 6c                	jb     79 <Console::RenderModifiers()+0x59>
   d:	20 00                	and    %al,(%rax)
   f:	20 53 68             	and    %dl,0x68(%rbx)
  12:	69 66 74 20 00 20 41 	imul   $0x41200020,0x74(%rsi),%esp
  19:	6c                   	insb   (%dx),%es:(%rdi)
  1a:	74 20                	je     3c <Console::RenderModifiers()+0x1c>
	...

Disassembly of section .rodata.str1.8:

0000000000000000 <.rodata.str1.8>:
   0:	43 61                	rex.XB (bad) 
   2:	70 73                	jo     77 <.rodata.str1.8+0x77>
   4:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
   6:	63 6b 3a             	movsxd 0x3a(%rbx),%ebp
   9:	20 20                	and    %ah,(%rax)
   b:	20 7c 20 20          	and    %bh,0x20(%rax,%riz,1)
   f:	20 20                	and    %ah,(%rax)
  11:	20 20                	and    %ah,(%rax)
  13:	7c 20                	jl     35 <.rodata.str1.8+0x35>
  15:	20 20                	and    %ah,(%rax)
  17:	20 20                	and    %ah,(%rax)
  19:	20 20                	and    %ah,(%rax)
  1b:	7c 20                	jl     3d <.rodata.str1.8+0x3d>
  1d:	20 20                	and    %ah,(%rax)
  1f:	20 20                	and    %ah,(%rax)
  21:	7c 20                	jl     43 <.rodata.str1.8+0x43>
  23:	20 20                	and    %ah,(%rax)
  25:	20 20                	and    %ah,(%rax)
  27:	20 20                	and    %ah,(%rax)
  29:	20 20                	and    %ah,(%rax)
  2b:	20 20                	and    %ah,(%rax)
  2d:	20 20                	and    %ah,(%rax)
  2f:	20 20                	and    %ah,(%rax)
  31:	20 20                	and    %ah,(%rax)
  33:	20 20                	and    %ah,(%rax)
  35:	20 20                	and    %ah,(%rax)
  37:	20 20                	and    %ah,(%rax)
  39:	20 20                	and    %ah,(%rax)
  3b:	20 20                	and    %ah,(%rax)
  3d:	20 20                	and    %ah,(%rax)
  3f:	20 20                	and    %ah,(%rax)
  41:	20 20                	and    %ah,(%rax)
  43:	20 20                	and    %ah,(%rax)
  45:	20 20                	and    %ah,(%rax)
  47:	20 20                	and    %ah,(%rax)
  49:	20 20                	and    %ah,(%rax)
  4b:	20 20                	and    %ah,(%rax)
  4d:	20 20                	and    %ah,(%rax)
  4f:	20 00                	and    %al,(%rax)
  51:	00 00                	add    %al,(%rax)
  53:	00 00                	add    %al,(%rax)
  55:	00 00                	add    %al,(%rax)
  57:	00 2d 2d 2d 2d 2d    	add    %ch,0x2d2d2d2d(%rip)        # 2d2d2d8a <ConsoleKeyEventHandler(Input::Key, bool)+0x2d2d291a>
  5d:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  62:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  67:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  6c:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  71:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  76:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  7b:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  80:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  85:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  8a:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  8f:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  94:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  99:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  9e:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  a3:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
	...

Disassembly of section .rodata:

0000000000000000 <.rodata>:
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
}
   0:	15 0c 00 00 05       	adc    $0x500000c,%eax
   5:	00 01                	add    %al,(%rcx)
   7:	08 00                	or     %al,(%rax)
   9:	00 00                	add    %al,(%rax)
   b:	00 1d 00 00 00 00    	add    %bl,0x0(%rip)        # 11 <.debug_info+0x11>
}
  11:	21 00                	and    %eax,(%rax)
	...
  1f:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	00 8f 04 00 00 00    	add    %cl,0x4(%rdi)
  27:	00 00                	add    %al,(%rax)
  29:	00 00                	add    %al,(%rax)
  2b:	00 00                	add    %al,(%rax)
  2d:	00 06                	add    %al,(%rsi)
  2f:	01 06                	add    %eax,(%rsi)
  31:	00 00                	add    %al,(%rax)
  33:	00 00                	add    %al,(%rax)
{
  35:	06                   	(bad)  
  36:	02 05 00 00 00 00    	add    0x0(%rip),%al        # 3c <.debug_info+0x3c>
  3c:	1e                   	(bad)  
  3d:	04 05                	add    $0x5,%al
  3f:	69 6e 74 00 0d 3c 00 	imul   $0x3c0d00,0x74(%rsi),%ebp
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  46:	00 00                	add    %al,(%rax)
  48:	06                   	(bad)  
  49:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 4f <.debug_info+0x4f>
{
  4f:	1f                   	(bad)  
  50:	00 00                	add    %al,(%rax)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  52:	00 00                	add    %al,(%rax)
  54:	06                   	(bad)  
  55:	2e 18 5b 00          	cs sbb %bl,0x0(%rbx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  59:	00 00                	add    %al,(%rax)
  5b:	06                   	(bad)  
  5c:	01 08                	add    %ecx,(%rax)
  5e:	00 00                	add    %al,(%rax)
  60:	00 00                	add    %al,(%rax)
  62:	06                   	(bad)  
  63:	02 07                	add    (%rdi),%al
  65:	00 00                	add    %al,(%rax)
  67:	00 00                	add    %al,(%rax)
  69:	06                   	(bad)  
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6a:	04 07                	add    $0x7,%al
  6c:	00 00                	add    %al,(%rax)
  6e:	00 00                	add    %al,(%rax)
  70:	06                   	(bad)  
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  71:	08 07                	or     %al,(%rdi)
  73:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  75:	00 00                	add    %al,(%rax)
  77:	06                   	(bad)  
  78:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 7e <.debug_info+0x7e>
  7e:	06                   	(bad)  
  7f:	10 04 00             	adc    %al,(%rax,%rax,1)
  82:	00 00                	add    %al,(%rax)
  84:	00 20                	add    %ah,(%rax)
  86:	00 00                	add    %al,(%rax)
  88:	00 00                	add    %al,(%rax)
  8a:	14 00                	adc    $0x0,%al
  8c:	00 00                	add    %al,(%rax)
  8e:	00 02                	add    %al,(%rdx)
  90:	05 29 04 00 00       	add    $0x429,%eax
  95:	21 4b 65             	and    %ecx,0x65(%rbx)
  98:	79 00                	jns    9a <.debug_info+0x9a>
  9a:	07                   	(bad)  
  9b:	04 69                	add    $0x69,%al
  9d:	00 00                	add    %al,(%rax)
  9f:	00 02                	add    %al,(%rdx)
  a1:	07                   	(bad)  
  a2:	0a e2                	or     %dl,%ah
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a4:	03 00                	add    (%rax),%eax
  a6:	00 01                	add    %al,(%rcx)
  a8:	00 00                	add    %al,(%rax)
  aa:	00 00                	add    %al,(%rax)
  ac:	00 02                	add    %al,(%rdx)
  ae:	46 31 00             	rex.RX xor %r8d,(%rax)
  b1:	01 02                	add    %eax,(%rdx)
  b3:	46 32 00             	rex.RX xor (%rax),%r8b
  b6:	02 02                	add    (%rdx),%al
  b8:	46 33 00             	rex.RX xor (%rax),%r8d
  bb:	03 02                	add    (%rdx),%eax
  bd:	46 34 00             	rex.RX xor $0x0,%al
  c0:	04 02                	add    $0x2,%al
  c2:	46 35 00 05 02 46    	rex.RX xor $0x46020500,%eax
  c8:	36 00 06             	ss add %al,(%rsi)
  cb:	02 46 37             	add    0x37(%rsi),%al
  ce:	00 07                	add    %al,(%rdi)
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d0:	02 46 38             	add    0x38(%rsi),%al
  d3:	00 08                	add    %cl,(%rax)
  d5:	02 46 39             	add    0x39(%rsi),%al
  d8:	00 09                	add    %cl,(%rcx)
  da:	02 46 31             	add    0x31(%rsi),%al
  dd:	30 00                	xor    %al,(%rax)
  df:	0a 02                	or     (%rdx),%al
  e1:	46 31 31             	rex.RX xor %r14d,(%rcx)
  e4:	00 0b                	add    %cl,(%rbx)
  e6:	02 46 31             	add    0x31(%rsi),%al
  e9:	32 00                	xor    (%rax),%al
  eb:	0c 01                	or     $0x1,%al
  ed:	00 00                	add    %al,(%rax)
  ef:	00 00                	add    %al,(%rax)
  f1:	0d 01 00 00 00       	or     $0x1,%eax
  f6:	00 0e                	add    %cl,(%rsi)
  f8:	01 00                	add    %eax,(%rax)
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  fa:	00 00                	add    %al,(%rax)
  fc:	00 0f                	add    %cl,(%rdi)
  fe:	01 00                	add    %eax,(%rax)
 100:	00 00                	add    %al,(%rax)
 102:	00 10                	add    %dl,(%rax)
 104:	01 00                	add    %eax,(%rax)
 106:	00 00                	add    %al,(%rax)
 108:	00 11                	add    %dl,(%rcx)
 10a:	01 00                	add    %eax,(%rax)
 10c:	00 00                	add    %al,(%rax)
 10e:	00 12                	add    %dl,(%rdx)
 110:	01 00                	add    %eax,(%rax)
 112:	00 00                	add    %al,(%rax)
 114:	00 13                	add    %dl,(%rbx)
 116:	02 45 6e             	add    0x6e(%rbp),%al
 119:	64 00 14 01          	add    %dl,%fs:(%rcx,%rax,1)
 11d:	00 00                	add    %al,(%rax)
 11f:	00 00                	add    %al,(%rax)
 121:	15 01 00 00 00       	adc    $0x1,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 126:	00 16                	add    %dl,(%rsi)
 128:	01 00                	add    %eax,(%rax)
}
 12a:	00 00                	add    %al,(%rax)
 12c:	00 17                	add    %dl,(%rdi)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 12e:	02 54 61 62          	add    0x62(%rcx,%riz,2),%dl
 132:	00 18                	add    %bl,(%rax)
}
 134:	01 00                	add    %eax,(%rax)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 136:	00 00                	add    %al,(%rax)
 138:	00 19                	add    %bl,(%rcx)
 13a:	01 00                	add    %eax,(%rax)
 13c:	00 00                	add    %al,(%rax)
 13e:	00 1a                	add    %bl,(%rdx)
 140:	01 00                	add    %eax,(%rax)
 142:	00 00                	add    %al,(%rax)
 144:	00 1b                	add    %bl,(%rbx)
}
 146:	01 00                	add    %eax,(%rax)
 148:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 14a:	00 1c 01             	add    %bl,(%rcx,%rax,1)
 14d:	00 00                	add    %al,(%rax)
 14f:	00 00                	add    %al,(%rax)
 151:	1d 01 00 00 00       	sbb    $0x1,%eax
 156:	00 1e                	add    %bl,(%rsi)
 158:	01 00                	add    %eax,(%rax)
 15a:	00 00                	add    %al,(%rax)
 15c:	00 1f                	add    %bl,(%rdi)
 15e:	01 00                	add    %eax,(%rax)
{
 160:	00 00                	add    %al,(%rax)
 162:	00 20                	add    %ah,(%rax)
 164:	01 00                	add    %eax,(%rax)
 166:	00 00                	add    %al,(%rax)
 168:	00 21                	add    %ah,(%rcx)
 16a:	01 00                	add    %eax,(%rax)
    m_TextPresenter->Clear();
 16c:	00 00                	add    %al,(%rax)
 16e:	00 22                	add    %ah,(%rdx)
 170:	01 00                	add    %eax,(%rax)
 172:	00 00                	add    %al,(%rax)
    RenderModifiers();
 174:	00 23                	add    %ah,(%rbx)
 176:	01 00                	add    %eax,(%rax)
 178:	00 00                	add    %al,(%rax)
 17a:	00 24 01             	add    %ah,(%rcx,%rax,1)
 17d:	00 00                	add    %al,(%rax)
 17f:	00 00                	add    %al,(%rax)
 181:	25 01 00 00 00       	and    $0x1,%eax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 186:	00 26                	add    %ah,(%rsi)
 188:	01 00                	add    %eax,(%rax)
}
 18a:	00 00                	add    %al,(%rax)
 18c:	00 27                	add    %ah,(%rdi)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 18e:	01 00                	add    %eax,(%rax)
 190:	00 00                	add    %al,(%rax)
 192:	00 28                	add    %ch,(%rax)
 194:	01 00                	add    %eax,(%rax)
 196:	00 00                	add    %al,(%rax)
 198:	00 29                	add    %ch,(%rcx)
 19a:	01 00                	add    %eax,(%rax)
 19c:	00 00                	add    %al,(%rax)
 19e:	00 2a                	add    %ch,(%rdx)
 1a0:	01 00                	add    %eax,(%rax)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	00 2b                	add    %ch,(%rbx)
 1a6:	01 00                	add    %eax,(%rax)
 1a8:	00 00                	add    %al,(%rax)
 1aa:	00 2c 01             	add    %ch,(%rcx,%rax,1)
 1ad:	00 00                	add    %al,(%rax)
 1af:	00 00                	add    %al,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1b1:	2d 01 00 00 00       	sub    $0x1,%eax
 1b6:	00 2e                	add    %ch,(%rsi)
 1b8:	01 00                	add    %eax,(%rax)
Console::Console()
 1ba:	00 00                	add    %al,(%rax)
 1bc:	00 2f                	add    %ch,(%rdi)
 1be:	01 00                	add    %eax,(%rax)
 1c0:	00 00                	add    %al,(%rax)
 1c2:	00 30                	add    %dh,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
 1c4:	02 41 00             	add    0x0(%rcx),%al
 1c7:	31 02                	xor    %eax,(%rdx)
 1c9:	42 00 32             	rex.X add %sil,(%rdx)
 1cc:	02 43 00             	add    0x0(%rbx),%al
 1cf:	33 02                	xor    (%rdx),%eax
 1d1:	44 00 34 02          	add    %r14b,(%rdx,%rax,1)
 1d5:	45 00 35 02 46 00 36 	add    %r14b,0x36004602(%rip)        # 360047de <ConsoleKeyEventHandler(Input::Key, bool)+0x3600436e>
 1dc:	02 47 00             	add    0x0(%rdi),%al
 1df:	37                   	(bad)  
 1e0:	02 48 00             	add    0x0(%rax),%cl
    m_Buffers(new uint8_t[23 * 80]),
 1e3:	38 02                	cmp    %al,(%rdx)
 1e5:	49 00 39             	rex.WB add %dil,(%r9)
 1e8:	02 4a 00             	add    0x0(%rdx),%cl
 1eb:	3a 02                	cmp    (%rdx),%al
 1ed:	4b 00 3b             	rex.WXB add %dil,(%r11)
    m_KeyModifiers(0)
 1f0:	02 4c 00 3c          	add    0x3c(%rax,%rax,1),%cl
 1f4:	02 4d 00             	add    0x0(%rbp),%cl
    m_Buffers(new uint8_t[23 * 80]),
 1f7:	3d 02 4e 00 3e       	cmp    $0x3e004e02,%eax
 1fc:	02 4f 00             	add    0x0(%rdi),%cl
 1ff:	3f                   	(bad)  
 200:	02 50 00             	add    0x0(%rax),%dl
    m_OffsetX(0),
 203:	40 02 51 00          	rex add 0x0(%rcx),%dl
 207:	41 02 52 00          	add    0x0(%r10),%dl
    Refresh();
 20b:	42 02 53 00          	rex.X add 0x0(%rbx),%dl
 20f:	43 02 54 00 44       	add    0x44(%r8,%r8,1),%dl
 214:	02 55 00             	add    0x0(%rbp),%dl
 217:	45 02 56 00          	add    0x0(%r14),%r10b
 21b:	46 02 57 00          	rex.RX add 0x0(%rdi),%r10b
 21f:	47 02 58 00          	rex.RXB add 0x0(%r8),%r11b
{
 223:	48 02 59 00          	rex.W add 0x0(%rcx),%bl
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 227:	49 02 5a 00          	rex.WB add 0x0(%r10),%bl
 22b:	4a 01 00             	rex.WX add %rax,(%rax)
 22e:	00 00                	add    %al,(%rax)
{
 230:	00 4b 01             	add    %cl,0x1(%rbx)
 233:	00 00                	add    %al,(%rax)
 235:	00 00                	add    %al,(%rax)
 237:	4c 01 00             	add    %r8,(%rax)
 23a:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 23c:	00 4d 01             	add    %cl,0x1(%rbp)
 23f:	00 00                	add    %al,(%rax)
 241:	00 00                	add    %al,(%rax)
 243:	4e 01 00             	rex.WRX add %r8,(%rax)
 246:	00 00                	add    %al,(%rax)
 248:	00 4f 01             	add    %cl,0x1(%rdi)
 24b:	00 00                	add    %al,(%rax)
 24d:	00 00                	add    %al,(%rax)
 24f:	50                   	push   %rax
 250:	01 00                	add    %eax,(%rax)
 252:	00 00                	add    %al,(%rax)
 254:	00 51 01             	add    %dl,0x1(%rcx)
 257:	00 00                	add    %al,(%rax)
 259:	00 00                	add    %al,(%rax)
 25b:	52                   	push   %rdx
 25c:	01 00                	add    %eax,(%rax)
 25e:	00 00                	add    %al,(%rax)
 260:	00 53 01             	add    %dl,0x1(%rbx)
    if (++m_OffsetX >= 80)
 263:	00 00                	add    %al,(%rax)
 265:	00 00                	add    %al,(%rax)
 267:	54                   	push   %rsp
    m_LineLength++;
 268:	01 00                	add    %eax,(%rax)
 26a:	00 00                	add    %al,(%rax)
 26c:	00 55 01             	add    %dl,0x1(%rbp)
    if (++m_OffsetX >= 80)
 26f:	00 00                	add    %al,(%rax)
 271:	00 00                	add    %al,(%rax)
 273:	56                   	push   %rsi
 274:	01 00                	add    %eax,(%rax)
 276:	00 00                	add    %al,(%rax)
 278:	00 57 01             	add    %dl,0x1(%rdi)
 27b:	00 00                	add    %al,(%rax)
 27d:	00 00                	add    %al,(%rax)
 27f:	58                   	pop    %rax
        if (m_OffsetY >= 22)
 280:	01 00                	add    %eax,(%rax)
 282:	00 00                	add    %al,(%rax)
 284:	00 59 01             	add    %bl,0x1(%rcx)
        m_OffsetX = 0;
 287:	00 00                	add    %al,(%rax)
 289:	00 00                	add    %al,(%rax)
 28b:	5a                   	pop    %rdx
        if (m_OffsetY >= 22)
 28c:	01 00                	add    %eax,(%rax)
 28e:	00 00                	add    %al,(%rax)
        } else m_OffsetY++;
 290:	00 5b 01             	add    %bl,0x1(%rbx)
 293:	00 00                	add    %al,(%rax)
 295:	00 00                	add    %al,(%rax)
 297:	5c                   	pop    %rsp
 298:	01 00                	add    %eax,(%rax)
 29a:	00 00                	add    %al,(%rax)
 29c:	00 5d 01             	add    %bl,0x1(%rbp)
 29f:	00 00                	add    %al,(%rax)
            m_TextPresenter->MoveUp();
 2a1:	00 00                	add    %al,(%rax)
 2a3:	5e                   	pop    %rsi
 2a4:	01 00                	add    %eax,(%rax)
 2a6:	00 00                	add    %al,(%rax)
 2a8:	00 5f 02             	add    %bl,0x2(%rdi)
 2ab:	41 6e                	rex.B outsb %ds:(%rsi),(%dx)
 2ad:	64 00 60 01          	add    %ah,%fs:0x1(%rax)
            RenderModifiers();
 2b1:	00 00                	add    %al,(%rax)
 2b3:	00 00                	add    %al,(%rax)
 2b5:	61                   	(bad)  
 2b6:	01 00                	add    %eax,(%rax)
            RenderModifiers();
 2b8:	00 00                	add    %al,(%rax)
 2ba:	00 62 01             	add    %ah,0x1(%rdx)
 2bd:	00 00                	add    %al,(%rax)
 2bf:	00 00                	add    %al,(%rax)
 2c1:	63 01                	movsxd (%rcx),%eax
            RenderModifiers();
 2c3:	00 00                	add    %al,(%rax)
 2c5:	00 00                	add    %al,(%rax)
 2c7:	64 02 41 64          	add    %fs:0x64(%rcx),%al
 2cb:	64 00 65 01          	add    %ah,%fs:0x1(%rbp)
 2cf:	00 00                	add    %al,(%rax)
    switch (key)
 2d1:	00 00                	add    %al,(%rax)
 2d3:	66 01 00             	add    %ax,(%rax)
{
 2d6:	00 00                	add    %al,(%rax)
 2d8:	00 67 01             	add    %ah,0x1(%rdi)
 2db:	00 00                	add    %al,(%rax)
 2dd:	00 00                	add    %al,(%rax)
 2df:	68 01 00 00 00       	push   $0x1
    switch (key)
 2e4:	00 69 01             	add    %ch,0x1(%rcx)
 2e7:	00 00                	add    %al,(%rax)
 2e9:	00 00                	add    %al,(%rax)
 2eb:	6a 01                	push   $0x1
 2ed:	00 00                	add    %al,(%rax)
 2ef:	00 00                	add    %al,(%rax)
 2f1:	6b 01 00             	imul   $0x0,(%rcx),%eax
 2f4:	00 00                	add    %al,(%rax)
 2f6:	00 6c 01 00          	add    %ch,0x0(%rcx,%rax,1)
 2fa:	00 00                	add    %al,(%rax)
        char code = ApplyModifiers(key, m_KeyModifiers);
 2fc:	00 6d 01             	add    %ch,0x1(%rbp)
 2ff:	00 00                	add    %al,(%rax)
 301:	00 00                	add    %al,(%rax)
 303:	6e                   	outsb  %ds:(%rsi),(%dx)
 304:	01 00                	add    %eax,(%rax)
 306:	00 00                	add    %al,(%rax)
 308:	00 6f 01             	add    %ch,0x1(%rdi)
 30b:	00 00                	add    %al,(%rax)
        if (!code || !isPressed || m_LineLength == 255) break;
 30d:	00 00                	add    %al,(%rax)
 30f:	70 01                	jo     312 <.debug_info+0x312>
 311:	00 00                	add    %al,(%rax)
 313:	00 00                	add    %al,(%rax)
 315:	71 02                	jno    319 <.debug_info+0x319>
 317:	41 74 00             	rex.B je 31a <.debug_info+0x31a>
 31a:	72 01                	jb     31d <.debug_info+0x31d>
 31c:	00 00                	add    %al,(%rax)
 31e:	00 00                	add    %al,(%rax)
 320:	73 01                	jae    323 <.debug_info+0x323>
 322:	00 00                	add    %al,(%rax)
 324:	00 00                	add    %al,(%rax)
}
 326:	74 01                	je     329 <.debug_info+0x329>
 328:	00 00                	add    %al,(%rax)
 32a:	00 00                	add    %al,(%rax)
 32c:	75 01                	jne    32f <.debug_info+0x32f>
 32e:	00 00                	add    %al,(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 330:	00 00                	add    %al,(%rax)
 332:	76 01                	jbe    335 <.debug_info+0x335>
 334:	00 00                	add    %al,(%rax)
            m_KeyModifiers |= KeyModifiersShift;
 336:	00 00                	add    %al,(%rax)
 338:	77 01                	ja     33b <.debug_info+0x33b>
 33a:	00 00                	add    %al,(%rax)
 33c:	00 00                	add    %al,(%rax)
 33e:	78 01                	js     341 <.debug_info+0x341>
 340:	00 00                	add    %al,(%rax)
 342:	00 00                	add    %al,(%rax)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 344:	79 01                	jns    347 <.debug_info+0x347>
 346:	00 00                	add    %al,(%rax)
        RenderModifiers();
 348:	00 00                	add    %al,(%rax)
 34a:	7a 01                	jp     34d <.debug_info+0x34d>
 34c:	00 00                	add    %al,(%rax)
 34e:	00 00                	add    %al,(%rax)
 350:	7b 01                	jnp    353 <.debug_info+0x353>
 352:	00 00                	add    %al,(%rax)
 354:	00 00                	add    %al,(%rax)
}
 356:	7c 01                	jl     359 <.debug_info+0x359>
 358:	00 00                	add    %al,(%rax)
        RenderModifiers();
 35a:	00 00                	add    %al,(%rax)
 35c:	7d 01                	jge    35f <.debug_info+0x35f>
 35e:	00 00                	add    %al,(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 360:	00 00                	add    %al,(%rax)
 362:	7e 01                	jle    365 <.debug_info+0x365>
 364:	00 00                	add    %al,(%rax)
            m_KeyModifiers |= KeyModifiersCtrl;
 366:	00 00                	add    %al,(%rax)
 368:	7f 01                	jg     36b <.debug_info+0x36b>
 36a:	00 00                	add    %al,(%rax)
 36c:	00 00                	add    %al,(%rax)
 36e:	80 01 00             	addb   $0x0,(%rcx)
 371:	00 00                	add    %al,(%rax)
 373:	00 81 01 00 00 00    	add    %al,0x1(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 379:	00 82 01 00 00 00    	add    %al,0x1(%rdx)
            m_KeyModifiers |= KeyModifiersAlt;
 37f:	00 83 01 00 00 00    	add    %al,0x1(%rbx)
 385:	00 84 01 00 00 00 00 	add    %al,0x0(%rcx,%rax,1)
 38c:	85 01                	test   %eax,(%rcx)
 38e:	00 00                	add    %al,(%rax)
        if (isPressed)
 390:	00 00                	add    %al,(%rax)
 392:	86 01                	xchg   %al,(%rcx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 394:	00 00                	add    %al,(%rax)
 396:	00 00                	add    %al,(%rax)
 398:	87 01                	xchg   %eax,(%rcx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 39a:	00 00                	add    %al,(%rax)
 39c:	00 00                	add    %al,(%rax)
 39e:	88 01                	mov    %al,(%rcx)
 3a0:	00 00                	add    %al,(%rax)
 3a2:	00 00                	add    %al,(%rax)
 3a4:	89 01                	mov    %eax,(%rcx)
 3a6:	00 00                	add    %al,(%rax)
 3a8:	00 00                	add    %al,(%rax)
 3aa:	8a 01                	mov    (%rcx),%al
 3ac:	00 00                	add    %al,(%rax)
 3ae:	00 00                	add    %al,(%rax)
        AddChar(' '); break;
 3b0:	8b 01                	mov    (%rcx),%eax
 3b2:	00 00                	add    %al,(%rax)
 3b4:	00 00                	add    %al,(%rax)
        AddChar(code);
 3b6:	8c 01                	mov    %es,(%rcx)
 3b8:	00 00                	add    %al,(%rax)
 3ba:	00 00                	add    %al,(%rax)
 3bc:	8d 01                	lea    (%rcx),%eax
 3be:	00 00                	add    %al,(%rax)
 3c0:	00 00                	add    %al,(%rax)
}
 3c2:	8e 01                	mov    (%rcx),%es
 3c4:	00 00                	add    %al,(%rax)
 3c6:	00 00                	add    %al,(%rax)
        AddChar(code);
 3c8:	8f 01                	pop    (%rcx)
 3ca:	00 00                	add    %al,(%rax)
 3cc:	00 00                	add    %al,(%rax)
 3ce:	90                   	nop
 3cf:	01 00                	add    %eax,(%rax)
        m_TextPresenter->Clear();
 3d1:	00 00                	add    %al,(%rax)
 3d3:	00 91 01 00 00 00    	add    %dl,0x1(%rcx)
 3d9:	00 92 01 00 00 00    	add    %dl,0x1(%rdx)
 3df:	00 93 00 22 00 00    	add    %dl,0x2200(%rbx)
        if (!isPressed) break;
 3e5:	00 00                	add    %al,(%rax)
 3e7:	07                   	(bad)  
        if (m_OffsetY >= 22)
 3e8:	04 69                	add    $0x69,%al
 3ea:	00 00                	add    %al,(%rax)
 3ec:	00 02                	add    %al,(%rdx)
        m_TextPresenter->Clear();
 3ee:	2b 0a                	sub    (%rdx),%ecx
 3f0:	0d 04 00 00 01       	or     $0x1000004,%eax
        m_LineLength = 0;
 3f5:	00 00                	add    %al,(%rax)
 3f7:	00 00                	add    %al,(%rax)
        m_OffsetX = 1;
 3f9:	01 01                	add    %eax,(%rcx)
 3fb:	00 00                	add    %al,(%rax)
 3fd:	00 00                	add    %al,(%rax)
        if (m_OffsetY >= 22)
 3ff:	02 01                	add    (%rcx),%al
 401:	00 00                	add    %al,(%rax)
        } else m_OffsetY++;
 403:	00 00                	add    %al,(%rax)
 405:	04 01                	add    $0x1,%al
 407:	00 00                	add    %al,(%rax)
 409:	00 00                	add    %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 40b:	08 00                	or     %al,(%rax)
}
 40d:	23 00                	and    (%rax),%eax
 40f:	00 00                	add    %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 411:	00 02                	add    %al,(%rdx)
 413:	35 0a 00 00 00       	xor    $0xa,%eax
 418:	00 51 06             	add    %dl,0x6(%rcx)
 41b:	00 00                	add    %al,(%rax)
 41d:	04 95                	add    $0x95,%al
 41f:	00 00                	add    %al,(%rax)
 421:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 424:	00 00                	add    %al,(%rax)
 426:	00 00                	add    %al,(%rax)
 428:	00 14 00             	add    %dl,(%rax,%rax,1)
 42b:	00 00                	add    %al,(%rax)
 42d:	00 03                	add    %al,(%rbx)
 42f:	07                   	(bad)  
 430:	e9 04 00 00 24       	jmp    24000439 <ConsoleKeyEventHandler(Input::Key, bool)+0x23ffffc9>
 435:	00 00                	add    %al,(%rax)
 437:	00 00                	add    %al,(%rax)
        AddChar(code);
 439:	08 03                	or     %al,(%rbx)
 43b:	09 0c 54             	or     %ecx,(%rsp,%rdx,2)
 43e:	04 00                	add    $0x0,%al
            m_TextPresenter->MoveUp();
 440:	00 15 78 00 18 3c    	add    %dl,0x3c180078(%rip)        # 3c1804be <ConsoleKeyEventHandler(Input::Key, bool)+0x3c18004e>
 446:	00 00                	add    %al,(%rax)
 448:	00 00                	add    %al,(%rax)
 44a:	15 79 00 1b 3c       	adc    $0x3c1b0079,%eax
            RenderModifiers();
 44f:	00 00                	add    %al,(%rax)
 451:	00 04 00             	add    %al,(%rax,%rax,1)
 454:	25 00 00 00 00       	and    $0x0,%eax
 459:	07                   	(bad)  
 45a:	00 00                	add    %al,(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45c:	00 00                	add    %al,(%rax)
 45e:	04 18                	add    $0x18,%al
 460:	0e                   	(bad)  
 461:	00 00                	add    %al,(%rax)
 463:	00 00                	add    %al,(%rax)
 465:	6d                   	insl   (%dx),%es:(%rdi)
 466:	04 00                	add    $0x0,%al
 468:	00 73 04             	add    %dh,0x4(%rbx)
 46b:	00 00                	add    %al,(%rax)
 46d:	05 38 06 00 00       	add    $0x638,%eax
    console->AcceptKey(key, isPressed);
 472:	00 07                	add    %al,(%rdi)
 474:	00 00                	add    %al,(%rax)
 476:	00 00                	add    %al,(%rax)
 478:	04 16                	add    $0x16,%al
 47a:	0e                   	(bad)  
 47b:	00 00                	add    %al,(%rax)
 47d:	00 00                	add    %al,(%rax)
 47f:	87 04 00             	xchg   %eax,(%rax,%rax,1)
 482:	00 a1 04 00 00 05    	add    %ah,0x5000004(%rcx)
 488:	38 06                	cmp    %al,(%rsi)
 48a:	00 00                	add    %al,(%rax)
 48c:	04 34                	add    $0x34,%al
 48e:	04 00                	add    $0x0,%al
 490:	00 04 71             	add    %al,(%rcx,%rsi,2)
 493:	06                   	(bad)  
 494:	00 00                	add    %al,(%rax)
 496:	04 4f                	add    $0x4f,%al
 498:	00 00                	add    %al,(%rax)
 49a:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 49d:	00 00                	add    %al,(%rax)
 49f:	00 00                	add    %al,(%rax)
 4a1:	07                   	(bad)  
 4a2:	00 00                	add    %al,(%rax)
 4a4:	00 00                	add    %al,(%rax)
 4a6:	04 17                	add    $0x17,%al
 4a8:	0e                   	(bad)  
 4a9:	00 00                	add    %al,(%rax)
 4ab:	00 00                	add    %al,(%rax)
 4ad:	b5 04                	mov    $0x4,%ch
 4af:	00 00                	add    %al,(%rax)
 4b1:	cf                   	iret   
 4b2:	04 00                	add    $0x0,%al
 4b4:	00 05 38 06 00 00    	add    %al,0x638(%rip)        # af2 <.debug_info+0xaf2>
 4ba:	04 34                	add    $0x34,%al
 4bc:	04 00                	add    $0x0,%al
 4be:	00 04 51             	add    %al,(%rcx,%rdx,2)
 4c1:	06                   	(bad)  
 4c2:	00 00                	add    %al,(%rax)
 4c4:	04 4f                	add    $0x4f,%al
 4c6:	00 00                	add    %al,(%rax)
 4c8:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 4cb:	00 00                	add    %al,(%rax)
 4cd:	00 00                	add    %al,(%rax)
 4cf:	26 00 00             	es add %al,(%rax)
 4d2:	00 00                	add    %al,(%rax)
 4d4:	04 11                	add    $0x11,%al
 4d6:	09 00                	or     %eax,(%rax)
 4d8:	00 00                	add    %al,(%rax)
 4da:	00 01                	add    %al,(%rcx)
 4dc:	e1 04                	loope  4e2 <.debug_info+0x4e2>
 4de:	00 00                	add    %al,(%rax)
 4e0:	00 05 38 06 00 00    	add    %al,0x638(%rip)        # b1e <.debug_info+0xb1e>
 4e6:	00 00                	add    %al,(%rax)
 4e8:	00 06                	add    %al,(%rsi)
 4ea:	01 02                	add    %eax,(%rdx)
 4ec:	00 00                	add    %al,(%rax)
 4ee:	00 00                	add    %al,(%rax)
 4f0:	27                   	(bad)  
 4f1:	00 00                	add    %al,(%rax)
 4f3:	00 00                	add    %al,(%rax)
 4f5:	20 05 06 07 38 06    	and    %al,0x6380706(%rip)        # 6380c01 <ConsoleKeyEventHandler(Input::Key, bool)+0x6380791>
 4fb:	00 00                	add    %al,(%rax)
 4fd:	09 00                	or     %eax,(%rax)
 4ff:	00 00                	add    %al,(%rax)
 501:	00 09                	add    %cl,(%rcx)
 503:	1f                   	(bad)  
 504:	38 06                	cmp    %al,(%rsi)
 506:	00 00                	add    %al,(%rax)
 508:	00 09                	add    %cl,(%rcx)
 50a:	00 00                	add    %al,(%rax)
 50c:	00 00                	add    %al,(%rax)
 50e:	0a 0d 4f 00 00 00    	or     0x4f(%rip),%cl        # 563 <.debug_info+0x563>
 514:	08 09                	or     %cl,(%rcx)
 516:	00 00                	add    %al,(%rax)
 518:	00 00                	add    %al,(%rax)
 51a:	0b 0e                	or     (%rsi),%ecx
 51c:	42 06                	rex.X (bad) 
 51e:	00 00                	add    %al,(%rax)
 520:	10 09                	adc    %cl,(%rcx)
 522:	00 00                	add    %al,(%rax)
 524:	00 00                	add    %al,(%rax)
 526:	0c 0a                	or     $0xa,%al
 528:	e9 04 00 00 18       	jmp    18000531 <ConsoleKeyEventHandler(Input::Key, bool)+0x180000c1>
 52d:	09 00                	or     %eax,(%rax)
 52f:	00 00                	add    %al,(%rax)
 531:	00 0d 0d 4f 00 00    	add    %cl,0x4f0d(%rip)        # 5444 <ConsoleKeyEventHandler(Input::Key, bool)+0x4fd4>
 537:	00 19                	add    %bl,(%rcx)
 539:	09 00                	or     %eax,(%rax)
 53b:	00 00                	add    %al,(%rax)
 53d:	00 0d 18 4f 00 00    	add    %cl,0x4f18(%rip)        # 545b <ConsoleKeyEventHandler(Input::Key, bool)+0x4feb>
 543:	00 1a                	add    %bl,(%rdx)
 545:	09 00                	or     %eax,(%rax)
 547:	00 00                	add    %al,(%rax)
 549:	00 0e                	add    %cl,(%rsi)
 54b:	0d 4f 00 00 00       	or     $0x4f,%eax
 550:	1b 07                	sbb    (%rdi),%eax
 552:	00 00                	add    %al,(%rax)
 554:	00 00                	add    %al,(%rax)
 556:	05 11 05 00 00       	add    $0x511,%eax
 55b:	00 00                	add    %al,(%rax)
 55d:	65 05 00 00 6b 05    	gs add $0x56b0000,%eax
 563:	00 00                	add    %al,(%rax)
 565:	05 47 06 00 00       	add    $0x647,%eax
 56a:	00 07                	add    %al,(%rdi)
 56c:	00 00                	add    %al,(%rax)
 56e:	00 00                	add    %al,(%rax)
 570:	05 12 05 00 00       	add    $0x512,%eax
 575:	00 00                	add    %al,(%rax)
 577:	7f 05                	jg     57e <.debug_info+0x57e>
 579:	00 00                	add    %al,(%rax)
 57b:	8a 05 00 00 05 47    	mov    0x47050000(%rip),%al        # 47050581 <ConsoleKeyEventHandler(Input::Key, bool)+0x47050111>
 581:	06                   	(bad)  
 582:	00 00                	add    %al,(%rax)
 584:	05 3c 00 00 00       	add    $0x3c,%eax
 589:	00 28                	add    %ch,(%rax)
 58b:	00 00                	add    %al,(%rax)
 58d:	00 00                	add    %al,(%rax)
 58f:	05 14 11 00 00       	add    $0x1114,%eax
 594:	00 00                	add    %al,(%rax)
 596:	e9 04 00 00 01       	jmp    100059f <ConsoleKeyEventHandler(Input::Key, bool)+0x100012f>
 59b:	a3 05 00 00 a9 05 00 	movabs %eax,0x5000005a9000005
 5a2:	00 05 
 5a4:	47 06                	rex.RXB (bad) 
 5a6:	00 00                	add    %al,(%rax)
 5a8:	00 07                	add    %al,(%rdi)
 5aa:	00 00                	add    %al,(%rax)
 5ac:	00 00                	add    %al,(%rax)
 5ae:	05 15 0a 00 00       	add    $0xa15,%eax
 5b3:	00 00                	add    %al,(%rax)
 5b5:	bd 05 00 00 c3       	mov    $0xc3000005,%ebp
 5ba:	05 00 00 05 47       	add    $0x47050000,%eax
 5bf:	06                   	(bad)  
 5c0:	00 00                	add    %al,(%rax)
 5c2:	00 07                	add    %al,(%rdi)
 5c4:	00 00                	add    %al,(%rax)
 5c6:	00 00                	add    %al,(%rax)
 5c8:	05 16 0a 00 00       	add    $0xa16,%eax
 5cd:	00 00                	add    %al,(%rax)
 5cf:	d7                   	xlat   %ds:(%rbx)
 5d0:	05 00 00 dd 05       	add    $0x5dd0000,%eax
 5d5:	00 00                	add    %al,(%rax)
 5d7:	05 47 06 00 00       	add    $0x647,%eax
 5dc:	00 07                	add    %al,(%rdi)
 5de:	00 00                	add    %al,(%rax)
 5e0:	00 00                	add    %al,(%rax)
 5e2:	05 17 0a 00 00       	add    $0xa17,%eax
 5e7:	00 00                	add    %al,(%rax)
 5e9:	f1                   	int1   
 5ea:	05 00 00 f7 05       	add    $0x5f70000,%eax
 5ef:	00 00                	add    %al,(%rax)
 5f1:	05 47 06 00 00       	add    $0x647,%eax
 5f6:	00 07                	add    %al,(%rdi)
 5f8:	00 00                	add    %al,(%rax)
 5fa:	00 00                	add    %al,(%rax)
 5fc:	05 18 0a 00 00       	add    $0xa18,%eax
 601:	00 00                	add    %al,(%rax)
 603:	0b 06                	or     (%rsi),%eax
 605:	00 00                	add    %al,(%rax)
 607:	1b 06                	sbb    (%rsi),%eax
 609:	00 00                	add    %al,(%rax)
 60b:	05 47 06 00 00       	add    $0x647,%eax
 610:	04 95                	add    $0x95,%al
 612:	00 00                	add    %al,(%rax)
 614:	00 04 e9             	add    %al,(%rcx,%rbp,8)
 617:	04 00                	add    $0x0,%al
 619:	00 00                	add    %al,(%rax)
 61b:	29 00                	sub    %eax,(%rax)
 61d:	00 00                	add    %al,(%rax)
 61f:	00 05 19 0a 00 00    	add    %al,0xa19(%rip)        # 103e <ConsoleKeyEventHandler(Input::Key, bool)+0xbce>
 625:	00 00                	add    %al,(%rax)
 627:	01 2c 06             	add    %ebp,(%rsi,%rax,1)
 62a:	00 00                	add    %al,(%rax)
 62c:	05 47 06 00 00       	add    $0x647,%eax
 631:	04 51                	add    $0x51,%al
 633:	06                   	(bad)  
 634:	00 00                	add    %al,(%rax)
 636:	00 00                	add    %al,(%rax)
 638:	0e                   	(bad)  
 639:	54                   	push   %rsp
 63a:	04 00                	add    $0x0,%al
 63c:	00 0d 38 06 00 00    	add    %cl,0x638(%rip)        # c7a <ConsoleKeyEventHandler(Input::Key, bool)+0x80a>
 642:	0e                   	(bad)  
 643:	4f 00 00             	rex.WRXB add %r8b,(%r8)
 646:	00 0e                	add    %cl,(%rsi)
 648:	f0 04 00             	lock add $0x0,%al
 64b:	00 0d 47 06 00 00    	add    %cl,0x647(%rip)        # c98 <ConsoleKeyEventHandler(Input::Key, bool)+0x828>
 651:	06                   	(bad)  
 652:	01 06                	add    %eax,(%rsi)
 654:	00 00                	add    %al,(%rax)
 656:	00 00                	add    %al,(%rax)
 658:	0d 51 06 00 00       	or     $0x651,%eax
 65d:	2a 00                	sub    (%rax),%al
 65f:	00 00                	add    %al,(%rax)
 661:	00 05 1c 11 47 06    	add    %al,0x647111c(%rip)        # 6471783 <ConsoleKeyEventHandler(Input::Key, bool)+0x6471313>
 667:	00 00                	add    %al,(%rax)
 669:	2b 01                	sub    (%rcx),%eax
 66b:	0b 11                	or     (%rcx),%edx
 66d:	8a 00                	mov    (%rax),%al
 66f:	00 00                	add    %al,(%rax)
 671:	0e                   	(bad)  
 672:	58                   	pop    %rax
 673:	06                   	(bad)  
 674:	00 00                	add    %al,(%rax)
 676:	2c cf                	sub    $0xcf,%al
 678:	04 00                	add    $0x0,%al
 67a:	00 00                	add    %al,(%rax)
 67c:	00 00                	add    %al,(%rax)
 67e:	00 87 06 00 00 91    	add    %al,-0x6efffffa(%rdi)
 684:	06                   	(bad)  
 685:	00 00                	add    %al,(%rax)
 687:	0a 00                	or     (%rax),%al
 689:	00 00                	add    %al,(%rax)
 68b:	00 3d 06 00 00 00    	add    %bh,0x6(%rip)        # 697 <.debug_info+0x697>
 691:	10 1b                	adc    %bl,(%rbx)
 693:	06                   	(bad)  
 694:	00 00                	add    %al,(%rax)
 696:	79 06                	jns    69e <.debug_info+0x69e>
 698:	a1 06 00 00 01 b5 06 	movabs 0x6b501000006,%eax
 69f:	00 00 
 6a1:	0a 00                	or     (%rax),%al
 6a3:	00 00                	add    %al,(%rax)
 6a5:	00 4c 06 00          	add    %cl,0x0(%rsi,%rax,1)
 6a9:	00 2d 63 00 01 79    	add    %ch,0x79010063(%rip)        # 79010712 <ConsoleKeyEventHandler(Input::Key, bool)+0x790102a2>
 6af:	1c 51                	sbb    $0x51,%al
 6b1:	06                   	(bad)  
 6b2:	00 00                	add    %al,(%rax)
 6b4:	00 16                	add    %dl,(%rsi)
 6b6:	f7 05 00 00 37 d5 06 	testl  $0x6,-0x2ac90000(%rip)        # ffffffffd53706c0 <ConsoleKeyEventHandler(Input::Key, bool)+0xffffffffd5370250>
 6bd:	00 00 00 
 6c0:	00 00                	add    %al,(%rax)
 6c2:	00 00                	add    %al,(%rax)
 6c4:	00 00                	add    %al,(%rax)
 6c6:	00 97 01 00 00 00    	add    %dl,0x1(%rdi)
 6cc:	00 00                	add    %al,(%rax)
 6ce:	00 01                	add    %al,(%rcx)
 6d0:	9c                   	pushf  
 6d1:	a8 07                	test   $0x7,%al
 6d3:	00 00                	add    %al,(%rax)
 6d5:	11 00                	adc    %eax,(%rax)
 6d7:	00 00                	add    %al,(%rax)
 6d9:	00 4c 06 00          	add    %cl,0x0(%rsi,%rax,1)
	...
 6e5:	00 17                	add    %dl,(%rdi)
 6e7:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 6eb:	37                   	(bad)  
 6ec:	24 95                	and    $0x95,%al
	...
 6f6:	00 00                	add    %al,(%rax)
 6f8:	00 18                	add    %bl,(%rax)
 6fa:	00 00                	add    %al,(%rax)
 6fc:	00 00                	add    %al,(%rax)
 6fe:	37                   	(bad)  
 6ff:	2e e9 04 00 00 00    	cs jmp 709 <.debug_info+0x709>
 705:	00 00                	add    %al,(%rax)
 707:	00 00                	add    %al,(%rax)
 709:	00 00                	add    %al,(%rax)
 70b:	00 2e                	add    %ch,(%rsi)
 70d:	00 00                	add    %al,(%rax)
 70f:	00 00                	add    %al,(%rax)
 711:	0b 00                	or     (%rax),%eax
 713:	00 00                	add    %al,(%rax)
 715:	00 71 0e             	add    %dh,0xe(%rcx)
 718:	51                   	push   %rcx
 719:	06                   	(bad)  
	...
 722:	00 00                	add    %al,(%rax)
 724:	12 00                	adc    (%rax),%al
 726:	00 00                	add    %al,(%rax)
 728:	00 00                	add    %al,(%rax)
 72a:	00 00                	add    %al,(%rax)
 72c:	00 0d 04 00 00 13    	add    %cl,0x13000004(%rip)        # 13000736 <ConsoleKeyEventHandler(Input::Key, bool)+0x130002c6>
	...
 73a:	a8 07                	test   $0x7,%al
 73c:	00 00                	add    %al,(%rax)
 73e:	4a 07                	rex.WX (bad) 
 740:	00 00                	add    %al,(%rax)
 742:	03 01                	add    (%rcx),%eax
 744:	55                   	push   %rbp
 745:	03 a3 01 55 00 13    	add    0x13005501(%rbx),%esp
	...
 753:	91                   	xchg   %eax,%ecx
 754:	06                   	(bad)  
 755:	00 00                	add    %al,(%rax)
 757:	63 07                	movsxd (%rdi),%eax
 759:	00 00                	add    %al,(%rax)
 75b:	03 01                	add    (%rcx),%eax
 75d:	55                   	push   %rbp
 75e:	03 a3 01 55 00 13    	add    0x13005501(%rbx),%esp
	...
 76c:	a1 04 00 00 85 07 00 	movabs 0x300000785000004,%eax
 773:	00 03 
 775:	01 51 02             	add    %edx,0x2(%rcx)
 778:	08 3e                	or     %bh,(%rsi)
 77a:	03 01                	add    (%rcx),%eax
 77c:	52                   	push   %rdx
 77d:	01 3f                	add    %edi,(%rdi)
 77f:	03 01                	add    (%rcx),%eax
 781:	58                   	pop    %rax
 782:	01 30                	add    %esi,(%rax)
 784:	00 12                	add    %dl,(%rdx)
	...
 78e:	59                   	pop    %rcx
 78f:	04 00                	add    $0x0,%al
 791:	00 19                	add    %bl,(%rcx)
	...
 79b:	a8 07                	test   $0x7,%al
 79d:	00 00                	add    %al,(%rax)
 79f:	03 01                	add    (%rcx),%eax
 7a1:	55                   	push   %rbp
 7a2:	02 7c 00 00          	add    0x0(%rax,%rax,1),%bh
 7a6:	00 00                	add    %al,(%rax)
 7a8:	1a c3                	sbb    %bl,%al
 7aa:	05 00 00 28 c8       	add    $0xc8280000,%eax
 7af:	07                   	(bad)  
	...
 7b8:	00 00                	add    %al,(%rax)
 7ba:	38 01                	cmp    %al,(%rcx)
 7bc:	00 00                	add    %al,(%rax)
 7be:	00 00                	add    %al,(%rax)
 7c0:	00 00                	add    %al,(%rax)
 7c2:	01 9c 59 09 00 00 11 	add    %ebx,0x11000009(%rcx,%rbx,2)
 7c9:	00 00                	add    %al,(%rax)
 7cb:	00 00                	add    %al,(%rax)
 7cd:	4c 06                	rex.WR (bad) 
	...
 7d7:	00 00                	add    %al,(%rax)
 7d9:	0b 00                	or     (%rax),%eax
 7db:	00 00                	add    %al,(%rax)
 7dd:	00 2a                	add    %ch,(%rdx)
 7df:	0a e9                	or     %cl,%ch
 7e1:	04 00                	add    $0x0,%al
	...
 7eb:	00 0b                	add    %cl,(%rbx)
 7ed:	00 00                	add    %al,(%rax)
 7ef:	00 00                	add    %al,(%rax)
 7f1:	2b 0a                	sub    (%rdx),%ecx
 7f3:	e9 04 00 00 00       	jmp    7fc <.debug_info+0x7fc>
 7f8:	00 00                	add    %al,(%rax)
 7fa:	00 00                	add    %al,(%rax)
 7fc:	00 00                	add    %al,(%rax)
 7fe:	00 0b                	add    %cl,(%rbx)
 800:	00 00                	add    %al,(%rax)
 802:	00 00                	add    %al,(%rax)
 804:	2c 0a                	sub    $0xa,%al
 806:	e9 04 00 00 00       	jmp    80f <.debug_info+0x80f>
 80b:	00 00                	add    %al,(%rax)
 80d:	00 00                	add    %al,(%rax)
 80f:	00 00                	add    %al,(%rax)
 811:	00 2f                	add    %ch,(%rdi)
 813:	61                   	(bad)  
 814:	6c                   	insb   (%dx),%es:(%rdi)
 815:	74 00                	je     817 <.debug_info+0x817>
 817:	01 2d 0a e9 04 00    	add    %ebp,0x4e90a(%rip)        # 4f127 <ConsoleKeyEventHandler(Input::Key, bool)+0x4ecb7>
	...
 825:	00 08                	add    %cl,(%rax)
	...
 82f:	73 04                	jae    835 <.debug_info+0x835>
 831:	00 00                	add    %al,(%rax)
 833:	54                   	push   %rsp
 834:	08 00                	or     %al,(%rax)
 836:	00 03                	add    %al,(%rbx)
 838:	01 54 01 30          	add    %edx,0x30(%rcx,%rax,1)
 83c:	03 01                	add    (%rcx),%eax
 83e:	51                   	push   %rcx
 83f:	09 03                	or     %eax,(%rbx)
	...
 849:	03 01                	add    (%rcx),%eax
 84b:	52                   	push   %rdx
 84c:	01 3f                	add    %edi,(%rdi)
 84e:	03 01                	add    (%rcx),%eax
 850:	58                   	pop    %rax
 851:	01 30                	add    %esi,(%rax)
 853:	00 08                	add    %cl,(%rax)
	...
 85d:	73 04                	jae    863 <.debug_info+0x863>
 85f:	00 00                	add    %al,(%rax)
 861:	75 08                	jne    86b <.debug_info+0x86b>
 863:	00 00                	add    %al,(%rax)
 865:	03 01                	add    (%rcx),%eax
 867:	54                   	push   %rsp
 868:	01 39                	add    %edi,(%rcx)
 86a:	03 01                	add    (%rcx),%eax
 86c:	52                   	push   %rdx
 86d:	01 30                	add    %esi,(%rax)
 86f:	03 01                	add    (%rcx),%eax
 871:	58                   	pop    %rax
 872:	01 3f                	add    %edi,(%rdi)
 874:	00 08                	add    %cl,(%rax)
	...
 87e:	73 04                	jae    884 <.debug_info+0x884>
 880:	00 00                	add    %al,(%rax)
 882:	ae                   	scas   %es:(%rdi),%al
 883:	08 00                	or     %al,(%rax)
 885:	00 03                	add    %al,(%rbx)
 887:	01 54 01 3d          	add    %edx,0x3d(%rcx,%rax,1)
 88b:	03 01                	add    (%rcx),%eax
 88d:	51                   	push   %rcx
 88e:	09 03                	or     %eax,(%rbx)
	...
 898:	03 01                	add    (%rcx),%eax
 89a:	52                   	push   %rdx
 89b:	11 09                	adc    %ecx,(%rcx)
 89d:	ff 30                	push   (%rax)
 89f:	91                   	xchg   %eax,%ecx
 8a0:	bf 7f 94 01 30       	mov    $0x3001947f,%edi
 8a5:	29 28                	sub    %ebp,(%rax)
 8a7:	01 00                	add    %eax,(%rax)
 8a9:	16                   	(bad)  
 8aa:	13 3f                	adc    (%rdi),%edi
 8ac:	1a 00                	sbb    (%rax),%al
 8ae:	08 00                	or     %al,(%rax)
 8b0:	00 00                	add    %al,(%rax)
 8b2:	00 00                	add    %al,(%rax)
 8b4:	00 00                	add    %al,(%rax)
 8b6:	00 73 04             	add    %dh,0x4(%rbx)
 8b9:	00 00                	add    %al,(%rax)
 8bb:	e7 08                	out    %eax,$0x8
 8bd:	00 00                	add    %al,(%rax)
 8bf:	03 01                	add    (%rcx),%eax
 8c1:	54                   	push   %rsp
 8c2:	01 44 03 01          	add    %eax,0x1(%rbx,%rax,1)
 8c6:	51                   	push   %rcx
 8c7:	09 03                	or     %eax,(%rbx)
	...
 8d1:	03 01                	add    (%rcx),%eax
 8d3:	52                   	push   %rdx
 8d4:	11 09                	adc    %ecx,(%rcx)
 8d6:	ff 30                	push   (%rax)
 8d8:	7f 00                	jg     8da <.debug_info+0x8da>
 8da:	08 ff                	or     %bh,%bh
 8dc:	1a 30                	sbb    (%rax),%dh
 8de:	29 28                	sub    %ebp,(%rax)
 8e0:	01 00                	add    %eax,(%rax)
 8e2:	16                   	(bad)  
 8e3:	13 3f                	adc    (%rdi),%edi
 8e5:	1a 00                	sbb    (%rax),%al
 8e7:	08 00                	or     %al,(%rax)
 8e9:	00 00                	add    %al,(%rax)
 8eb:	00 00                	add    %al,(%rax)
 8ed:	00 00                	add    %al,(%rax)
 8ef:	00 73 04             	add    %dh,0x4(%rbx)
 8f2:	00 00                	add    %al,(%rax)
 8f4:	2c 09                	sub    $0x9,%al
 8f6:	00 00                	add    %al,(%rax)
 8f8:	03 01                	add    (%rcx),%eax
 8fa:	54                   	push   %rsp
 8fb:	01 4c 03 01          	add    %ecx,0x1(%rbx,%rax,1)
 8ff:	51                   	push   %rcx
 900:	09 03                	or     %eax,(%rbx)
	...
 90a:	03 01                	add    (%rcx),%eax
 90c:	52                   	push   %rdx
 90d:	11 09                	adc    %ecx,(%rcx)
 90f:	ff 30                	push   (%rax)
 911:	7e 00                	jle    913 <.debug_info+0x913>
 913:	08 ff                	or     %bh,%bh
 915:	1a 30                	sbb    (%rax),%dh
 917:	29 28                	sub    %ebp,(%rax)
 919:	01 00                	add    %eax,(%rax)
 91b:	16                   	(bad)  
 91c:	13 3f                	adc    (%rdi),%edi
 91e:	1a 03                	sbb    (%rbx),%al
 920:	01 58 08             	add    %ebx,0x8(%rax)
 923:	7e 00                	jle    925 <.debug_info+0x925>
 925:	4f 24 4f             	rex.WRXB and $0x4f,%al
 928:	26 3f                	es (bad) 
 92a:	1a 00                	sbb    (%rax),%al
 92c:	0c 00                	or     $0x0,%al
 92e:	00 00                	add    %al,(%rax)
 930:	00 00                	add    %al,(%rax)
 932:	00 00                	add    %al,(%rax)
 934:	00 73 04             	add    %dh,0x4(%rbx)
 937:	00 00                	add    %al,(%rax)
 939:	03 01                	add    (%rcx),%eax
 93b:	54                   	push   %rsp
 93c:	03 40 4c             	add    0x4c(%rax),%eax
 93f:	24 03                	and    $0x3,%al
 941:	01 51 09             	add    %edx,0x9(%rcx)
 944:	03 00                	add    (%rax),%eax
 946:	00 00                	add    %al,(%rax)
 948:	00 00                	add    %al,(%rax)
 94a:	00 00                	add    %al,(%rax)
 94c:	00 03                	add    %al,(%rbx)
 94e:	01 52 01             	add    %edx,0x1(%rdx)
 951:	3f                   	(bad)  
 952:	03 01                	add    (%rcx),%eax
 954:	58                   	pop    %rax
 955:	01 30                	add    %esi,(%rax)
 957:	00 00                	add    %al,(%rax)
 959:	16                   	(bad)  
 95a:	dd 05 00 00 21 79    	fldl   0x79210000(%rip)        # 79210960 <ConsoleKeyEventHandler(Input::Key, bool)+0x792104f0>
 960:	09 00                	or     %eax,(%rax)
	...
 96a:	00 4e 00             	add    %cl,0x0(%rsi)
 96d:	00 00                	add    %al,(%rax)
 96f:	00 00                	add    %al,(%rax)
 971:	00 00                	add    %al,(%rax)
 973:	01 9c c8 09 00 00 11 	add    %ebx,0x11000009(%rax,%rcx,8)
 97a:	00 00                	add    %al,(%rax)
 97c:	00 00                	add    %al,(%rax)
 97e:	4c 06                	rex.WR (bad) 
	...
 988:	00 00                	add    %al,(%rax)
 98a:	08 00                	or     %al,(%rax)
 98c:	00 00                	add    %al,(%rax)
 98e:	00 00                	add    %al,(%rax)
 990:	00 00                	add    %al,(%rax)
 992:	00 a8 07 00 00 a2    	add    %ch,-0x5dfffff9(%rax)
 998:	09 00                	or     %eax,(%rax)
 99a:	00 03                	add    %al,(%rbx)
 99c:	01 55 02             	add    %edx,0x2(%rbp)
 99f:	73 00                	jae    9a1 <.debug_info+0x9a1>
 9a1:	00 0c 00             	add    %cl,(%rax,%rax,1)
 9a4:	00 00                	add    %al,(%rax)
 9a6:	00 00                	add    %al,(%rax)
 9a8:	00 00                	add    %al,(%rax)
 9aa:	00 a1 04 00 00 03    	add    %ah,0x3000004(%rcx)
 9b0:	01 54 03 40          	add    %edx,0x40(%rbx,%rax,1)
 9b4:	4d 24 03             	rex.WRB and $0x3,%al
 9b7:	01 51 02             	add    %edx,0x2(%rcx)
 9ba:	08 3e                	or     %bh,(%rsi)
 9bc:	03 01                	add    (%rcx),%eax
 9be:	52                   	push   %rdx
 9bf:	01 3f                	add    %edi,(%rdi)
 9c1:	03 01                	add    (%rcx),%eax
 9c3:	58                   	pop    %rax
 9c4:	01 30                	add    %esi,(%rax)
 9c6:	00 00                	add    %al,(%rax)
 9c8:	1a a9 05 00 00 1c    	sbb    0x1c000005(%rcx),%ch
 9ce:	e8 09 00 00 00       	call   9dc <.debug_info+0x9dc>
 9d3:	00 00                	add    %al,(%rax)
 9d5:	00 00                	add    %al,(%rax)
 9d7:	00 00                	add    %al,(%rax)
 9d9:	00 01                	add    %al,(%rcx)
 9db:	00 00                	add    %al,(%rax)
 9dd:	00 00                	add    %al,(%rax)
 9df:	00 00                	add    %al,(%rax)
 9e1:	00 01                	add    %al,(%rcx)
 9e3:	9c                   	pushf  
 9e4:	f4                   	hlt    
 9e5:	09 00                	or     %eax,(%rax)
 9e7:	00 30                	add    %dh,(%rax)
 9e9:	00 00                	add    %al,(%rax)
 9eb:	00 00                	add    %al,(%rax)
 9ed:	4c 06                	rex.WR (bad) 
 9ef:	00 00                	add    %al,(%rax)
 9f1:	01 55 00             	add    %edx,0x0(%rbp)
 9f4:	10 6b 05             	adc    %ch,0x5(%rbx)
 9f7:	00 00                	add    %al,(%rax)
 9f9:	17                   	(bad)  
 9fa:	01 04 0a             	add    %eax,(%rdx,%rcx,1)
 9fd:	00 00                	add    %al,(%rax)
 9ff:	00 17                	add    %dl,(%rdi)
 a01:	0a 00                	or     (%rax),%al
 a03:	00 0a                	add    %cl,(%rdx)
 a05:	00 00                	add    %al,(%rax)
 a07:	00 00                	add    %al,(%rax)
 a09:	4c 06                	rex.WR (bad) 
 a0b:	00 00                	add    %al,(%rax)
 a0d:	0a 00                	or     (%rax),%al
 a0f:	00 00                	add    %al,(%rax)
 a11:	00 43 00             	add    %al,0x0(%rbx)
 a14:	00 00                	add    %al,(%rax)
 a16:	00 1b                	add    %bl,(%rbx)
 a18:	f4                   	hlt    
 a19:	09 00                	or     %eax,(%rax)
 a1b:	00 00                	add    %al,(%rax)
 a1d:	00 00                	add    %al,(%rax)
 a1f:	00 3a                	add    %bh,(%rdx)
 a21:	0a 00                	or     (%rax),%al
	...
 a2b:	00 01                	add    %al,(%rcx)
 a2d:	00 00                	add    %al,(%rax)
 a2f:	00 00                	add    %al,(%rax)
 a31:	00 00                	add    %al,(%rax)
 a33:	00 01                	add    %al,(%rcx)
 a35:	9c                   	pushf  
 a36:	42 0a 00             	rex.X or (%rax),%al
 a39:	00 31                	add    %dh,(%rcx)
 a3b:	04 0a                	add    $0xa,%al
 a3d:	00 00                	add    %al,(%rax)
 a3f:	01 55 00             	add    %edx,0x0(%rbp)
 a42:	10 51 05             	adc    %dl,0x5(%rcx)
 a45:	00 00                	add    %al,(%rax)
 a47:	0d 01 52 0a 00       	or     $0xa5201,%eax
 a4c:	00 00                	add    %al,(%rax)
 a4e:	5c                   	pop    %rsp
 a4f:	0a 00                	or     (%rax),%al
 a51:	00 0a                	add    %cl,(%rdx)
 a53:	00 00                	add    %al,(%rax)
 a55:	00 00                	add    %al,(%rax)
 a57:	4c 06                	rex.WR (bad) 
 a59:	00 00                	add    %al,(%rax)
 a5b:	00 1b                	add    %bl,(%rbx)
 a5d:	42 0a 00             	rex.X or (%rax),%al
 a60:	00 00                	add    %al,(%rax)
 a62:	00 00                	add    %al,(%rax)
 a64:	00 7f 0a             	add    %bh,0xa(%rdi)
	...
 a6f:	00 00                	add    %al,(%rax)
 a71:	68 00 00 00 00       	push   $0x0
 a76:	00 00                	add    %al,(%rax)
 a78:	00 01                	add    %al,(%rcx)
 a7a:	9c                   	pushf  
 a7b:	eb 0a                	jmp    a87 <.debug_info+0xa87>
 a7d:	00 00                	add    %al,(%rax)
 a7f:	0f 52 0a             	rsqrtps (%rdx),%xmm1
	...
 a8a:	00 00                	add    %al,(%rax)
 a8c:	08 00                	or     %al,(%rax)
 a8e:	00 00                	add    %al,(%rax)
 a90:	00 00                	add    %al,(%rax)
 a92:	00 00                	add    %al,(%rax)
 a94:	00 06                	add    %al,(%rsi)
 a96:	0c 00                	or     $0x0,%al
 a98:	00 a4 0a 00 00 03 01 	add    %ah,0x1030000(%rdx,%rcx,1)
 a9f:	55                   	push   %rbp
 aa0:	02 08                	add    (%rax),%cl
 aa2:	30 00                	xor    %al,(%rax)
 aa4:	08 00                	or     %al,(%rax)
 aa6:	00 00                	add    %al,(%rax)
 aa8:	00 00                	add    %al,(%rax)
 aaa:	00 00                	add    %al,(%rax)
 aac:	00 76 06             	add    %dh,0x6(%rsi)
 aaf:	00 00                	add    %al,(%rax)
 ab1:	bc 0a 00 00 03       	mov    $0x300000a,%esp
 ab6:	01 55 02             	add    %edx,0x2(%rbp)
 ab9:	73 00                	jae    abb <.debug_info+0xabb>
 abb:	00 08                	add    %cl,(%rax)
	...
 ac5:	0f 0c                	(bad)  
 ac7:	00 00                	add    %al,(%rax)
 ac9:	d5                   	(bad)  
 aca:	0a 00                	or     (%rax),%al
 acc:	00 03                	add    %al,(%rbx)
 ace:	01 55 03             	add    %edx,0x3(%rbp)
 ad1:	0a 30                	or     (%rax),%dh
 ad3:	07                   	(bad)  
 ad4:	00 0c 00             	add    %cl,(%rax,%rax,1)
 ad7:	00 00                	add    %al,(%rax)
 ad9:	00 00                	add    %al,(%rax)
 adb:	00 00                	add    %al,(%rax)
 add:	00 59 09             	add    %bl,0x9(%rcx)
 ae0:	00 00                	add    %al,(%rax)
 ae2:	03 01                	add    (%rcx),%eax
 ae4:	55                   	push   %rbp
 ae5:	03 a3 01 55 00 00    	add    0x5501(%rbx),%esp
 aeb:	32 00                	xor    (%rax),%al
 aed:	00 00                	add    %al,(%rax)
 aef:	00 01                	add    %al,(%rcx)
 af1:	04 06                	add    $0x6,%al
	...
 aff:	1f                   	(bad)  
 b00:	00 00                	add    %al,(%rax)
 b02:	00 00                	add    %al,(%rax)
 b04:	00 00                	add    %al,(%rax)
 b06:	00 01                	add    %al,(%rcx)
 b08:	9c                   	pushf  
 b09:	66 0b 00             	or     (%rax),%ax
 b0c:	00 17                	add    %dl,(%rdi)
 b0e:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 b12:	04 28                	add    $0x28,%al
 b14:	95                   	xchg   %eax,%ebp
	...
 b1d:	00 00                	add    %al,(%rax)
 b1f:	00 18                	add    %bl,(%rax)
 b21:	00 00                	add    %al,(%rax)
 b23:	00 00                	add    %al,(%rax)
 b25:	04 32                	add    $0x32,%al
 b27:	e9 04 00 00 00       	jmp    b30 <.debug_info+0xb30>
 b2c:	00 00                	add    %al,(%rax)
 b2e:	00 00                	add    %al,(%rax)
 b30:	00 00                	add    %al,(%rax)
 b32:	00 0b                	add    %cl,(%rbx)
 b34:	00 00                	add    %al,(%rax)
 b36:	00 00                	add    %al,(%rax)
 b38:	06                   	(bad)  
 b39:	0e                   	(bad)  
 b3a:	47 06                	rex.RXB (bad) 
	...
 b44:	00 00                	add    %al,(%rax)
 b46:	0c 00                	or     $0x0,%al
 b48:	00 00                	add    %al,(%rax)
 b4a:	00 00                	add    %al,(%rax)
 b4c:	00 00                	add    %al,(%rax)
 b4e:	00 b5 06 00 00 03    	add    %dh,0x3000006(%rbp)
 b54:	01 54 03 a3          	add    %edx,-0x5d(%rbx,%rax,1)
 b58:	01 55 03             	add    %edx,0x3(%rbp)
 b5b:	01 51 06             	add    %edx,0x6(%rcx)
 b5e:	a3 01 54 08 ff 1a 00 	movabs %eax,0x3300001aff085401
 b65:	00 33 
 b67:	91                   	xchg   %eax,%ecx
 b68:	06                   	(bad)  
	...
 b75:	00 00                	add    %al,(%rax)
 b77:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
 b78:	00 00                	add    %al,(%rax)
 b7a:	00 00                	add    %al,(%rax)
 b7c:	00 00                	add    %al,(%rax)
 b7e:	00 01                	add    %al,(%rcx)
 b80:	9c                   	pushf  
 b81:	06                   	(bad)  
 b82:	0c 00                	or     $0x0,%al
 b84:	00 0f                	add    %cl,(%rdi)
 b86:	a1 06 00 00 00 00 00 	movabs 0x6,%eax
 b8d:	00 00 
 b8f:	00 00                	add    %al,(%rax)
 b91:	00 0f                	add    %cl,(%rdi)
 b93:	aa                   	stos   %al,%es:(%rdi)
 b94:	06                   	(bad)  
	...
 b9d:	00 00                	add    %al,(%rax)
 b9f:	34 91                	xor    $0x91,%al
 ba1:	06                   	(bad)  
	...
 bae:	00 00                	add    %al,(%rax)
 bb0:	00 01                	add    %al,(%rcx)
 bb2:	79 06                	jns    bba <.debug_info+0xbba>
 bb4:	ed                   	in     (%dx),%eax
 bb5:	0b 00                	or     (%rax),%eax
 bb7:	00 35 aa 06 00 00    	add    %dh,0x6aa(%rip)        # 1267 <ConsoleKeyEventHandler(Input::Key, bool)+0xdf7>
 bbd:	0f a1                	pop    %fs
 bbf:	06                   	(bad)  
	...
 bc8:	00 00                	add    %al,(%rax)
 bca:	12 00                	adc    (%rax),%al
 bcc:	00 00                	add    %al,(%rax)
 bce:	00 00                	add    %al,(%rax)
 bd0:	00 00                	add    %al,(%rax)
 bd2:	00 59 04             	add    %bl,0x4(%rcx)
 bd5:	00 00                	add    %al,(%rax)
 bd7:	0c 00                	or     $0x0,%al
 bd9:	00 00                	add    %al,(%rax)
 bdb:	00 00                	add    %al,(%rax)
 bdd:	00 00                	add    %al,(%rax)
 bdf:	00 a8 07 00 00 03    	add    %ch,0x3000007(%rax)
 be5:	01 55 03             	add    %edx,0x3(%rbp)
 be8:	a3 01 55 00 00 19 00 	movabs %eax,0x1900005501
 bef:	00 00 
 bf1:	00 00                	add    %al,(%rax)
 bf3:	00 00                	add    %al,(%rax)
 bf5:	00 a1 04 00 00 03    	add    %ah,0x3000004(%rcx)
 bfb:	01 52 01             	add    %edx,0x1(%rdx)
 bfe:	3f                   	(bad)  
 bff:	03 01                	add    (%rcx),%eax
 c01:	58                   	pop    %rax
 c02:	01 30                	add    %esi,(%rax)
 c04:	00 00                	add    %al,(%rax)
 c06:	1c 00                	sbb    $0x0,%al
 c08:	00 00                	add    %al,(%rax)
 c0a:	00 00                	add    %al,(%rax)
 c0c:	00 00                	add    %al,(%rax)
 c0e:	00 1c 00             	add    %bl,(%rax,%rax,1)
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
}
   0:	01 28                	add    %ebp,(%rax)
   2:	00 03                	add    %al,(%rbx)
   4:	0e                   	(bad)  
   5:	1c 0b                	sbb    $0xb,%al
   7:	00 00                	add    %al,(%rax)
   9:	02 28                	add    (%rax),%ch
   b:	00 03                	add    %al,(%rbx)
   d:	08 1c 0b             	or     %bl,(%rbx,%rcx,1)
}
  10:	00 00                	add    %al,(%rax)
  12:	03 49 00             	add    0x0(%rcx),%ecx
  15:	02 18                	add    (%rax),%bl
  17:	7e 18                	jle    31 <.debug_abbrev+0x31>
  19:	00 00                	add    %al,(%rax)
  1b:	04 05                	add    $0x5,%al
  1d:	00 49 13             	add    %cl,0x13(%rcx)
{
  20:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  22:	05 05 00 49 13       	add    $0x13490005,%eax
  27:	34 19                	xor    $0x19,%al
  29:	00 00                	add    %al,(%rax)
  2b:	06                   	(bad)  
  2c:	24 00                	and    $0x0,%al
  2e:	0b 0b                	or     (%rbx),%ecx
  30:	3e 0b 03             	ds or  (%rbx),%eax
  33:	0e                   	(bad)  
  34:	00 00                	add    %al,(%rax)
{
  36:	07                   	(bad)  
  37:	2e 01 3f             	cs add %edi,(%rdi)
  3a:	19 03                	sbb    %eax,(%rbx)
  3c:	0e                   	(bad)  
  3d:	3a 0b                	cmp    (%rbx),%cl
  3f:	3b 0b                	cmp    (%rbx),%ecx
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  41:	39 0b                	cmp    %ecx,(%rbx)
  43:	6e                   	outsb  %ds:(%rsi),(%dx)
  44:	0e                   	(bad)  
  45:	32 21                	xor    (%rcx),%ah
  47:	01 3c 19             	add    %edi,(%rcx,%rbx,1)
{
  4a:	64 13 01             	adc    %fs:(%rcx),%eax
  4d:	13 00                	adc    (%rax),%eax
  4f:	00 08                	add    %cl,(%rax)
  51:	48 01 7d 01          	add    %rdi,0x1(%rbp)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  55:	7f 13                	jg     6a <.debug_abbrev+0x6a>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  57:	01 13                	add    %edx,(%rbx)
  59:	00 00                	add    %al,(%rax)
  5b:	09 0d 00 03 0e 3a    	or     %ecx,0x3a0e0300(%rip)        # 3a0e0361 <ConsoleKeyEventHandler(Input::Key, bool)+0x3a0dfef1>
  61:	21 05 3b 0b 39 0b    	and    %eax,0xb390b3b(%rip)        # b390ba2 <ConsoleKeyEventHandler(Input::Key, bool)+0xb390732>
  67:	49 13 38             	adc    (%r8),%rdi
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6a:	0b 00                	or     (%rax),%eax
  6c:	00 0a                	add    %cl,(%rdx)
  6e:	05 00 03 0e 49       	add    $0x490e0300,%eax
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  73:	13 34 19             	adc    (%rcx,%rbx,1),%esi
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  76:	00 00                	add    %al,(%rax)
  78:	0b 34 00             	or     (%rax,%rax,1),%esi
  7b:	03 0e                	add    (%rsi),%ecx
  7d:	3a 21                	cmp    (%rcx),%ah
  7f:	01 3b                	add    %edi,(%rbx)
  81:	0b 39                	or     (%rcx),%edi
  83:	0b 49 13             	or     0x13(%rcx),%ecx
  86:	02 17                	add    (%rdi),%dl
  88:	b7 42                	mov    $0x42,%bh
  8a:	17                   	(bad)  
  8b:	00 00                	add    %al,(%rax)
  8d:	0c 48                	or     $0x48,%al
  8f:	01 7d 01             	add    %edi,0x1(%rbp)
  92:	82                   	(bad)  
  93:	01 19                	add    %ebx,(%rcx)
  95:	7f 13                	jg     aa <.debug_abbrev+0xaa>
  97:	00 00                	add    %al,(%rax)
  99:	0d 26 00 49 13       	or     $0x13490026,%eax
  9e:	00 00                	add    %al,(%rax)
  a0:	0e                   	(bad)  
  a1:	0f 00 0b             	str    (%rbx)
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a4:	21 08                	and    %ecx,(%rax)
  a6:	49 13 00             	adc    (%r8),%rax
  a9:	00 0f                	add    %cl,(%rdi)
  ab:	05 00 31 13 02       	add    $0x2133100,%eax
  b0:	17                   	(bad)  
  b1:	b7 42                	mov    $0x42,%bh
  b3:	17                   	(bad)  
  b4:	00 00                	add    %al,(%rax)
  b6:	10 2e                	adc    %ch,(%rsi)
  b8:	01 47 13             	add    %eax,0x13(%rdi)
  bb:	3a 21                	cmp    (%rcx),%ah
  bd:	01 3b                	add    %edi,(%rbx)
  bf:	0b 39                	or     (%rcx),%edi
  c1:	0b 64 13 20          	or     0x20(%rbx,%rdx,1),%esp
  c5:	0b 01                	or     (%rcx),%eax
  c7:	13 00                	adc    (%rax),%eax
  c9:	00 11                	add    %dl,(%rcx)
  cb:	05 00 03 0e 49       	add    $0x490e0300,%eax
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d0:	13 34 19             	adc    (%rcx,%rbx,1),%esi
  d3:	02 17                	add    (%rdi),%dl
  d5:	b7 42                	mov    $0x42,%bh
  d7:	17                   	(bad)  
  d8:	00 00                	add    %al,(%rax)
  da:	12 48 00             	adc    0x0(%rax),%cl
  dd:	7d 01                	jge    e0 <.debug_abbrev+0xe0>
  df:	7f 13                	jg     f4 <.debug_abbrev+0xf4>
  e1:	00 00                	add    %al,(%rax)
  e3:	13 48 01             	adc    0x1(%rax),%ecx
  e6:	7d 01                	jge    e9 <.debug_abbrev+0xe9>
  e8:	82                   	(bad)  
  e9:	01 19                	add    %ebx,(%rcx)
  eb:	7f 13                	jg     100 <.debug_abbrev+0x100>
  ed:	01 13                	add    %edx,(%rbx)
  ef:	00 00                	add    %al,(%rax)
  f1:	14 39                	adc    $0x39,%al
  f3:	01 03                	add    %eax,(%rbx)
  f5:	0e                   	(bad)  
  f6:	3a 0b                	cmp    (%rbx),%cl
  f8:	3b 0b                	cmp    (%rbx),%ecx
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  fa:	39 21                	cmp    %esp,(%rcx)
  fc:	0b 01                	or     (%rcx),%eax
  fe:	13 00                	adc    (%rax),%eax
 100:	00 15 0d 00 03 08    	add    %dl,0x803000d(%rip)        # 8030113 <ConsoleKeyEventHandler(Input::Key, bool)+0x802fca3>
 106:	3a 21                	cmp    (%rcx),%ah
 108:	03 3b                	add    (%rbx),%edi
 10a:	21 09                	and    %ecx,(%rcx)
 10c:	39 0b                	cmp    %ecx,(%rbx)
 10e:	49 13 38             	adc    (%r8),%rdi
 111:	0b 00                	or     (%rax),%eax
 113:	00 16                	add    %dl,(%rsi)
 115:	2e 01 47 13          	cs add %eax,0x13(%rdi)
 119:	3a 21                	cmp    (%rcx),%ah
 11b:	01 3b                	add    %edi,(%rbx)
 11d:	0b 39                	or     (%rcx),%edi
 11f:	21 06                	and    %eax,(%rsi)
 121:	64 13 11             	adc    %fs:(%rcx),%edx
 124:	01 12                	add    %edx,(%rdx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 126:	07                   	(bad)  
 127:	40 18 7c 19 01       	sbb    %dil,0x1(%rcx,%rbx,1)
}
 12c:	13 00                	adc    (%rax),%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 12e:	00 17                	add    %dl,(%rdi)
}
 130:	05 00 03 08 3a       	add    $0x3a080300,%eax
 135:	21 01                	and    %eax,(%rcx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 137:	3b 0b                	cmp    (%rbx),%ecx
 139:	39 0b                	cmp    %ecx,(%rbx)
 13b:	49 13 02             	adc    (%r10),%rax
 13e:	17                   	(bad)  
 13f:	b7 42                	mov    $0x42,%bh
 141:	17                   	(bad)  
 142:	00 00                	add    %al,(%rax)
 144:	18 05 00 03 0e 3a    	sbb    %al,0x3a0e0300(%rip)        # 3a0e044a <ConsoleKeyEventHandler(Input::Key, bool)+0x3a0dffda>
 14a:	21 01                	and    %eax,(%rcx)
 14c:	3b 0b                	cmp    (%rbx),%ecx
 14e:	39 0b                	cmp    %ecx,(%rbx)
 150:	49 13 02             	adc    (%r10),%rax
}
 153:	17                   	(bad)  
 154:	b7 42                	mov    $0x42,%bh
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 156:	17                   	(bad)  
 157:	00 00                	add    %al,(%rax)
 159:	19 48 01             	sbb    %ecx,0x1(%rax)
 15c:	7d 01                	jge    15f <.debug_abbrev+0x15f>
 15e:	7f 13                	jg     173 <.debug_abbrev+0x173>
{
 160:	00 00                	add    %al,(%rax)
 162:	1a 2e                	sbb    (%rsi),%ch
 164:	01 47 13             	add    %eax,0x13(%rdi)
 167:	3a 21                	cmp    (%rcx),%ah
 169:	01 3b                	add    %edi,(%rbx)
 16b:	0b 39                	or     (%rcx),%edi
    m_TextPresenter->Clear();
 16d:	21 06                	and    %eax,(%rsi)
 16f:	64 13 11             	adc    %fs:(%rcx),%edx
 172:	01 12                	add    %edx,(%rdx)
    RenderModifiers();
 174:	07                   	(bad)  
 175:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 179:	01 13                	add    %edx,(%rbx)
 17b:	00 00                	add    %al,(%rax)
 17d:	1b 2e                	sbb    (%rsi),%ebp
 17f:	01 31                	add    %esi,(%rcx)
 181:	13 6e 0e             	adc    0xe(%rsi),%ebp
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 184:	64 13 11             	adc    %fs:(%rcx),%edx
 187:	01 12                	add    %edx,(%rdx)
}
 189:	07                   	(bad)  
 18a:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 18e:	01 13                	add    %edx,(%rbx)
 190:	00 00                	add    %al,(%rax)
 192:	1c 2e                	sbb    $0x2e,%al
 194:	00 3f                	add    %bh,(%rdi)
 196:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
 199:	6e                   	outsb  %ds:(%rsi),(%dx)
 19a:	0e                   	(bad)  
 19b:	03 0e                	add    (%rsi),%ecx
 19d:	00 00                	add    %al,(%rax)
 19f:	1d 11 01 25 0e       	sbb    $0xe250111,%eax
 1a4:	13 0b                	adc    (%rbx),%ecx
 1a6:	03 1f                	add    (%rdi),%ebx
 1a8:	1b 1f                	sbb    (%rdi),%ebx
 1aa:	11 01                	adc    %eax,(%rcx)
 1ac:	12 07                	adc    (%rdi),%al
 1ae:	10 17                	adc    %dl,(%rdi)
  : m_TextPresenter(new Video::TextModePresenter()),
 1b0:	00 00                	add    %al,(%rax)
 1b2:	1e                   	(bad)  
 1b3:	24 00                	and    $0x0,%al
 1b5:	0b 0b                	or     (%rbx),%ecx
 1b7:	3e 0b 03             	ds or  (%rbx),%eax
Console::Console()
 1ba:	08 00                	or     %al,(%rax)
 1bc:	00 1f                	add    %bl,(%rdi)
 1be:	16                   	(bad)  
 1bf:	00 03                	add    %al,(%rbx)
 1c1:	0e                   	(bad)  
 1c2:	3a 0b                	cmp    (%rbx),%cl
  : m_TextPresenter(new Video::TextModePresenter()),
 1c4:	3b 0b                	cmp    (%rbx),%ecx
 1c6:	39 0b                	cmp    %ecx,(%rbx)
Console::Console()
 1c8:	49 13 00             	adc    (%r8),%rax
  : m_TextPresenter(new Video::TextModePresenter()),
 1cb:	00 20                	add    %ah,(%rax)
 1cd:	3b 00                	cmp    (%rax),%eax
 1cf:	03 0e                	add    (%rsi),%ecx
 1d1:	00 00                	add    %al,(%rax)
 1d3:	21 04 01             	and    %eax,(%rcx,%rax,1)
 1d6:	03 08                	add    (%rax),%ecx
 1d8:	3e 0b 0b             	ds or  (%rbx),%ecx
 1db:	0b 49 13             	or     0x13(%rcx),%ecx
 1de:	3a 0b                	cmp    (%rbx),%cl
 1e0:	3b 0b                	cmp    (%rbx),%ecx
    m_Buffers(new uint8_t[23 * 80]),
 1e2:	39 0b                	cmp    %ecx,(%rbx)
 1e4:	01 13                	add    %edx,(%rbx)
 1e6:	00 00                	add    %al,(%rax)
 1e8:	22 04 01             	and    (%rcx,%rax,1),%al
 1eb:	03 0e                	add    (%rsi),%ecx
 1ed:	3e 0b 0b             	ds or  (%rbx),%ecx
    m_KeyModifiers(0)
 1f0:	0b 49 13             	or     0x13(%rcx),%ecx
 1f3:	3a 0b                	cmp    (%rbx),%cl
 1f5:	3b 0b                	cmp    (%rbx),%ecx
    m_Buffers(new uint8_t[23 * 80]),
 1f7:	39 0b                	cmp    %ecx,(%rbx)
    Refresh();
 1f9:	01 13                	add    %edx,(%rbx)
 1fb:	00 00                	add    %al,(%rax)
    m_Buffers(new uint8_t[23 * 80]),
 1fd:	23 2e                	and    (%rsi),%ebp
 1ff:	01 3f                	add    %edi,(%rdi)
    m_OffsetX(0),
 201:	19 03                	sbb    %eax,(%rbx)
 203:	0e                   	(bad)  
 204:	3a 0b                	cmp    (%rbx),%cl
 206:	3b 0b                	cmp    (%rbx),%ecx
 208:	39 0b                	cmp    %ecx,(%rbx)
}
 20a:	6e                   	outsb  %ds:(%rsi),(%dx)
    Refresh();
 20b:	0e                   	(bad)  
 20c:	49 13 3c 19          	adc    (%r9,%rbx,1),%rdi
 210:	00 00                	add    %al,(%rax)
 212:	24 13                	and    $0x13,%al
 214:	01 03                	add    %eax,(%rbx)
 216:	0e                   	(bad)  
 217:	0b 0b                	or     (%rbx),%ecx
 219:	3a 0b                	cmp    (%rbx),%cl
 21b:	3b 0b                	cmp    (%rbx),%ecx
 21d:	39 0b                	cmp    %ecx,(%rbx)
 21f:	01 13                	add    %edx,(%rbx)
{
 221:	00 00                	add    %al,(%rax)
 223:	25 02 01 03 0e       	and    $0xe030102,%eax
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 228:	3c 19                	cmp    $0x19,%al
 22a:	00 00                	add    %al,(%rax)
 22c:	26 2e 01 3f          	es cs add %edi,(%rdi)
{
 230:	19 03                	sbb    %eax,(%rbx)
 232:	0e                   	(bad)  
 233:	3a 0b                	cmp    (%rbx),%cl
 235:	3b 0b                	cmp    (%rbx),%ecx
 237:	39 0b                	cmp    %ecx,(%rbx)
 239:	6e                   	outsb  %ds:(%rsi),(%dx)
 23a:	0e                   	(bad)  
 23b:	32 0b                	xor    (%rbx),%cl
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 23d:	3c 19                	cmp    $0x19,%al
 23f:	64 13 20             	adc    %fs:(%rax),%esp
 242:	0b 00                	or     (%rax),%eax
 244:	00 27                	add    %ah,(%rdi)
 246:	02 01                	add    (%rcx),%al
 248:	03 0e                	add    (%rsi),%ecx
 24a:	0b 0b                	or     (%rbx),%ecx
 24c:	3a 0b                	cmp    (%rbx),%cl
 24e:	3b 0b                	cmp    (%rbx),%ecx
 250:	39 0b                	cmp    %ecx,(%rbx)
 252:	01 13                	add    %edx,(%rbx)
 254:	00 00                	add    %al,(%rax)
 256:	28 2e                	sub    %ch,(%rsi)
 258:	01 3f                	add    %edi,(%rdi)
 25a:	19 03                	sbb    %eax,(%rbx)
 25c:	0e                   	(bad)  
 25d:	3a 0b                	cmp    (%rbx),%cl
 25f:	3b 0b                	cmp    (%rbx),%ecx
 261:	39 0b                	cmp    %ecx,(%rbx)
    if (++m_OffsetX >= 80)
 263:	6e                   	outsb  %ds:(%rsi),(%dx)
 264:	0e                   	(bad)  
 265:	49 13 32             	adc    (%r10),%rsi
    m_LineLength++;
 268:	0b 3c 19             	or     (%rcx,%rbx,1),%edi
 26b:	64 13 01             	adc    %fs:(%rcx),%eax
    if (++m_OffsetX >= 80)
 26e:	13 00                	adc    (%rax),%eax
 270:	00 29                	add    %ch,(%rcx)
 272:	2e 01 3f             	cs add %edi,(%rdi)
 275:	19 03                	sbb    %eax,(%rbx)
 277:	0e                   	(bad)  
 278:	3a 0b                	cmp    (%rbx),%cl
 27a:	3b 0b                	cmp    (%rbx),%ecx
 27c:	39 0b                	cmp    %ecx,(%rbx)
 27e:	6e                   	outsb  %ds:(%rsi),(%dx)
 27f:	0e                   	(bad)  
        if (m_OffsetY >= 22)
 280:	32 0b                	xor    (%rbx),%cl
 282:	3c 19                	cmp    $0x19,%al
 284:	64 13 00             	adc    %fs:(%rax),%eax
        m_OffsetX = 0;
 287:	00 2a                	add    %ch,(%rdx)
 289:	34 00                	xor    $0x0,%al
 28b:	03 0e                	add    (%rsi),%ecx
        if (m_OffsetY >= 22)
 28d:	3a 0b                	cmp    (%rbx),%cl
 28f:	3b 0b                	cmp    (%rbx),%ecx
        } else m_OffsetY++;
 291:	39 0b                	cmp    %ecx,(%rbx)
 293:	49 13 3f             	adc    (%r15),%rdi
 296:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
 299:	00 00                	add    %al,(%rax)
 29b:	2b 3a                	sub    (%rdx),%edi
 29d:	00 3a                	add    %bh,(%rdx)
 29f:	0b 3b                	or     (%rbx),%edi
            m_TextPresenter->MoveUp();
 2a1:	0b 39                	or     (%rcx),%edi
 2a3:	0b 18                	or     (%rax),%ebx
 2a5:	13 00                	adc    (%rax),%eax
 2a7:	00 2c 2e             	add    %ch,(%rsi,%rbp,1)
 2aa:	01 31                	add    %esi,(%rcx)
 2ac:	13 6e 0e             	adc    0xe(%rsi),%ebp
 2af:	64 13 01             	adc    %fs:(%rcx),%eax
            RenderModifiers();
 2b2:	13 00                	adc    (%rax),%eax
 2b4:	00 2d 05 00 03 08    	add    %ch,0x8030005(%rip)        # 80302bf <ConsoleKeyEventHandler(Input::Key, bool)+0x802fe4f>
            RenderModifiers();
 2ba:	3a 0b                	cmp    (%rbx),%cl
 2bc:	3b 0b                	cmp    (%rbx),%ecx
 2be:	39 0b                	cmp    %ecx,(%rbx)
 2c0:	49 13 00             	adc    (%r8),%rax
 2c3:	00 2e                	add    %ch,(%rsi)
 2c5:	0b 01                	or     (%rcx),%eax
 2c7:	55                   	push   %rbp
 2c8:	17                   	(bad)  
 2c9:	00 00                	add    %al,(%rax)
 2cb:	2f                   	(bad)  
 2cc:	34 00                	xor    $0x0,%al
 2ce:	03 08                	add    (%rax),%ecx
{
 2d0:	3a 0b                	cmp    (%rbx),%cl
    switch (key)
 2d2:	3b 0b                	cmp    (%rbx),%ecx
{
 2d4:	39 0b                	cmp    %ecx,(%rbx)
 2d6:	49 13 02             	adc    (%r10),%rax
 2d9:	17                   	(bad)  
 2da:	b7 42                	mov    $0x42,%bh
 2dc:	17                   	(bad)  
 2dd:	00 00                	add    %al,(%rax)
 2df:	30 05 00 03 0e 49    	xor    %al,0x490e0300(%rip)        # 490e05e5 <ConsoleKeyEventHandler(Input::Key, bool)+0x490e0175>
    switch (key)
 2e5:	13 34 19             	adc    (%rcx,%rbx,1),%esi
 2e8:	02 18                	add    (%rax),%bl
 2ea:	00 00                	add    %al,(%rax)
 2ec:	31 05 00 31 13 02    	xor    %eax,0x2133100(%rip)        # 21333f2 <ConsoleKeyEventHandler(Input::Key, bool)+0x2132f82>
 2f2:	18 00                	sbb    %al,(%rax)
 2f4:	00 32                	add    %dh,(%rdx)
 2f6:	2e 01 3f             	cs add %edi,(%rdi)
 2f9:	19 03                	sbb    %eax,(%rbx)
        char code = ApplyModifiers(key, m_KeyModifiers);
 2fb:	0e                   	(bad)  
 2fc:	3a 0b                	cmp    (%rbx),%cl
 2fe:	3b 0b                	cmp    (%rbx),%ecx
 300:	39 0b                	cmp    %ecx,(%rbx)
 302:	6e                   	outsb  %ds:(%rsi),(%dx)
 303:	0e                   	(bad)  
 304:	11 01                	adc    %eax,(%rcx)
 306:	12 07                	adc    (%rdi),%al
 308:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 30c:	01 13                	add    %edx,(%rbx)
        if (!code || !isPressed || m_LineLength == 255) break;
 30e:	00 00                	add    %al,(%rax)
 310:	33 2e                	xor    (%rsi),%ebp
 312:	01 31                	add    %esi,(%rcx)
 314:	13 6e 0e             	adc    0xe(%rsi),%ebp
 317:	11 01                	adc    %eax,(%rcx)
 319:	12 07                	adc    (%rdi),%al
 31b:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 31f:	01 13                	add    %edx,(%rbx)
 321:	00 00                	add    %al,(%rax)
 323:	34 1d                	xor    $0x1d,%al
}
 325:	01 31                	add    %esi,(%rcx)
 327:	13 52 01             	adc    0x1(%rdx),%edx
 32a:	b8 42 0b 55 17       	mov    $0x17550b42,%eax
 32f:	58                   	pop    %rax
            if (m_KeyModifiers & KeyModifiersCapsLock)
 330:	0b 59 0b             	or     0xb(%rcx),%ebx
 333:	57                   	push   %rdi
 334:	0b 01                	or     (%rcx),%eax
            m_KeyModifiers |= KeyModifiersShift;
 336:	13 00                	adc    (%rax),%eax
 338:	00 35 05 00 31 13    	add    %dh,0x13310005(%rip)        # 13310343 <ConsoleKeyEventHandler(Input::Key, bool)+0x1330fed3>
 33e:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_loclists:

0000000000000000 <.debug_loclists>:
}
   0:	44 03 00             	add    (%rax),%r8d
   3:	00 05 00 08 00 00    	add    %al,0x800(%rip)        # 809 <ConsoleKeyEventHandler(Input::Key, bool)+0x399>
	...
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	00 00                	add    %al,(%rax)
  23:	00 04 d0             	add    %al,(%rax,%rdx,8)
  26:	05 de 05 01 55       	add    $0x550105de,%eax
  2b:	04 de                	add    $0xde,%al
  2d:	05 a9 06 01 5c       	add    $0x5c0106a9,%eax
  32:	04 a9                	add    $0xa9,%al
  34:	06                   	(bad)  
{
  35:	ab                   	stos   %eax,%es:(%rdi)
  36:	06                   	(bad)  
  37:	04 a3                	add    $0xa3,%al
  39:	01 55 9f             	add    %edx,-0x61(%rbp)
  3c:	04 ab                	add    $0xab,%al
  3e:	06                   	(bad)  
  3f:	d9 06                	flds   (%rsi)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  41:	01 5c 04 d9          	add    %ebx,-0x27(%rsp,%rax,1)
  45:	06                   	(bad)  
  46:	db 06                	fildl  (%rsi)
  48:	01 55 04             	add    %edx,0x4(%rbp)
{
  4b:	db 06                	fildl  (%rsi)
  4d:	dc 06                	faddl  (%rsi)
  4f:	04 a3                	add    $0xa3,%al
  51:	01 55 9f             	add    %edx,-0x61(%rbp)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  54:	04 dc                	add    $0xdc,%al
  56:	06                   	(bad)  
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  57:	c6 07 01             	movb   $0x1,(%rdi)
  5a:	5c                   	pop    %rsp
  5b:	04 c6                	add    $0xc6,%al
  5d:	07                   	(bad)  
  5e:	c8 07 01 55          	enter  $0x107,$0x55
  62:	04 c8                	add    $0xc8,%al
  64:	07                   	(bad)  
  65:	c9                   	leave  
  66:	07                   	(bad)  
  67:	04 a3                	add    $0xa3,%al
  69:	01 55 9f             	add    %edx,-0x61(%rbp)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6c:	04 c9                	add    $0xc9,%al
  6e:	07                   	(bad)  
  6f:	91                   	xchg   %eax,%ecx
  70:	08 01                	or     %al,(%rcx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  72:	5c                   	pop    %rsp
  73:	04 91                	add    $0x91,%al
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  75:	08 b3 08 04 a3 01    	or     %dh,0x1a30408(%rbx)
  7b:	55                   	push   %rbp
  7c:	9f                   	lahf   
  7d:	04 b3                	add    $0xb3,%al
  7f:	08 e7                	or     %ah,%bh
  81:	08 01                	or     %al,(%rcx)
  83:	5c                   	pop    %rsp
	...
  8c:	01 01                	add    %eax,(%rcx)
	...
  9e:	00 04 d0             	add    %al,(%rax,%rdx,8)
  a1:	05 81 06 01 54       	add    $0x54010681,%eax
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a6:	04 81                	add    $0x81,%al
  a8:	06                   	(bad)  
  a9:	8c 06                	mov    %es,(%rsi)
  ab:	01 55 04             	add    %edx,0x4(%rbp)
  ae:	8c 06                	mov    %es,(%rsi)
  b0:	ab                   	stos   %eax,%es:(%rdi)
  b1:	06                   	(bad)  
  b2:	04 a3                	add    $0xa3,%al
  b4:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  b8:	ab                   	stos   %eax,%es:(%rdi)
  b9:	06                   	(bad)  
  ba:	c8 06 01 54          	enter  $0x106,$0x54
  be:	04 c8                	add    $0xc8,%al
  c0:	06                   	(bad)  
  c1:	dc 06                	faddl  (%rsi)
  c3:	04 a3                	add    $0xa3,%al
  c5:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  c9:	dc 06                	faddl  (%rsi)
  cb:	b5 07                	mov    $0x7,%ch
  cd:	01 54 04 b5          	add    %edx,-0x4b(%rsp,%rax,1)
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d1:	07                   	(bad)  
  d2:	c9                   	leave  
  d3:	07                   	(bad)  
  d4:	04 a3                	add    $0xa3,%al
  d6:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  da:	c9                   	leave  
  db:	07                   	(bad)  
  dc:	d8 07                	fadds  (%rdi)
  de:	01 54 04 d8          	add    %edx,-0x28(%rsp,%rax,1)
  e2:	07                   	(bad)  
  e3:	de 07                	fiadds (%rdi)
  e5:	04 a3                	add    $0xa3,%al
  e7:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
  eb:	de 07                	fiadds (%rdi)
  ed:	8a 08                	mov    (%rax),%cl
  ef:	01 54 04 8a          	add    %edx,-0x76(%rsp,%rax,1)
  f3:	08 c0                	or     %al,%al
  f5:	08 04 a3             	or     %al,(%rbx,%riz,4)
  f8:	01 54 9f 04          	add    %edx,0x4(%rdi,%rbx,4)
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  fc:	c0 08 cb             	rorb   $0xcb,(%rax)
  ff:	08 01                	or     %al,(%rcx)
 101:	54                   	push   %rsp
 102:	04 cb                	add    $0xcb,%al
 104:	08 e7                	or     %ah,%bh
 106:	08 04 a3             	or     %al,(%rbx,%riz,4)
 109:	01 54 9f 00          	add    %edx,0x0(%rdi,%rbx,4)
	...
}
 129:	04 d0                	add    $0xd0,%al
 12b:	05 8c 06 01 51       	add    $0x5101068c,%eax
 130:	04 8c                	add    $0x8c,%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 132:	06                   	(bad)  
 133:	ab                   	stos   %eax,%es:(%rdi)
}
 134:	06                   	(bad)  
 135:	04 a3                	add    $0xa3,%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 137:	01 51 9f             	add    %edx,-0x61(%rcx)
 13a:	04 ab                	add    $0xab,%al
 13c:	06                   	(bad)  
 13d:	c3                   	ret    
 13e:	06                   	(bad)  
 13f:	01 51 04             	add    %edx,0x4(%rcx)
 142:	c3                   	ret    
 143:	06                   	(bad)  
 144:	dc 06                	faddl  (%rsi)
}
 146:	04 a3                	add    $0xa3,%al
 148:	01 51 9f             	add    %edx,-0x61(%rcx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 14b:	04 dc                	add    $0xdc,%al
 14d:	06                   	(bad)  
 14e:	9a                   	(bad)  
 14f:	07                   	(bad)  
 150:	01 51 04             	add    %edx,0x4(%rcx)
}
 153:	9a                   	(bad)  
 154:	07                   	(bad)  
 155:	ac                   	lods   %ds:(%rsi),%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 156:	07                   	(bad)  
 157:	04 a3                	add    $0xa3,%al
 159:	01 51 9f             	add    %edx,-0x61(%rcx)
 15c:	04 ac                	add    $0xac,%al
 15e:	07                   	(bad)  
 15f:	b5 07                	mov    $0x7,%ch
{
 161:	01 51 04             	add    %edx,0x4(%rcx)
 164:	b5 07                	mov    $0x7,%ch
 166:	c9                   	leave  
 167:	07                   	(bad)  
 168:	04 a3                	add    $0xa3,%al
 16a:	01 51 9f             	add    %edx,-0x61(%rcx)
    m_TextPresenter->Clear();
 16d:	04 c9                	add    $0xc9,%al
 16f:	07                   	(bad)  
 170:	d8 07                	fadds  (%rdi)
 172:	01 51 04             	add    %edx,0x4(%rcx)
    RenderModifiers();
 175:	d8 07                	fadds  (%rdi)
 177:	de 07                	fiadds (%rdi)
 179:	04 a3                	add    $0xa3,%al
 17b:	01 51 9f             	add    %edx,-0x61(%rcx)
 17e:	04 de                	add    $0xde,%al
 180:	07                   	(bad)  
 181:	8a 08                	mov    (%rax),%cl
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 183:	01 51 04             	add    %edx,0x4(%rcx)
 186:	8a 08                	mov    (%rax),%cl
 188:	c0 08 04             	rorb   $0x4,(%rax)
}
 18b:	a3 01 51 9f 04 c0 08 	movabs %eax,0x8cb08c0049f5101
 192:	cb 08 
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 194:	01 51 04             	add    %edx,0x4(%rcx)
 197:	cb                   	lret   
 198:	08 e7                	or     %ah,%bh
 19a:	08 04 a3             	or     %al,(%rbx,%riz,4)
 19d:	01 51 9f             	add    %edx,-0x61(%rcx)
 1a0:	00 00                	add    %al,(%rax)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	00 04 8d 06 a5 06 01 	add    %al,0x106a506(,%rcx,4)
}
 1ab:	50                   	push   %rax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 1ac:	04 b3                	add    $0xb3,%al
 1ae:	08 c0                	or     %al,%al
  : m_TextPresenter(new Video::TextModePresenter()),
 1b0:	08 01                	or     %al,(%rcx)
 1b2:	50                   	push   %rax
 1b3:	00 00                	add    %al,(%rax)
 1b5:	00 00                	add    %al,(%rax)
 1b7:	00 00                	add    %al,(%rax)
 1b9:	00 04 20             	add    %al,(%rax,%riz,1)
Console::Console()
 1bc:	5a                   	pop    %rdx
 1bd:	01 55 04             	add    %edx,0x4(%rbp)
 1c0:	5a                   	pop    %rdx
 1c1:	b1 02                	mov    $0x2,%cl
  : m_TextPresenter(new Video::TextModePresenter()),
 1c3:	01 53 04             	add    %edx,0x4(%rbx)
 1c6:	b1 02                	mov    $0x2,%cl
Console::Console()
 1c8:	d8 02                	fadds  (%rdx)
  : m_TextPresenter(new Video::TextModePresenter()),
 1ca:	04 a3                	add    $0xa3,%al
 1cc:	01 55 9f             	add    %edx,-0x61(%rbp)
 1cf:	00 00                	add    %al,(%rax)
 1d1:	00 04 57             	add    %al,(%rdi,%rdx,2)
 1d4:	78 0a                	js     1e0 <.debug_loclists+0x1e0>
 1d6:	7d 00                	jge    1d8 <.debug_loclists+0x1d8>
 1d8:	38 1a                	cmp    %bl,(%rdx)
 1da:	08 ff                	or     %bh,%bh
 1dc:	1a 30                	sbb    (%rax),%dh
 1de:	2e 9f                	cs lahf 
 1e0:	00 00                	add    %al,(%rax)
    m_Buffers(new uint8_t[23 * 80]),
 1e2:	00 04 6a             	add    %al,(%rdx,%rbp,2)
 1e5:	d5                   	(bad)  
 1e6:	02 08                	add    (%rax),%cl
 1e8:	7f 00                	jg     1ea <.debug_loclists+0x1ea>
 1ea:	08 ff                	or     %bh,%bh
 1ec:	1a 30                	sbb    (%rax),%dh
 1ee:	2e 9f                	cs lahf 
    m_KeyModifiers(0)
 1f0:	00 00                	add    %al,(%rax)
 1f2:	00 00                	add    %al,(%rax)
 1f4:	00 04 71             	add    %al,(%rcx,%rsi,2)
    m_Buffers(new uint8_t[23 * 80]),
 1f7:	73 08                	jae    201 <.debug_loclists+0x201>
    Refresh();
 1f9:	70 00                	jo     1fb <.debug_loclists+0x1fb>
 1fb:	08 ff                	or     %bh,%bh
    m_Buffers(new uint8_t[23 * 80]),
 1fd:	1a 30                	sbb    (%rax),%dh
 1ff:	2e 9f                	cs lahf 
    m_OffsetX(0),
 201:	04 73                	add    $0x73,%al
 203:	d8 02                	fadds  (%rdx)
 205:	08 91 bf 7f 94 01    	or     %dl,0x1947fbf(%rcx)
    Refresh();
 20b:	30 2e                	xor    %ch,(%rsi)
 20d:	9f                   	lahf   
 20e:	00 01                	add    %al,(%rcx)
 210:	00 04 71             	add    %al,(%rcx,%rsi,2)
 213:	c9                   	leave  
 214:	02 08                	add    (%rax),%cl
 216:	7e 00                	jle    218 <.debug_loclists+0x218>
 218:	08 ff                	or     %bh,%bh
 21a:	1a 30                	sbb    (%rax),%dh
 21c:	2e 9f                	cs lahf 
 21e:	00 00                	add    %al,(%rax)
{
 220:	00 00                	add    %al,(%rax)
 222:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 224:	00 04 e0             	add    %al,(%rax,%riz,8)
 227:	02 ef                	add    %bh,%ch
 229:	02 01                	add    (%rcx),%al
 22b:	55                   	push   %rbp
 22c:	04 ef                	add    $0xef,%al
 22e:	02 8d 03 01 53 04    	add    0x4530103(%rbp),%cl
{
 234:	8d 03                	lea    (%rbx),%eax
 236:	ae                   	scas   %es:(%rdi),%al
 237:	03 04 a3             	add    (%rbx,%riz,4),%eax
 23a:	01 55 9f             	add    %edx,-0x61(%rbp)
	...
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 245:	00 04 b0             	add    %al,(%rax,%rsi,4)
 248:	03 c8                	add    %eax,%ecx
 24a:	03 01                	add    (%rcx),%eax
 24c:	55                   	push   %rbp
 24d:	04 c8                	add    $0xc8,%al
 24f:	03 8b 04 01 5c 04    	add    0x45c0104(%rbx),%ecx
 255:	8b 04 97             	mov    (%rdi,%rdx,4),%eax
 258:	04 01                	add    $0x1,%al
 25a:	55                   	push   %rbp
 25b:	04 97                	add    $0x97,%al
 25d:	04 98                	add    $0x98,%al
 25f:	04 04                	add    $0x4,%al
 261:	a3 01 55 9f 00 00 00 	movabs %eax,0x9f5501
 268:	00 00 
    m_LineLength++;
 26a:	00 00                	add    %al,(%rax)
 26c:	04 f0                	add    $0xf0,%al
    if (++m_OffsetX >= 80)
 26e:	08 83 09 01 55 04    	or     %al,0x4550109(%rbx)
 274:	83 09 8e             	orl    $0xffffff8e,(%rcx)
 277:	09 01                	or     %eax,(%rcx)
 279:	54                   	push   %rsp
 27a:	04 8e                	add    $0x8e,%al
 27c:	09 8f 09 04 a3 01    	or     %ecx,0x1a30409(%rdi)
        if (m_OffsetY >= 22)
 282:	55                   	push   %rbp
 283:	9f                   	lahf   
 284:	00 00                	add    %al,(%rax)
        m_OffsetX = 0;
 286:	00 00                	add    %al,(%rax)
 288:	00 00                	add    %al,(%rax)
 28a:	00 04 f0             	add    %al,(%rax,%rsi,8)
        if (m_OffsetY >= 22)
 28d:	08 80 09 01 54 04    	or     %al,0x4540109(%rax)
        } else m_OffsetY++;
 293:	80 09 8e             	orb    $0x8e,(%rcx)
 296:	09 01                	or     %eax,(%rcx)
 298:	51                   	push   %rcx
 299:	04 8e                	add    $0x8e,%al
 29b:	09 8f 09 04 a3 01    	or     %ecx,0x1a30409(%rdi)
            m_TextPresenter->MoveUp();
 2a1:	54                   	push   %rsp
 2a2:	9f                   	lahf   
 2a3:	00 00                	add    %al,(%rax)
 2a5:	00 00                	add    %al,(%rax)
 2a7:	00 04 fa             	add    %al,(%rdx,%rdi,8)
 2aa:	08 8d 09 02 70 00    	or     %cl,0x700209(%rbp)
            RenderModifiers();
 2b0:	04 8d                	add    $0x8d,%al
 2b2:	09 8e 09 01 55 00    	or     %ecx,0x550109(%rsi)
	...
 2c8:	04 a0                	add    $0xa0,%al
 2ca:	04 cb                	add    $0xcb,%al
 2cc:	04 01                	add    $0x1,%al
 2ce:	55                   	push   %rbp
 2cf:	04 cb                	add    $0xcb,%al
    switch (key)
 2d1:	04 fe                	add    $0xfe,%al
 2d3:	04 01                	add    $0x1,%al
{
 2d5:	5c                   	pop    %rsp
 2d6:	04 fe                	add    $0xfe,%al
 2d8:	04 80                	add    $0x80,%al
 2da:	05 04 a3 01 55       	add    $0x5501a304,%eax
 2df:	9f                   	lahf   
 2e0:	04 80                	add    $0x80,%al
    switch (key)
 2e2:	05 9c 05 01 5c       	add    $0x5c01059c,%eax
 2e7:	04 9c                	add    $0x9c,%al
 2e9:	05 9e 05 04 a3       	add    $0xa304059e,%eax
 2ee:	01 55 9f             	add    %edx,-0x61(%rbp)
 2f1:	04 9e                	add    $0x9e,%al
 2f3:	05 b7 05 01 5c       	add    $0x5c0105b7,%eax
 2f8:	04 b7                	add    $0xb7,%al
 2fa:	05 c3 05 01 55       	add    $0x550105c3,%eax
        char code = ApplyModifiers(key, m_KeyModifiers);
 2ff:	04 c3                	add    $0xc3,%al
 301:	05 c4 05 04 a3       	add    $0xa30405c4,%eax
 306:	01 55 9f             	add    %edx,-0x61(%rbp)
 309:	00 00                	add    %al,(%rax)
 30b:	00 00                	add    %al,(%rax)
        if (!code || !isPressed || m_LineLength == 255) break;
 30d:	00 04 a0             	add    %al,(%rax,%riz,4)
 310:	04 c8                	add    $0xc8,%al
 312:	04 01                	add    $0x1,%al
 314:	54                   	push   %rsp
 315:	04 c8                	add    $0xc8,%al
 317:	04 c4                	add    $0xc4,%al
 319:	05 04 a3 01 54       	add    $0x5401a304,%eax
 31e:	9f                   	lahf   
	...
}
 327:	00 04 80             	add    %al,(%rax,%rax,4)
 32a:	05 98 05 01 5c       	add    $0x5c010598,%eax
 32f:	04 9e                	add    $0x9e,%al
            if (m_KeyModifiers & KeyModifiersCapsLock)
 331:	05 b7 05 01 5c       	add    $0x5c0105b7,%eax
            m_KeyModifiers |= KeyModifiersShift;
 336:	04 b7                	add    $0xb7,%al
 338:	05 c3 05 01 55       	add    $0x550105c3,%eax
 33d:	04 c3                	add    $0xc3,%al
 33f:	05 c4 05 04 a3       	add    $0xa30405c4,%eax
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 344:	01 55 9f             	add    %edx,-0x61(%rbp)
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
}
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
	...
}
  18:	8f 04 00             	pop    (%rax,%rax,1)
	...

Disassembly of section .debug_rnglists:

0000000000000000 <.debug_rnglists>:
}
   0:	3c 00                	cmp    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	05 00 08 00 00       	add    $0x800,%eax
   9:	00 00                	add    %al,(%rax)
   b:	00 04 80             	add    %al,(%rax,%rax,4)
   e:	05 98 05 04 a0       	add    $0xa0040598,%eax
}
  13:	05 b3 05 04 b7       	add    $0xb70405b3,%eax
  18:	05 c1 05 04 c2       	add    $0xc20405c1,%eax
  1d:	05 c4 05 00 04       	add    $0x40005c4,%eax
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  22:	fb                   	sti    
  23:	05 a5 06 04 b0       	add    $0xb00406a5,%eax
  28:	06                   	(bad)  
  29:	d5                   	(bad)  
  2a:	06                   	(bad)  
  2b:	04 da                	add    $0xda,%al
  2d:	06                   	(bad)  
  2e:	c2 07 04             	ret    $0x407
  31:	c7 07 8d 08 04 91    	movl   $0x9104088d,(%rdi)
{
  37:	08 99 08 04 9a 08    	or     %bl,0x89a0408(%rcx)
  3d:	e7 08                	out    %eax,$0x8
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
}
   0:	4a 03 00             	rex.WX add (%rax),%rax
   3:	00 05 00 08 00 53    	add    %al,0x53000800(%rip)        # 53000809 <ConsoleKeyEventHandler(Input::Key, bool)+0x53000399>
   9:	00 00                	add    %al,(%rax)
   b:	00 01                	add    %al,(%rcx)
   d:	01 01                	add    %eax,(%rcx)
   f:	fb                   	sti    
}
  10:	0e                   	(bad)  
  11:	0d 00 01 01 01       	or     $0x1010100,%eax
  16:	01 00                	add    %eax,(%rax)
  18:	00 00                	add    %al,(%rax)
  1a:	01 00                	add    %eax,(%rax)
  1c:	00 01                	add    %al,(%rcx)
  1e:	01 01                	add    %eax,(%rcx)
{
  20:	1f                   	(bad)  
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	05 00 00 00 00       	add    $0x0,%eax
	...
{
  36:	02 01                	add    (%rcx),%al
  38:	1f                   	(bad)  
  39:	02 0f                	add    (%rdi),%cl
  3b:	07                   	(bad)  
  3c:	00 00                	add    %al,(%rax)
  3e:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  40:	01 00                	add    %eax,(%rax)
  42:	00 00                	add    %al,(%rax)
  44:	00 01                	add    %al,(%rcx)
  46:	00 00                	add    %al,(%rax)
  48:	00 00                	add    %al,(%rax)
{
  4a:	02 00                	add    (%rax),%al
  4c:	00 00                	add    %al,(%rax)
  4e:	00 03                	add    %al,(%rbx)
  50:	00 00                	add    %al,(%rax)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  52:	00 00                	add    %al,(%rax)
  54:	03 00                	add    (%rax),%eax
  56:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  58:	00 02                	add    %al,(%rdx)
  5a:	00 00                	add    %al,(%rax)
  5c:	00 00                	add    %al,(%rax)
  5e:	04 05                	add    $0x5,%al
  60:	01 00                	add    %eax,(%rax)
  62:	09 02                	or     %eax,(%rdx)
	...
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6c:	03 16                	add    (%rsi),%edx
  6e:	01 06                	add    %eax,(%rsi)
  70:	15 06 f5 06 14       	adc    $0x1406f506,%eax
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  75:	06                   	(bad)  
  76:	03 0a                	add    (%rdx),%ecx
  78:	f2 05 05 13 05 01    	repnz add $0x1051305,%eax
  7e:	06                   	(bad)  
  7f:	11 05 1a 26 05 01    	adc    %eax,0x105261a(%rip)        # 105269f <ConsoleKeyEventHandler(Input::Key, bool)+0x105222f>
  85:	03 7a 08             	add    0x8(%rdx),%edi
  88:	3c 05                	cmp    $0x5,%al
  8a:	1a b2 05 01 03 7a    	sbb    0x7a030105(%rdx),%dh
  90:	9e                   	sahf   
  91:	05 11 83 05 05       	add    $0x5058311,%eax
  96:	06                   	(bad)  
  97:	59                   	pop    %rcx
  98:	06                   	(bad)  
  99:	16                   	(bad)  
  9a:	3c 06                	cmp    $0x6,%al
  9c:	ef                   	out    %eax,(%dx)
  9d:	75 14                	jne    b3 <.debug_line+0xb3>
  9f:	05 1a 06 01 05       	add    $0x501061a,%eax
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a4:	05 06 3d 05 1a       	add    $0x1a053d06,%eax
  a9:	06                   	(bad)  
  aa:	01 05 05 4a 05 1a    	add    %eax,0x1a054a05(%rip)        # 1a054ab5 <ConsoleKeyEventHandler(Input::Key, bool)+0x1a054645>
  b0:	3c 05                	cmp    $0x5,%al
  b2:	05 06 02 28 13       	add    $0x13280206,%eax
  b7:	05 1a 06 01 05       	add    $0x501061a,%eax
  bc:	05 4a 05 1a 3c       	add    $0x3c1a054a,%eax
  c1:	05 05 06 02 25       	add    $0x25020605,%eax
  c6:	13 05 1a 06 01 05    	adc    0x501061a(%rip),%eax        # 50106e6 <ConsoleKeyEventHandler(Input::Key, bool)+0x5010276>
  cc:	05 3c 05 1a 3c       	add    $0x3c1a053c,%eax
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d1:	05 05 06 02 24       	add    $0x24020605,%eax
  d6:	13 05 1a 06 01 05    	adc    0x501061a(%rip),%eax        # 50106f6 <ConsoleKeyEventHandler(Input::Key, bool)+0x5010286>
  dc:	05 3c 05 1a 3c       	add    $0x3c1a053c,%eax
  e1:	05 05 06 02 27       	add    $0x27020605,%eax
  e6:	13 05 01 06 3d 05    	adc    0x53d0601(%rip),%eax        # 53d06ed <ConsoleKeyEventHandler(Input::Key, bool)+0x53d027d>
  ec:	1a 49 05             	sbb    0x5(%rcx),%cl
  ef:	01 3d 05 1a 1f 05    	add    %edi,0x51f1a05(%rip)        # 51f1afa <ConsoleKeyEventHandler(Input::Key, bool)+0x51f168a>
  f5:	01 3d 05 1a 2d 05    	add    %edi,0x52d1a05(%rip)        # 52d1b00 <ConsoleKeyEventHandler(Input::Key, bool)+0x52d1690>
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  fb:	01 e5                	add    %esp,%ebp
  fd:	05 1a 49 05 01       	add    $0x105491a,%eax
 102:	9f                   	lahf   
 103:	2e 05 1a 1f 05 01    	cs add $0x1051f1a,%eax
 109:	06                   	(bad)  
 10a:	03 6e 9e             	add    -0x62(%rsi),%ebp
 10d:	05 05 13 05 01       	add    $0x1051305,%eax
 112:	06                   	(bad)  
 113:	11 05 05 bb 05 1b    	adc    %eax,0x1b05bb05(%rip)        # 1b05bc1e <ConsoleKeyEventHandler(Input::Key, bool)+0x1b05b7ae>
 119:	3c 05                	cmp    $0x5,%al
 11b:	05 06 59 05 14       	add    $0x14055906,%eax
 120:	06                   	(bad)  
 121:	01 05 05 06 e5 05    	add    %eax,0x5e50605(%rip)        # 5e5072c <ConsoleKeyEventHandler(Input::Key, bool)+0x5e502bc>
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 127:	1a 06                	sbb    (%rsi),%al
}
 129:	3c 05                	cmp    $0x5,%al
 12b:	01 3d 05 1a 49 05    	add    %edi,0x5491a05(%rip)        # 5491b36 <ConsoleKeyEventHandler(Input::Key, bool)+0x54916c6>
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 131:	01 08                	add    %ecx,(%rax)
 133:	c9                   	leave  
}
 134:	05 1a 1f 05 01       	add    $0x1051f1a,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 139:	06                   	(bad)  
 13a:	03 68 4a             	add    0x4a(%rax),%ebp
 13d:	05 32 06 13 05       	add    $0x5130632,%eax
 142:	01 9d 05 32 91 58    	add    %ebx,0x58913205(%rbp)
}
 148:	05 01 11 05 32       	add    $0x32051101,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 14d:	21 05 05 58 05 22    	and    %eax,0x22055805(%rip)        # 22055958 <ConsoleKeyEventHandler(Input::Key, bool)+0x220554e8>
}
 153:	08 2f                	or     %ch,(%rdi)
 155:	05 05 e7 05 22       	add    $0x2205e705,%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 15a:	63 05 01 34 05 0c    	movsxd 0xc053401(%rip),%eax        # c053561 <ConsoleKeyEventHandler(Input::Key, bool)+0xc0530f1>
{
 160:	1f                   	(bad)  
 161:	05 05 37 59 06       	add    $0x6593705,%eax
 166:	86 05 01 06 13 05    	xchg   %al,0x5130601(%rip)        # 513076d <ConsoleKeyEventHandler(Input::Key, bool)+0x51302fd>
    m_TextPresenter->Clear();
 16c:	0c 2d                	or     $0x2d,%al
 16e:	05 01 9f 05 0c       	add    $0xc059f01,%eax
 173:	1f                   	(bad)  
    RenderModifiers();
 174:	2e 05 01 06 00 09    	cs add $0x9000601,%eax
 17a:	02 00                	add    (%rax),%al
 17c:	00 00                	add    %al,(%rax)
 17e:	00 00                	add    %al,(%rax)
 180:	00 00                	add    %al,(%rax)
 182:	00 03                	add    %al,(%rbx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 184:	e6 00                	out    %al,$0x0
 186:	01 06                	add    %eax,(%rsi)
 188:	01 05 05 06 4b 05    	add    %eax,0x54b0605(%rip)        # 54b0793 <ConsoleKeyEventHandler(Input::Key, bool)+0x54b0323>
 18e:	1a 06                	sbb    (%rsi),%al
 190:	01 05 01 b9 05 2a    	add    %eax,0x2a05b901(%rip)        # 2a05ba97 <ConsoleKeyEventHandler(Input::Key, bool)+0x2a05b627>
 196:	bb 05 1a 66 05       	mov    $0x5661a05,%ebx
 19b:	05 66 05 1a 3c       	add    $0x3c1a0566,%eax
 1a0:	05 05 06 08 67       	add    $0x67080605,%eax
 1a5:	05 09 06 13 05       	add    $0x5130609,%eax
 1aa:	11 65 05             	adc    %esp,0x5(%rbp)
 1ad:	05 06 67 05 09       	add    $0x9056706,%eax
  : m_TextPresenter(new Video::TextModePresenter()),
 1b2:	06                   	(bad)  
 1b3:	01 05 05 3c 05 15    	add    %eax,0x15053c05(%rip)        # 15053dbe <ConsoleKeyEventHandler(Input::Key, bool)+0x1505394e>
 1b9:	4a 05 01 03 09 58    	rex.WX add $0x58090301,%rax
Console::Console()
 1bf:	4a 05 06 06 03 73    	rex.WX add $0x73030606,%rax
  : m_TextPresenter(new Video::TextModePresenter()),
 1c5:	2e 05 09 18 05 0d    	cs add $0xd051809,%eax
 1cb:	06                   	(bad)  
 1cc:	13 05 13 65 05 09    	adc    0x9056513(%rip),%eax        # 90566e5 <ConsoleKeyEventHandler(Input::Key, bool)+0x9056275>
 1d2:	06                   	(bad)  
 1d3:	67 05 10 4e 05 19    	addr32 add $0x19054e10,%eax
 1d9:	06                   	(bad)  
 1da:	01 82 05 01 14 4a    	add    %eax,0x4a140105(%rdx)
 1e0:	05 0d 06 46 05       	add    $0x546060d,%eax
    m_Buffers(new uint8_t[23 * 80]),
 1e5:	24 06                	and    $0x6,%al
 1e7:	01 05 0d 06 f3 05    	add    %eax,0x5f3060d(%rip)        # 5f307fa <ConsoleKeyEventHandler(Input::Key, bool)+0x5f3038a>
 1ed:	1c 06                	sbb    $0x6,%al
 1ef:	01 05 01 3f 05 1c    	add    %eax,0x1c053f01(%rip)        # 1c0540f6 <ConsoleKeyEventHandler(Input::Key, bool)+0x1c053c86>
    m_KeyModifiers(0)
 1f5:	47 05 01 a1 05 1c    	rex.RXB add $0x1c05a101,%eax
    Refresh();
 1fb:	1d 2e 05 01 06       	sbb    $0x601052e,%eax
    m_Buffers(new uint8_t[23 * 80]),
 200:	00 09                	add    %cl,(%rcx)
    m_OffsetX(0),
 202:	02 00                	add    (%rax),%al
 204:	00 00                	add    %al,(%rax)
 206:	00 00                	add    %al,(%rax)
 208:	00 00                	add    %al,(%rax)
}
 20a:	00 03                	add    %al,(%rbx)
    Refresh();
 20c:	b5 7f                	mov    $0x7f,%ch
 20e:	01 05 05 13 05 01    	add    %eax,0x1051305(%rip)        # 1051519 <ConsoleKeyEventHandler(Input::Key, bool)+0x10510a9>
 214:	06                   	(bad)  
}
 215:	11 05 05 21 05 01    	adc    %eax,0x1052105(%rip)        # 1052320 <ConsoleKeyEventHandler(Input::Key, bool)+0x1051eb0>
    Refresh();
 21b:	3b 9e 05 05 4b 06    	cmp    0x64b0505(%rsi),%ebx
{
 221:	03 37                	add    (%rdi),%esi
 223:	08 82 05 09 13 05    	or     %al,0x5130905(%rdx)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 229:	23 06                	and    (%rsi),%eax
 22b:	01 66 05             	add    %esp,0x5(%rsi)
 22e:	09 06                	or     %eax,(%rsi)
{
 230:	bb 05 21 00 02       	mov    $0x2002105,%ebx
 235:	04 01                	add    $0x1,%al
 237:	06                   	(bad)  
 238:	ba 00 02 04 01       	mov    $0x1040200,%edx
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 23d:	ba 05 01 17 4a       	mov    $0x4a170105,%edx
 242:	05 05 06 03 4c       	add    $0x4c030605,%eax
 247:	74 13                	je     25c <.debug_line+0x25c>
 249:	05 09 13 05 11       	add    $0x11051309,%eax
 24e:	06                   	(bad)  
 24f:	03 78 01             	add    0x1(%rax),%edi
 252:	05 1c 03 09 66       	add    $0x6609031c,%eax
 257:	05 20 03 78 c8       	add    $0xc8780320,%eax
 25c:	05 09 06 5b 03       	add    $0x35b0609,%eax
 261:	1c 01                	sbb    $0x1,%al
    if (++m_OffsetX >= 80)
 263:	05 18 06 01 05       	add    $0x5010618,%eax
    m_LineLength++;
 268:	01 03                	add    %eax,(%rbx)
 26a:	1a c8                	sbb    %al,%cl
 26c:	4a 05 18 03 66 20    	rex.WX add $0x20660318,%rax
    if (++m_OffsetX >= 80)
 272:	05 05 06 03 6e       	add    $0x6e030605,%eax
 277:	66 13 05 09 13 05 11 	adc    0x11051309(%rip),%ax        # 11051587 <ConsoleKeyEventHandler(Input::Key, bool)+0x11051117>
 27e:	06                   	(bad)  
 27f:	03 70 01             	add    0x1(%rax),%esi
        if (m_OffsetY >= 22)
 282:	05 1c 03 11 66       	add    $0x6611031c,%eax
        m_OffsetX = 0;
 287:	05 05 06 08 25       	add    $0x25080605,%eax
        if (m_OffsetY >= 22)
 28c:	13 05 09 13 05 11    	adc    0x11051309(%rip),%eax        # 1105159b <ConsoleKeyEventHandler(Input::Key, bool)+0x1105112b>
        } else m_OffsetY++;
 292:	06                   	(bad)  
 293:	03 68 01             	add    0x1(%rax),%ebp
 296:	05 1c 03 19 66       	add    $0x6619031c,%eax
 29b:	05 05 06 03 65       	add    $0x65030605,%eax
            m_TextPresenter->MoveUp();
 2a0:	08 20                	or     %ah,(%rax)
 2a2:	05 09 13 05 0d       	add    $0xd051309,%eax
 2a7:	4b 05 11 06 01 05    	rex.WXB add $0x5010611,%rax
 2ad:	20 67 05             	and    %ah,0x5(%rdi)
            RenderModifiers();
 2b0:	05 06 03 2d 08       	add    $0x82d0306,%eax
 2b5:	58                   	pop    %rax
 2b6:	05 09 13 05 10       	add    $0x10051309,%eax
            RenderModifiers();
 2bb:	06                   	(bad)  
 2bc:	01 60 05             	add    %esp,0x5(%rax)
 2bf:	01 cb                	add    %ecx,%ebx
 2c1:	4a 05 10 1d 05 05    	rex.WX add $0x5051d10,%rax
            RenderModifiers();
 2c7:	06                   	(bad)  
 2c8:	03 67 90             	add    -0x70(%rdi),%esp
 2cb:	05 09 13 05 1f       	add    $0x1f051309,%eax
{
 2d0:	06                   	(bad)  
    switch (key)
 2d1:	4a 58                	rex.WX pop %rax
 2d3:	05 05 06 77 05       	add    $0x5770605,%eax
{
 2d8:	09 13                	or     %edx,(%rbx)
 2da:	84 05 0d 06 14 05    	test   %al,0x514060d(%rip)        # 51408ed <ConsoleKeyEventHandler(Input::Key, bool)+0x514047d>
 2e0:	09 03                	or     %eax,(%rbx)
    switch (key)
 2e2:	78 66                	js     34a <.debug_line+0x34a>
 2e4:	05 16 50 05 09       	add    $0x9055016,%eax
 2e9:	06                   	(bad)  
 2ea:	67 05 13 06 01 05    	addr32 add $0x5010613,%eax
 2f0:	09 06                	or     %eax,(%rsi)
 2f2:	67 05 10 4e 05 19    	addr32 add $0x19054e10,%eax
 2f8:	06                   	(bad)  
 2f9:	01 05 09 06 83 05    	add    %eax,0x5830609(%rip)        # 5830908 <ConsoleKeyEventHandler(Input::Key, bool)+0x5830498>
        char code = ApplyModifiers(key, m_KeyModifiers);
 2ff:	2e 06                	cs (bad) 
 301:	01 05 01 03 0e 3c    	add    %eax,0x3c0e0301(%rip)        # 3c0e0608 <ConsoleKeyEventHandler(Input::Key, bool)+0x3c0e0198>
 307:	05 1e 03 72 4a       	add    $0x4a72031e,%eax
 30c:	05 01 03 0e 82       	add    $0x820e0301,%eax
        if (!code || !isPressed || m_LineLength == 255) break;
 311:	05 1e 03 72 20       	add    $0x2072031e,%eax
 316:	05 09 06 03 0b       	add    $0xb030609,%eax
 31b:	08 c8                	or     %cl,%al
 31d:	05 10 06 01 05       	add    $0x5010610,%eax
 322:	0d 06 03 72 82       	or     $0x82720306,%eax
}
 327:	05 24 06 01 05       	add    $0x5010624,%eax
 32c:	0d 06 bb 05 1c       	or     $0x1c05bb06,%eax
            if (m_KeyModifiers & KeyModifiersCapsLock)
 331:	06                   	(bad)  
 332:	01 05 24 e6 05 01    	add    %eax,0x105e624(%rip)        # 105e95c <ConsoleKeyEventHandler(Input::Key, bool)+0x105e4ec>
            m_KeyModifiers |= KeyModifiersShift;
 338:	06                   	(bad)  
 339:	03 9c 7f 08 4a 05 05 	add    0x5054a08(%rdi,%rdi,2),%ebx
 340:	13 14 05 17 06 01 9e 	adc    -0x61fef9e9(,%rax,1),%edx
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 347:	66 3c 9e             	data16 cmp $0x9e,%al
        RenderModifiers();
 34a:	2e 00 01             	cs add %al,(%rcx)
 34d:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
}
   0:	69 73 50 72 65 73 73 	imul   $0x73736572,0x50(%rbx),%esi
   7:	65 64 00 63 61       	gs add %ah,%fs:0x61(%rbx)
   c:	70 73                	jo     81 <.debug_str+0x81>
   e:	00 4d 69             	add    %cl,0x69(%rbp)
}
  11:	6e                   	outsb  %ds:(%rsi),(%dx)
  12:	75 73                	jne    87 <.debug_str+0x87>
  14:	00 48 6f             	add    %cl,0x6f(%rax)
  17:	6d                   	insl   (%dx),%es:(%rdi)
  18:	65 00 6d 5f          	add    %ch,%gs:0x5f(%rbp)
  1c:	4f                   	rex.WRXB
  1d:	66 66 73 65          	data16 data16 jae 86 <.debug_str+0x86>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	74 58                	je     7b <.debug_str+0x7b>
  23:	00 50 6f             	add    %dl,0x6f(%rax)
  26:	75 6e                	jne    96 <.debug_str+0x96>
  28:	64 00 41 70          	add    %al,%fs:0x70(%rcx)
  2c:	70 73                	jo     a1 <.debug_str+0xa1>
  2e:	00 44 6f 75          	add    %al,0x75(%rdi,%rbp,2)
  32:	62                   	(bad)  
  33:	6c                   	insb   (%dx),%es:(%rdi)
  34:	65 51                	gs push %rcx
{
  36:	75 6f                	jne    a7 <.debug_str+0xa7>
  38:	74 65                	je     9f <.debug_str+0x9f>
  3a:	00 41 72             	add    %al,0x72(%rcx)
  3d:	72 6f                	jb     ae <.debug_str+0xae>
  3f:	77 4c                	ja     8d <.debug_str+0x8d>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  41:	65 66 74 00          	gs data16 je 45 <.debug_str+0x45>
  45:	44 6f                	rex.R outsl %ds:(%rsi),(%dx)
  47:	6c                   	insb   (%dx),%es:(%rdi)
  48:	6c                   	insb   (%dx),%es:(%rdi)
  49:	61                   	(bad)  
{
  4a:	72 00                	jb     4c <.debug_str+0x4c>
  4c:	4c                   	rex.WR
  4d:	43 74 72             	rex.XB je c2 <.debug_str+0xc2>
  50:	6c                   	insb   (%dx),%es:(%rdi)
  51:	00 43 75             	add    %al,0x75(%rbx)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
  54:	72 73                	jb     c9 <.debug_str+0xc9>
  56:	6f                   	outsl  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  57:	72 55                	jb     ae <.debug_str+0xae>
  59:	70 00                	jo     5b <.debug_str+0x5b>
  5b:	57                   	push   %rdi
  5c:	61                   	(bad)  
  5d:	76 65                	jbe    c4 <.debug_str+0xc4>
  5f:	00 4b 65             	add    %cl,0x65(%rbx)
  62:	79 4d                	jns    b1 <.debug_str+0xb1>
  64:	6f                   	outsl  %ds:(%rsi),(%dx)
  65:	64 69 66 69 65 72 73 	imul   $0x41737265,%fs:0x69(%rsi),%esp
  6c:	41 
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6d:	6c                   	insb   (%dx),%es:(%rdi)
  6e:	74 00                	je     70 <.debug_str+0x70>
  70:	4e 75 6d             	rex.WRX jne e0 <.debug_str+0xe0>
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  73:	32 00                	xor    (%rax),%al
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  75:	6f                   	outsl  %ds:(%rsi),(%dx)
  76:	70 65                	jo     dd <.debug_str+0xdd>
  78:	72 61                	jb     db <.debug_str+0xdb>
  7a:	74 6f                	je     eb <.debug_str+0xeb>
  7c:	72 20                	jb     9e <.debug_str+0x9e>
  7e:	6e                   	outsb  %ds:(%rsi),(%dx)
  7f:	65 77 20             	gs ja  a2 <.debug_str+0xa2>
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	00 4d 65             	add    %cl,0x65(%rbp)
  87:	64 69 61 53 65 6c 65 	imul   $0x63656c65,%fs:0x53(%rcx),%esp
  8e:	63 
  8f:	74 00                	je     91 <.debug_str+0x91>
  91:	52                   	push   %rdx
  92:	69 67 68 74 42 72 61 	imul   $0x61724274,0x68(%rdi),%esp
  99:	63 65 00             	movsxd 0x0(%rbp),%esp
  9c:	7e 43                	jle    e1 <.debug_str+0xe1>
  9e:	6f                   	outsl  %ds:(%rsi),(%dx)
  9f:	6e                   	outsb  %ds:(%rsi),(%dx)
  a0:	73 6f                	jae    111 <.debug_str+0x111>
  a2:	6c                   	insb   (%dx),%es:(%rdi)
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a3:	65 00 5f 5a          	add    %bl,%gs:0x5a(%rdi)
  a7:	4e 37                	rex.WRX (bad) 
  a9:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  ab:	6e                   	outsb  %ds:(%rsi),(%dx)
  ac:	73 6f                	jae    11d <.debug_str+0x11d>
  ae:	6c                   	insb   (%dx),%es:(%rdi)
  af:	65 36 52             	gs ss push %rdx
  b2:	65 6e                	outsb  %gs:(%rsi),(%dx)
  b4:	64 65 72 45          	fs gs jb fd <.debug_str+0xfd>
  b8:	76 00                	jbe    ba <.debug_str+0xba>
  ba:	5f                   	pop    %rdi
  bb:	5f                   	pop    %rdi
  bc:	69 6e 5f 63 68 72 67 	imul   $0x67726863,0x5f(%rsi),%ebp
  c3:	00 52 41             	add    %dl,0x41(%rdx)
  c6:	6c                   	insb   (%dx),%es:(%rdi)
  c7:	74 00                	je     c9 <.debug_str+0xc9>
  c9:	42 61                	rex.X (bad) 
  cb:	63 6b 74             	movsxd 0x74(%rbx),%ebp
  ce:	69 63 6b 00 6c 6f 6e 	imul   $0x6e6f6c00,0x6b(%rbx),%esp
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d5:	67 20 6c 6f 6e       	and    %ch,0x6e(%edi,%ebp,2)
  da:	67 20 69 6e          	and    %ch,0x6e(%ecx)
  de:	74 00                	je     e0 <.debug_str+0xe0>
  e0:	73 69                	jae    14b <.debug_str+0x14b>
  e2:	67 6e                	outsb  %ds:(%esi),(%dx)
  e4:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
  e9:	61                   	(bad)  
  ea:	72 00                	jb     ec <.debug_str+0xec>
  ec:	5f                   	pop    %rdi
  ed:	5a                   	pop    %rdx
  ee:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
  f4:	6f                   	outsl  %ds:(%rsi),(%dx)
  f5:	31 37                	xor    %esi,(%rdi)
  f7:	54                   	push   %rsp
  f8:	65 78 74             	gs js  16f <.debug_str+0x16f>
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  fb:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
  fd:	64 65 50             	fs gs push %rax
 100:	72 65                	jb     167 <.debug_str+0x167>
 102:	73 65                	jae    169 <.debug_str+0x169>
 104:	6e                   	outsb  %ds:(%rsi),(%dx)
 105:	74 65                	je     16c <.debug_str+0x16c>
 107:	72 34                	jb     13d <.debug_str+0x13d>
 109:	54                   	push   %rsp
 10a:	65 78 74             	gs js  181 <.debug_str+0x181>
 10d:	45                   	rex.RB
 10e:	4e 53                	rex.WRX push %rbx
 110:	5f                   	pop    %rdi
 111:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
 116:	74 45                	je     15d <.debug_str+0x15d>
 118:	63 68 68             	movsxd 0x68(%rax),%ebp
 11b:	00 50 65             	add    %dl,0x65(%rax)
 11e:	72 69                	jb     189 <.debug_str+0x189>
 120:	6f                   	outsl  %ds:(%rsi),(%dx)
 121:	64 00 4b 65          	add    %cl,%fs:0x65(%rbx)
 125:	79 4d                	jns    174 <.debug_str+0x174>
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 127:	6f                   	outsl  %ds:(%rsi),(%dx)
 128:	64 69 66 69 65 72 73 	imul   $0x53737265,%fs:0x69(%rsi),%esp
 12f:	53 
}
 130:	68 69 66 74 00       	push   $0x746669
 135:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 137:	6d                   	insl   (%dx),%es:(%rdi)
 138:	6d                   	insl   (%dx),%es:(%rdi)
 139:	61                   	(bad)  
 13a:	00 4e 75             	add    %cl,0x75(%rsi)
 13d:	6d                   	insl   (%dx),%es:(%rdi)
 13e:	30 00                	xor    %al,(%rax)
 140:	4e 75 6d             	rex.WRX jne 1b0 <.debug_str+0x1b0>
 143:	31 00                	xor    %eax,(%rax)
}
 145:	50                   	push   %rax
 146:	61                   	(bad)  
 147:	67 65 55             	addr32 gs push %rbp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 14a:	70 00                	jo     14c <.debug_str+0x14c>
 14c:	4e 75 6d             	rex.WRX jne 1bc <.debug_str+0x1bc>
 14f:	33 00                	xor    (%rax),%eax
 151:	4e 75 6d             	rex.WRX jne 1c1 <.debug_str+0x1c1>
}
 154:	34 00                	xor    $0x0,%al
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 156:	4e 75 6d             	rex.WRX jne 1c6 <.debug_str+0x1c6>
 159:	35 00 4e 75 6d       	xor    $0x6d754e00,%eax
 15e:	36 00 4e 75          	ss add %cl,0x75(%rsi)
{
 162:	6d                   	insl   (%dx),%es:(%rdi)
 163:	37                   	(bad)  
 164:	00 4e 75             	add    %cl,0x75(%rsi)
 167:	6d                   	insl   (%dx),%es:(%rdi)
 168:	38 00                	cmp    %al,(%rax)
 16a:	4e 75 6d             	rex.WRX jne 1da <.debug_str+0x1da>
    m_TextPresenter->Clear();
 16d:	39 00                	cmp    %eax,(%rax)
 16f:	47 72 65             	rex.RXB jb 1d7 <.debug_str+0x1d7>
 172:	61                   	(bad)  
 173:	74 65                	je     1da <.debug_str+0x1da>
    RenderModifiers();
 175:	72 54                	jb     1cb <.debug_str+0x1cb>
 177:	68 61 6e 00 6c       	push   $0x6c006e61
 17c:	6f                   	outsl  %ds:(%rsi),(%dx)
 17d:	6e                   	outsb  %ds:(%rsi),(%dx)
 17e:	67 20 69 6e          	and    %ch,0x6e(%ecx)
 182:	74 00                	je     184 <.debug_str+0x184>
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 184:	45 71 75             	rex.RB jno 1fc <.debug_str+0x1fc>
 187:	61                   	(bad)  
 188:	6c                   	insb   (%dx),%es:(%rdi)
}
 189:	73 00                	jae    18b <.debug_str+0x18b>
 18b:	57                   	push   %rdi
 18c:	65 62 46             	gs (bad) 
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
 18f:	61                   	(bad)  
 190:	76 6f                	jbe    201 <.debug_str+0x201>
 192:	72 69                	jb     1fd <.debug_str+0x1fd>
 194:	74 65                	je     1fb <.debug_str+0x1fb>
 196:	73 00                	jae    198 <.debug_str+0x198>
 198:	6f                   	outsl  %ds:(%rsi),(%dx)
 199:	70 65                	jo     200 <.debug_str+0x200>
 19b:	72 61                	jb     1fe <.debug_str+0x1fe>
 19d:	74 6f                	je     20e <.debug_str+0x20e>
 19f:	72 20                	jb     1c1 <.debug_str+0x1c1>
 1a1:	6e                   	outsb  %ds:(%rsi),(%dx)
 1a2:	65 77 00             	gs ja  1a5 <.debug_str+0x1a5>
 1a5:	52                   	push   %rdx
 1a6:	65 66 72 65          	gs data16 jb 20f <.debug_str+0x20f>
 1aa:	73 68                	jae    214 <.debug_str+0x214>
 1ac:	00 5f 5a             	add    %bl,0x5a(%rdi)
 1af:	4e 37                	rex.WRX (bad) 
  : m_TextPresenter(new Video::TextModePresenter()),
 1b1:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 1b3:	6e                   	outsb  %ds:(%rsi),(%dx)
 1b4:	73 6f                	jae    225 <.debug_str+0x225>
 1b6:	6c                   	insb   (%dx),%es:(%rdi)
 1b7:	65 39 41 63          	cmp    %eax,%gs:0x63(%rcx)
Console::Console()
 1bb:	63 65 70             	movsxd 0x70(%rbp),%esp
 1be:	74 4b                	je     20b <.debug_str+0x20b>
 1c0:	65 79 45             	gs jns 208 <.debug_str+0x208>
  : m_TextPresenter(new Video::TextModePresenter()),
 1c3:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
 1c9:	74 33                	je     1fe <.debug_str+0x1fe>
 1cb:	4b                   	rex.WXB
 1cc:	65 79 45             	gs jns 214 <.debug_str+0x214>
 1cf:	62                   	(bad)  
 1d0:	00 50 6f             	add    %dl,0x6f(%rax)
 1d3:	69 6e 74 00 56 6f 6c 	imul   $0x6c6f5600,0x74(%rsi),%ebp
 1da:	75 6d                	jne    249 <.debug_str+0x249>
 1dc:	65 44 6f             	rex.R outsl %gs:(%rsi),(%dx)
 1df:	77 6e                	ja     24f <.debug_str+0x24f>
    m_Buffers(new uint8_t[23 * 80]),
 1e1:	00 43 75             	add    %al,0x75(%rbx)
 1e4:	72 73                	jb     259 <.debug_str+0x259>
 1e6:	6f                   	outsl  %ds:(%rsi),(%dx)
 1e7:	72 4c                	jb     235 <.debug_str+0x235>
 1e9:	65 66 74 00          	gs data16 je 1ed <.debug_str+0x1ed>
 1ed:	5f                   	pop    %rdi
 1ee:	5a                   	pop    %rdx
 1ef:	6e                   	outsb  %ds:(%rsi),(%dx)
    m_KeyModifiers(0)
 1f0:	77 6d                	ja     25f <.debug_str+0x25f>
 1f2:	00 57 65             	add    %dl,0x65(%rdi)
 1f5:	62 42                	(bad)  
    m_Buffers(new uint8_t[23 * 80]),
 1f7:	61                   	(bad)  
}
 1f8:	63 6b 77             	movsxd 0x77(%rbx),%ebp
    Refresh();
 1fb:	61                   	(bad)  
    m_Buffers(new uint8_t[23 * 80]),
 1fc:	72 64                	jb     262 <.debug_str+0x262>
 1fe:	00 45 6e             	add    %al,0x6e(%rbp)
    m_OffsetX(0),
 201:	74 65                	je     268 <.debug_str+0x268>
 203:	72 00                	jb     205 <.debug_str+0x205>
 205:	74 68                	je     26f <.debug_str+0x26f>
 207:	69 73 00 73 68 69 66 	imul   $0x66696873,0x0(%rbx),%esi
    Refresh();
 20e:	74 00                	je     210 <.debug_str+0x210>
 210:	52                   	push   %rdx
 211:	65 6e                	outsb  %gs:(%rsi),(%dx)
 213:	64 65 72 4d          	fs gs jb 264 <.debug_str+0x264>
 217:	6f                   	outsl  %ds:(%rsi),(%dx)
 218:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 21f:	00 
{
 220:	55                   	push   %rbp
 221:	6e                   	outsb  %ds:(%rsi),(%dx)
 222:	64 65 72 6c          	fs gs jb 292 <.debug_str+0x292>
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 226:	69 6e 65 00 41 70 70 	imul   $0x70704100,0x65(%rsi),%ebp
 22d:	6c                   	insb   (%dx),%es:(%rdi)
 22e:	79 4d                	jns    27d <.debug_str+0x27d>
{
 230:	6f                   	outsl  %ds:(%rsi),(%dx)
 231:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 238:	00 
 239:	43 61                	rex.XB (bad) 
 23b:	70 73                	jo     2b0 <.debug_str+0x2b0>
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 23d:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 23f:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 242:	53                   	push   %rbx
 243:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 246:	6c                   	insb   (%dx),%es:(%rdi)
 247:	6c                   	insb   (%dx),%es:(%rdi)
 248:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 24a:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 24d:	6d                   	insl   (%dx),%es:(%rdi)
 24e:	5f                   	pop    %rdi
 24f:	4b                   	rex.WXB
 250:	65 79 4d             	gs jns 2a0 <.debug_str+0x2a0>
 253:	6f                   	outsl  %ds:(%rsi),(%dx)
 254:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 25b:	00 
 25c:	4e 75 6d             	rex.WRX jne 2cc <.debug_str+0x2cc>
 25f:	70 61                	jo     2c2 <.debug_str+0x2c2>
 261:	64 4d 75 6c          	fs rex.WRB jne 2d1 <.debug_str+0x2d1>
    if (++m_OffsetX >= 80)
 265:	74 69                	je     2d0 <.debug_str+0x2d0>
 267:	70 6c                	jo     2d5 <.debug_str+0x2d5>
    m_LineLength++;
 269:	79 00                	jns    26b <.debug_str+0x26b>
 26b:	63 74 72 6c          	movsxd 0x6c(%rdx,%rsi,2),%esi
    if (++m_OffsetX >= 80)
 26f:	00 57 61             	add    %dl,0x61(%rdi)
 272:	6b 65 00 45          	imul   $0x45,0x0(%rbp),%esp
 276:	6d                   	insl   (%dx),%es:(%rdi)
 277:	61                   	(bad)  
 278:	69 6c 00 4d 75 74 65 	imul   $0x657475,0x4d(%rax,%rax,1),%ebp
 27f:	00 
        if (m_OffsetY >= 22)
 280:	4b                   	rex.WXB
 281:	65 79 4d             	gs jns 2d1 <.debug_str+0x2d1>
 284:	6f                   	outsl  %ds:(%rsi),(%dx)
 285:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 28c:	43 
 28d:	74 72                	je     301 <.debug_str+0x301>
 28f:	6c                   	insb   (%dx),%es:(%rdi)
        } else m_OffsetY++;
 290:	00 5f 5a             	add    %bl,0x5a(%rdi)
 293:	4e 37                	rex.WRX (bad) 
 295:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 297:	6e                   	outsb  %ds:(%rsi),(%dx)
 298:	73 6f                	jae    309 <.debug_str+0x309>
 29a:	6c                   	insb   (%dx),%es:(%rdi)
 29b:	65 44 34 45          	gs rex.R xor $0x45,%al
 29f:	76 00                	jbe    2a1 <.debug_str+0x2a1>
            m_TextPresenter->MoveUp();
 2a1:	42 61                	rex.X (bad) 
 2a3:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 2a6:	6c                   	insb   (%dx),%es:(%rdi)
 2a7:	61                   	(bad)  
 2a8:	73 68                	jae    312 <.debug_str+0x312>
 2aa:	00 52 69             	add    %dl,0x69(%rdx)
 2ad:	67 68 74 42 72 61    	addr32 push $0x61724274
 2b3:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 2b6:	74 00                	je     2b8 <.debug_str+0x2b8>
            RenderModifiers();
 2b8:	75 6e                	jne    328 <.debug_str+0x328>
 2ba:	73 69                	jae    325 <.debug_str+0x325>
 2bc:	67 6e                	outsb  %ds:(%esi),(%dx)
 2be:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 2c3:	74 00                	je     2c5 <.debug_str+0x2c5>
 2c5:	52                   	push   %rdx
 2c6:	53                   	push   %rbx
 2c7:	68 69 66 74 00       	push   $0x746669
 2cc:	5f                   	pop    %rdi
 2cd:	5a                   	pop    %rdx
 2ce:	6e                   	outsb  %ds:(%rsi),(%dx)
 2cf:	61                   	(bad)  
{
 2d0:	6d                   	insl   (%dx),%es:(%rdi)
    switch (key)
 2d1:	00 5f 5a             	add    %bl,0x5a(%rdi)
{
 2d4:	4e 37                	rex.WRX (bad) 
 2d6:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 2d8:	6e                   	outsb  %ds:(%rsi),(%dx)
 2d9:	73 6f                	jae    34a <.debug_str+0x34a>
 2db:	6c                   	insb   (%dx),%es:(%rdi)
 2dc:	65 37                	gs (bad) 
 2de:	52                   	push   %rdx
 2df:	65 66 72 65          	gs data16 jb 348 <.debug_str+0x348>
    switch (key)
 2e3:	73 68                	jae    34d <.debug_str+0x34d>
 2e5:	45 76 00             	rex.RB jbe 2e8 <.debug_str+0x2e8>
 2e8:	6c                   	insb   (%dx),%es:(%rdi)
 2e9:	6f                   	outsl  %ds:(%rsi),(%dx)
 2ea:	6e                   	outsb  %ds:(%rsi),(%dx)
 2eb:	67 20 75 6e          	and    %dh,0x6e(%ebp)
 2ef:	73 69                	jae    35a <.debug_str+0x35a>
 2f1:	67 6e                	outsb  %ds:(%esi),(%dx)
 2f3:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 2f8:	74 00                	je     2fa <.debug_str+0x2fa>
 2fa:	41 63 63 65          	movsxd 0x65(%r11),%esp
        char code = ApplyModifiers(key, m_KeyModifiers);
 2fe:	70 74                	jo     374 <.debug_str+0x374>
 300:	4b                   	rex.WXB
 301:	65 79 00             	gs jns 304 <.debug_str+0x304>
 304:	50                   	push   %rax
 305:	61                   	(bad)  
 306:	67 65 44 6f          	rex.R outsl %gs:(%esi),(%dx)
 30a:	77 6e                	ja     37a <.debug_str+0x37a>
 30c:	00 41 72             	add    %al,0x72(%rcx)
        if (!code || !isPressed || m_LineLength == 255) break;
 30f:	72 6f                	jb     380 <.debug_str+0x380>
 311:	77 44                	ja     357 <.debug_str+0x357>
 313:	6f                   	outsl  %ds:(%rsi),(%dx)
 314:	77 6e                	ja     384 <.debug_str+0x384>
 316:	00 56 69             	add    %dl,0x69(%rsi)
 319:	64 65 6f             	fs outsl %gs:(%rsi),(%dx)
 31c:	00 4d 6f             	add    %cl,0x6f(%rbp)
 31f:	76 65                	jbe    386 <.debug_str+0x386>
 321:	55                   	push   %rbp
 322:	70 00                	jo     324 <.debug_str+0x324>
 324:	73 68                	jae    38e <.debug_str+0x38e>
}
 326:	6f                   	outsl  %ds:(%rsi),(%dx)
 327:	72 74                	jb     39d <.debug_str+0x39d>
 329:	20 75 6e             	and    %dh,0x6e(%rbp)
 32c:	73 69                	jae    397 <.debug_str+0x397>
 32e:	67 6e                	outsb  %ds:(%esi),(%dx)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 330:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 335:	74 00                	je     337 <.debug_str+0x337>
            m_KeyModifiers |= KeyModifiersShift;
 337:	4e 75 6d             	rex.WRX jne 3a7 <.debug_str+0x3a7>
 33a:	70 61                	jo     39d <.debug_str+0x39d>
 33c:	64 41                	fs rex.B
 33e:	64 64 00 49 6e       	fs add %cl,%fs:0x6e(%rcx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 343:	73 65                	jae    3aa <.debug_str+0x3aa>
 345:	72 74                	jb     3bb <.debug_str+0x3bb>
 347:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
        RenderModifiers();
 34b:	74 4d                	je     39a <.debug_str+0x39a>
 34d:	6f                   	outsl  %ds:(%rsi),(%dx)
 34e:	64 65 50             	fs gs push %rax
 351:	72 65                	jb     3b8 <.debug_str+0x3b8>
 353:	73 65                	jae    3ba <.debug_str+0x3ba>
}
 355:	6e                   	outsb  %ds:(%rsi),(%dx)
 356:	74 65                	je     3bd <.debug_str+0x3bd>
 358:	72 00                	jb     35a <.debug_str+0x35a>
        RenderModifiers();
 35a:	4e 75 6d             	rex.WRX jne 3ca <.debug_str+0x3ca>
 35d:	70 61                	jo     3c0 <.debug_str+0x3c0>
 35f:	64 4d 69 6e 75 73 00 	imul   $0x65570073,%fs:0x75(%r14),%r13
 366:	57 65 
            m_KeyModifiers |= KeyModifiersCtrl;
 368:	62 53 74 6f 70       	(bad)
 36d:	00 50 72             	add    %dl,0x72(%rax)
 370:	65 76 69             	gs jbe 3dc <.debug_str+0x3dc>
 373:	6f                   	outsl  %ds:(%rsi),(%dx)
 374:	75 73                	jne    3e9 <.debug_str+0x3e9>
 376:	54                   	push   %rsp
 377:	72 61                	jb     3da <.debug_str+0x3da>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 379:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 37c:	5f                   	pop    %rdi
 37d:	5a                   	pop    %rdx
            m_KeyModifiers |= KeyModifiersAlt;
 37e:	4e 37                	rex.WRX (bad) 
 380:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 382:	6e                   	outsb  %ds:(%rsi),(%dx)
 383:	73 6f                	jae    3f4 <.debug_str+0x3f4>
 385:	6c                   	insb   (%dx),%es:(%rdi)
 386:	65 43 34 45          	gs rex.XB xor $0x45,%al
 38a:	76 00                	jbe    38c <.debug_str+0x38c>
 38c:	4e                   	rex.WRX
 38d:	65 78 74             	gs js  404 <.debug_str+0x404>
        if (isPressed)
 390:	54                   	push   %rsp
 391:	72 61                	jb     3f4 <.debug_str+0x3f4>
 393:	63 6b 00             	movsxd 0x0(%rbx),%ebp
            if (m_KeyModifiers & KeyModifiersCapsLock)
 396:	62                   	(bad)  
 397:	6f                   	outsl  %ds:(%rsi),(%dx)
 398:	6f                   	outsl  %ds:(%rsi),(%dx)
 399:	6c                   	insb   (%dx),%es:(%rdi)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 39a:	00 4e 75             	add    %cl,0x75(%rsi)
 39d:	6d                   	insl   (%dx),%es:(%rdi)
 39e:	70 61                	jo     401 <.debug_str+0x401>
 3a0:	64 45 6e             	rex.RB outsb %fs:(%rsi),(%dx)
 3a3:	74 65                	je     40a <.debug_str+0x40a>
 3a5:	72 00                	jb     3a7 <.debug_str+0x3a7>
 3a7:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 3a9:	6e                   	outsb  %ds:(%rsi),(%dx)
 3aa:	73 6f                	jae    41b <.debug_str+0x41b>
 3ac:	6c                   	insb   (%dx),%es:(%rdi)
 3ad:	65 00 56 6f          	add    %dl,%gs:0x6f(%rsi)
        AddChar(' '); break;
 3b1:	6c                   	insb   (%dx),%es:(%rdi)
 3b2:	75 6d                	jne    421 <.debug_str+0x421>
 3b4:	65 55                	gs push %rbp
        AddChar(code);
 3b6:	70 00                	jo     3b8 <.debug_str+0x3b8>
 3b8:	64 65 63 6c 74 79    	fs movsxd %gs:0x79(%rsp,%rsi,2),%ebp
 3be:	70 65                	jo     425 <.debug_str+0x425>
 3c0:	28 6e 75             	sub    %ch,0x75(%rsi)
}
 3c3:	6c                   	insb   (%dx),%es:(%rdi)
 3c4:	6c                   	insb   (%dx),%es:(%rdi)
 3c5:	70 74                	jo     43b <.debug_str+0x43b>
        AddChar(code);
 3c7:	72 29                	jb     3f2 <.debug_str+0x3f2>
 3c9:	00 4d 65             	add    %cl,0x65(%rbp)
 3cc:	64 69 61 50 6c 61 79 	imul   $0x79616c,%fs:0x50(%rcx),%esp
 3d3:	00 
        m_TextPresenter->Clear();
 3d4:	6d                   	insl   (%dx),%es:(%rdi)
 3d5:	5f                   	pop    %rdi
 3d6:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 3d8:	69 74 00 4e 6f 6e 65 	imul   $0x656e6f,0x4e(%rax,%rax,1),%esi
 3df:	00 
        if (!isPressed) break;
 3e0:	67 5f                	addr32 pop %rdi
 3e2:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 3e4:	6e                   	outsb  %ds:(%rsi),(%dx)
 3e5:	73 6f                	jae    456 <.debug_str+0x456>
 3e7:	6c                   	insb   (%dx),%es:(%rdi)
        if (m_OffsetY >= 22)
 3e8:	65 00 57 65          	add    %dl,%gs:0x65(%rdi)
 3ec:	62 53 65 61 72       	(bad)
        m_TextPresenter->Clear();
 3f1:	63 68 00             	movsxd 0x0(%rax),%ebp
        m_LineLength = 0;
 3f4:	50                   	push   %rax
 3f5:	6f                   	outsl  %ds:(%rsi),(%dx)
 3f6:	77 65                	ja     45d <.debug_str+0x45d>
        m_OffsetX = 1;
 3f8:	72 00                	jb     3fa <.debug_str+0x3fa>
 3fa:	4d                   	rex.WRB
 3fb:	65 64 69 61 53 74 6f 	gs imul $0x706f74,%fs:0x53(%rcx),%esp
 402:	70 00 
        } else m_OffsetY++;
 404:	6c                   	insb   (%dx),%es:(%rdi)
 405:	6f                   	outsl  %ds:(%rsi),(%dx)
 406:	6e                   	outsb  %ds:(%rsi),(%dx)
 407:	67 20 64 6f 75       	and    %ah,0x75(%edi,%ebp,2)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 40c:	62                   	(bad)  
}
 40d:	6c                   	insb   (%dx),%es:(%rdi)
 40e:	65 00 63 6f          	add    %ah,%gs:0x6f(%rbx)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 412:	6e                   	outsb  %ds:(%rsi),(%dx)
 413:	73 6f                	jae    484 <.debug_str+0x484>
 415:	6c                   	insb   (%dx),%es:(%rdi)
 416:	65 00 53 6c          	add    %dl,%gs:0x6c(%rbx)
 41a:	61                   	(bad)  
 41b:	73 68                	jae    485 <.debug_str+0x485>
 41d:	00 44 65 6c          	add    %al,0x6c(%rbp,%riz,2)
 421:	65 74 65             	gs je  489 <.debug_str+0x489>
 424:	00 43 75             	add    %al,0x75(%rbx)
 427:	72 73                	jb     49c <.debug_str+0x49c>
 429:	6f                   	outsl  %ds:(%rsi),(%dx)
 42a:	72 52                	jb     47e <.debug_str+0x47e>
 42c:	69 67 68 74 00 43 75 	imul   $0x75430074,0x68(%rdi),%esp
 433:	72 73                	jb     4a8 <.debug_str+0x4a8>
 435:	6f                   	outsl  %ds:(%rsi),(%dx)
 436:	72 44                	jb     47c <.debug_str+0x47c>
        AddChar(code);
 438:	6f                   	outsl  %ds:(%rsi),(%dx)
 439:	77 6e                	ja     4a9 <.debug_str+0x4a9>
 43b:	00 49 73             	add    %cl,0x73(%rcx)
 43e:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
            m_TextPresenter->MoveUp();
 440:	69 74 69 61 6c 69 7a 	imul   $0x657a696c,0x61(%rcx,%rbp,2),%esi
 447:	65 
 448:	64 00 4c 65 66       	add    %cl,%fs:0x66(%rbp,%riz,2)
            RenderModifiers();
 44d:	74 4d                	je     49c <.debug_str+0x49c>
 44f:	65 6e                	outsb  %gs:(%rsi),(%dx)
 451:	75 00                	jne    453 <.debug_str+0x453>
 453:	4c                   	rex.WR
 454:	65 66 74 42          	gs data16 je 49a <.debug_str+0x49a>
 458:	72 61                	jb     4bb <.debug_str+0x4bb>
 45a:	63 65 00             	movsxd 0x0(%rbp),%esp
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 45d:	41 72 72             	rex.B jb 4d2 <.debug_str+0x4d2>
 460:	6f                   	outsl  %ds:(%rsi),(%dx)
 461:	77 55                	ja     4b8 <.debug_str+0x4b8>
 463:	70 00                	jo     465 <.debug_str+0x465>
 465:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 467:	70 75                	jo     4de <.debug_str+0x4de>
 469:	74 00                	je     46b <.debug_str+0x46b>
 46b:	75 6e                	jne    4db <.debug_str+0x4db>
 46d:	73 69                	jae    4d8 <.debug_str+0x4d8>
 46f:	67 6e                	outsb  %ds:(%esi),(%dx)
    console->AcceptKey(key, isPressed);
 471:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
 476:	61                   	(bad)  
 477:	72 00                	jb     479 <.debug_str+0x479>
 479:	53                   	push   %rbx
 47a:	65 6d                	gs insl (%dx),%es:(%rdi)
 47c:	69 63 6f 6c 6f 6e 00 	imul   $0x6e6f6c,0x6f(%rbx),%esp
 483:	52                   	push   %rdx
 484:	69 67 68 74 4d 65 6e 	imul   $0x6e654d74,0x68(%rdi),%esp
 48b:	75 00                	jne    48d <.debug_str+0x48d>
 48d:	73 68                	jae    4f7 <.debug_str+0x4f7>
 48f:	6f                   	outsl  %ds:(%rsi),(%dx)
 490:	72 74                	jb     506 <.debug_str+0x506>
 492:	20 69 6e             	and    %ch,0x6e(%rcx)
 495:	74 00                	je     497 <.debug_str+0x497>
 497:	5f                   	pop    %rdi
 498:	5a                   	pop    %rdx
 499:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 49f:	6f                   	outsl  %ds:(%rsi),(%dx)
 4a0:	31 37                	xor    %esi,(%rdi)
 4a2:	54                   	push   %rsp
 4a3:	65 78 74             	gs js  51a <.debug_str+0x51a>
 4a6:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 4a8:	64 65 50             	fs gs push %rax
 4ab:	72 65                	jb     512 <.debug_str+0x512>
 4ad:	73 65                	jae    514 <.debug_str+0x514>
 4af:	6e                   	outsb  %ds:(%rsi),(%dx)
 4b0:	74 65                	je     517 <.debug_str+0x517>
 4b2:	72 34                	jb     4e8 <.debug_str+0x4e8>
 4b4:	54                   	push   %rsp
 4b5:	65 78 74             	gs js  52c <.debug_str+0x52c>
 4b8:	45                   	rex.RB
 4b9:	4e 53                	rex.WRX push %rbx
 4bb:	5f                   	pop    %rdi
 4bc:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
 4c1:	74 45                	je     508 <.debug_str+0x508>
 4c3:	50                   	push   %rax
 4c4:	4b 63 68 68          	rex.WXB movslq 0x68(%r8),%rbp
 4c8:	00 5f 5a             	add    %bl,0x5a(%rdi)
 4cb:	4e 37                	rex.WRX (bad) 
 4cd:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 4cf:	6e                   	outsb  %ds:(%rsi),(%dx)
 4d0:	73 6f                	jae    541 <.debug_str+0x541>
 4d2:	6c                   	insb   (%dx),%es:(%rdi)
 4d3:	65 44 32 45 76       	xor    %gs:0x76(%rbp),%r8b
 4d8:	00 6d 5f             	add    %ch,0x5f(%rbp)
 4db:	4c 69 6e 65 4c 65 6e 	imul   $0x676e654c,0x65(%rsi),%r13
 4e2:	67 
 4e3:	74 68                	je     54d <.debug_str+0x54d>
 4e5:	00 5f 5a             	add    %bl,0x5a(%rdi)
 4e8:	4e 37                	rex.WRX (bad) 
 4ea:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 4ec:	6e                   	outsb  %ds:(%rsi),(%dx)
 4ed:	73 6f                	jae    55e <.debug_str+0x55e>
 4ef:	6c                   	insb   (%dx),%es:(%rdi)
 4f0:	65 31 33             	xor    %esi,%gs:(%rbx)
 4f3:	49 73 49             	rex.WB jae 53f <.debug_str+0x53f>
 4f6:	6e                   	outsb  %ds:(%rsi),(%dx)
 4f7:	69 74 69 61 6c 69 7a 	imul   $0x657a696c,0x61(%rcx,%rbp,2),%esi
 4fe:	65 
 4ff:	64 45 76 00          	fs rex.RB jbe 503 <.debug_str+0x503>
 503:	41                   	rex.B
 504:	64 64 43 68 61 72 00 	fs fs rex.XB push $0x43007261
 50b:	43 
 50c:	6f                   	outsl  %ds:(%rsi),(%dx)
 50d:	6c                   	insb   (%dx),%es:(%rdi)
 50e:	6f                   	outsl  %ds:(%rsi),(%dx)
 50f:	6e                   	outsb  %ds:(%rsi),(%dx)
 510:	00 4c 65 73          	add    %cl,0x73(%rbp,%riz,2)
 514:	73 54                	jae    56a <.debug_str+0x56a>
 516:	68 61 6e 00 5f       	push   $0x5f006e61
 51b:	5a                   	pop    %rdx
 51c:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 522:	6f                   	outsl  %ds:(%rsi),(%dx)
 523:	31 37                	xor    %esi,(%rdi)
 525:	54                   	push   %rsp
 526:	65 78 74             	gs js  59d <.debug_str+0x59d>
 529:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 52b:	64 65 50             	fs gs push %rax
 52e:	72 65                	jb     595 <.debug_str+0x595>
 530:	73 65                	jae    597 <.debug_str+0x597>
 532:	6e                   	outsb  %ds:(%rsi),(%dx)
 533:	74 65                	je     59a <.debug_str+0x59a>
 535:	72 43                	jb     57a <.debug_str+0x57a>
 537:	34 45                	xor    $0x45,%al
 539:	76 00                	jbe    53b <.debug_str+0x53b>
 53b:	5f                   	pop    %rdi
 53c:	5a                   	pop    %rdx
 53d:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 543:	6f                   	outsl  %ds:(%rsi),(%dx)
 544:	31 37                	xor    %esi,(%rdi)
 546:	54                   	push   %rsp
 547:	65 78 74             	gs js  5be <.debug_str+0x5be>
 54a:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 54c:	64 65 50             	fs gs push %rax
 54f:	72 65                	jb     5b6 <.debug_str+0x5b6>
 551:	73 65                	jae    5b8 <.debug_str+0x5b8>
 553:	6e                   	outsb  %ds:(%rsi),(%dx)
 554:	74 65                	je     5bb <.debug_str+0x5bb>
 556:	72 43                	jb     59b <.debug_str+0x59b>
 558:	31 45 76             	xor    %eax,0x76(%rbp)
 55b:	00 43 6f             	add    %al,0x6f(%rbx)
 55e:	6e                   	outsb  %ds:(%rsi),(%dx)
 55f:	73 6f                	jae    5d0 <.debug_str+0x5d0>
 561:	6c                   	insb   (%dx),%es:(%rdi)
 562:	65 4b                	gs rex.WXB
 564:	65 79 45             	gs jns 5ac <.debug_str+0x5ac>
 567:	76 65                	jbe    5ce <.debug_str+0x5ce>
 569:	6e                   	outsb  %ds:(%rsi),(%dx)
 56a:	74 48                	je     5b4 <.debug_str+0x5b4>
 56c:	61                   	(bad)  
 56d:	6e                   	outsb  %ds:(%rsi),(%dx)
 56e:	64 6c                	fs insb (%dx),%es:(%rdi)
 570:	65 72 00             	gs jb  573 <.debug_str+0x573>
 573:	50                   	push   %rax
 574:	61                   	(bad)  
 575:	67 65 53             	addr32 gs push %rbx
 578:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 57b:	6c                   	insb   (%dx),%es:(%rdi)
 57c:	6c                   	insb   (%dx),%es:(%rdi)
 57d:	00 57 65             	add    %dl,0x65(%rdi)
 580:	62 46 6f 72 77       	(bad)
 585:	61                   	(bad)  
 586:	72 64                	jb     5ec <.debug_str+0x5ec>
 588:	00 4b 65             	add    %cl,0x65(%rbx)
 58b:	79 4d                	jns    5da <.debug_str+0x5da>
 58d:	6f                   	outsl  %ds:(%rsi),(%dx)
 58e:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 595:	43 
 596:	61                   	(bad)  
 597:	70 73                	jo     60c <.debug_str+0x60c>
 599:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 59b:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 59e:	52                   	push   %rdx
 59f:	65 6e                	outsb  %gs:(%rsi),(%dx)
 5a1:	64 65 72 00          	fs gs jb 5a5 <.debug_str+0x5a5>
 5a5:	63 68 61             	movsxd 0x61(%rax),%ebp
 5a8:	72 00                	jb     5aa <.debug_str+0x5aa>
 5aa:	42 61                	rex.X (bad) 
 5ac:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 5af:	70 61                	jo     612 <.debug_str+0x612>
 5b1:	63 65 00             	movsxd 0x0(%rbp),%esp
 5b4:	47                   	rex.RXB
 5b5:	4e 55                	rex.WRX push %rbp
 5b7:	20 43 2b             	and    %al,0x2b(%rbx)
 5ba:	2b 31                	sub    (%rcx),%esi
 5bc:	37                   	(bad)  
 5bd:	20 31                	and    %dh,(%rcx)
 5bf:	31 2e                	xor    %ebp,(%rsi)
 5c1:	32 2e                	xor    (%rsi),%ch
 5c3:	30 20                	xor    %ah,(%rax)
 5c5:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 5ca:	6d                   	insl   (%dx),%es:(%rdi)
 5cb:	6d                   	insl   (%dx),%es:(%rdi)
 5cc:	78 20                	js     5ee <.debug_str+0x5ee>
 5ce:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 5d3:	73 73                	jae    648 <.debug_str+0x648>
 5d5:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f7449 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f6fd9>
 5dc:	73 73                	jae    651 <.debug_str+0x651>
 5de:	65 32 20             	xor    %gs:(%rax),%ah
 5e1:	2d 6d 63 6d 6f       	sub    $0x6f6d636d,%eax
 5e6:	64 65 6c             	fs gs insb (%dx),%es:(%rdi)
 5e9:	3d 6c 61 72 67       	cmp    $0x6772616c,%eax
 5ee:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f7462 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f6ff2>
 5f5:	72 65                	jb     65c <.debug_str+0x65c>
 5f7:	64 2d 7a 6f 6e 65    	fs sub $0x656e6f7a,%eax
 5fd:	20 2d 6d 74 75 6e    	and    %ch,0x6e75746d(%rip)        # 6e757a70 <ConsoleKeyEventHandler(Input::Key, bool)+0x6e757600>
 603:	65 3d 67 65 6e 65    	gs cmp $0x656e6567,%eax
 609:	72 69                	jb     674 <.debug_str+0x674>
 60b:	63 20                	movsxd (%rax),%esp
 60d:	2d 6d 61 72 63       	sub    $0x6372616d,%eax
 612:	68 3d 78 38 36       	push   $0x3638783d
 617:	2d 36 34 20 2d       	sub    $0x2d203436,%eax
 61c:	67 20 2d 4f 32 20 2d 	and    %ch,0x2d20324f(%eip)        # 2d203872 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d203402>
 623:	66 66 72 65          	data16 data16 jb 68c <.debug_str+0x68c>
 627:	65 73 74             	gs jae 69e <.debug_str+0x69e>
 62a:	61                   	(bad)  
 62b:	6e                   	outsb  %ds:(%rsi),(%dx)
 62c:	64 69 6e 67 20 2d 66 	imul   $0x69662d20,%fs:0x67(%rsi),%ebp
 633:	69 
 634:	6e                   	outsb  %ds:(%rsi),(%dx)
 635:	6c                   	insb   (%dx),%es:(%rdi)
 636:	69 6e 65 2d 66 75 6e 	imul   $0x6e75662d,0x65(%rsi),%ebp
 63d:	63 74 69 6f          	movsxd 0x6f(%rcx,%rbp,2),%esi
 641:	6e                   	outsb  %ds:(%rsi),(%dx)
 642:	73 20                	jae    664 <.debug_str+0x664>
 644:	2d 66 6e 6f 2d       	sub    $0x2d6f6e66,%eax
 649:	65 78 63             	gs js  6af <.debug_str+0x6af>
 64c:	65 70 74             	gs jo  6c3 <.debug_str+0x6c3>
 64f:	69 6f 6e 73 20 2d 66 	imul   $0x662d2073,0x6e(%rdi),%ebp
 656:	6e                   	outsb  %ds:(%rsi),(%dx)
 657:	6f                   	outsl  %ds:(%rsi),(%dx)
 658:	2d 72 74 74 69       	sub    $0x69747472,%eax
 65d:	20 2d 66 6e 6f 2d    	and    %ch,0x2d6f6e66(%rip)        # 2d6f74c9 <ConsoleKeyEventHandler(Input::Key, bool)+0x2d6f7059>
 663:	70 69                	jo     6ce <.debug_str+0x6ce>
 665:	63 00                	movsxd (%rax),%eax
 667:	5f                   	pop    %rdi
 668:	5a                   	pop    %rdx
 669:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
 66f:	74 31                	je     6a2 <.debug_str+0x6a2>
 671:	34 41                	xor    $0x41,%al
 673:	70 70                	jo     6e5 <.debug_str+0x6e5>
 675:	6c                   	insb   (%dx),%es:(%rdi)
 676:	79 4d                	jns    6c5 <.debug_str+0x6c5>
 678:	6f                   	outsl  %ds:(%rsi),(%dx)
 679:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 680:	45 
 681:	4e 53                	rex.WRX push %rbx
 683:	5f                   	pop    %rdi
 684:	33 4b 65             	xor    0x65(%rbx),%ecx
 687:	79 45                	jns    6ce <.debug_str+0x6ce>
 689:	68 00 43 61 72       	push   $0x72614300
 68e:	65 74 00             	gs je  691 <.debug_str+0x691>
 691:	4e 75 6d             	rex.WRX jne 701 <.debug_str+0x701>
 694:	62 65                	(bad)  
 696:	72 4c                	jb     6e4 <.debug_str+0x6e4>
 698:	6f                   	outsl  %ds:(%rsi),(%dx)
 699:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 69c:	5f                   	pop    %rdi
 69d:	5a                   	pop    %rdx
 69e:	4e 37                	rex.WRX (bad) 
 6a0:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 6a2:	6e                   	outsb  %ds:(%rsi),(%dx)
 6a3:	73 6f                	jae    714 <.debug_str+0x714>
 6a5:	6c                   	insb   (%dx),%es:(%rdi)
 6a6:	65 43 32 45 76       	rex.XB xor %gs:0x76(%r13),%al
 6ab:	00 4c 41 6c          	add    %cl,0x6c(%rcx,%rax,2)
 6af:	74 00                	je     6b1 <.debug_str+0x6b1>
 6b1:	57                   	push   %rdi
 6b2:	65 62 52 65 66 72    	(bad)
 6b8:	65 73 68             	gs jae 723 <.debug_str+0x723>
 6bb:	00 6d 5f             	add    %ch,0x5f(%rbp)
 6be:	54                   	push   %rsp
 6bf:	65 78 74             	gs js  736 <.debug_str+0x736>
 6c2:	50                   	push   %rax
 6c3:	72 65                	jb     72a <.debug_str+0x72a>
 6c5:	73 65                	jae    72c <.debug_str+0x72c>
 6c7:	6e                   	outsb  %ds:(%rsi),(%dx)
 6c8:	74 65                	je     72f <.debug_str+0x72f>
 6ca:	72 00                	jb     6cc <.debug_str+0x6cc>
 6cc:	57                   	push   %rdi
 6cd:	65 62                	gs (bad) 
 6cf:	48 6f                	rex.W outsl %ds:(%rsi),(%dx)
 6d1:	6d                   	insl   (%dx),%es:(%rdi)
 6d2:	65 00 4e 75          	add    %cl,%gs:0x75(%rsi)
 6d6:	6d                   	insl   (%dx),%es:(%rdi)
 6d7:	70 61                	jo     73a <.debug_str+0x73a>
 6d9:	64 30 00             	xor    %al,%fs:(%rax)
 6dc:	4e 75 6d             	rex.WRX jne 74c <.debug_str+0x74c>
 6df:	70 61                	jo     742 <.debug_str+0x742>
 6e1:	64 31 00             	xor    %eax,%fs:(%rax)
 6e4:	4e 75 6d             	rex.WRX jne 754 <.debug_str+0x754>
 6e7:	70 61                	jo     74a <.debug_str+0x74a>
 6e9:	64 32 00             	xor    %fs:(%rax),%al
 6ec:	4e 75 6d             	rex.WRX jne 75c <.debug_str+0x75c>
 6ef:	70 61                	jo     752 <.debug_str+0x752>
 6f1:	64 33 00             	xor    %fs:(%rax),%eax
 6f4:	4e 75 6d             	rex.WRX jne 764 <.debug_str+0x764>
 6f7:	70 61                	jo     75a <.debug_str+0x75a>
 6f9:	64 34 00             	fs xor $0x0,%al
 6fc:	4e 75 6d             	rex.WRX jne 76c <.debug_str+0x76c>
 6ff:	70 61                	jo     762 <.debug_str+0x762>
 701:	64 35 00 4e 75 6d    	fs xor $0x6d754e00,%eax
 707:	70 61                	jo     76a <.debug_str+0x76a>
 709:	64 36 00 4e 75       	fs add %cl,%fs:0x75(%rsi)
 70e:	6d                   	insl   (%dx),%es:(%rdi)
 70f:	70 61                	jo     772 <.debug_str+0x772>
 711:	64 37                	fs (bad) 
 713:	00 4e 75             	add    %cl,0x75(%rsi)
 716:	6d                   	insl   (%dx),%es:(%rdi)
 717:	70 61                	jo     77a <.debug_str+0x77a>
 719:	64 38 00             	cmp    %al,%fs:(%rax)
 71c:	4e 75 6d             	rex.WRX jne 78c <.debug_str+0x78c>
 71f:	70 61                	jo     782 <.debug_str+0x782>
 721:	64 39 00             	cmp    %eax,%fs:(%rax)
 724:	50                   	push   %rax
 725:	65 72 63             	gs jb  78b <.debug_str+0x78b>
 728:	65 6e                	outsb  %gs:(%rsi),(%dx)
 72a:	74 61                	je     78d <.debug_str+0x78d>
 72c:	67 65 00 4c 65 66    	add    %cl,%gs:0x66(%ebp,%eiz,2)
 732:	74 42                	je     776 <.debug_str+0x776>
 734:	72 61                	jb     797 <.debug_str+0x797>
 736:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 739:	74 00                	je     73b <.debug_str+0x73b>
 73b:	52                   	push   %rdx
 73c:	43 74 72             	rex.XB je 7b1 <.debug_str+0x7b1>
 73f:	6c                   	insb   (%dx),%es:(%rdi)
 740:	00 45 78             	add    %al,0x78(%rbp)
 743:	63 6c 61 6d          	movsxd 0x6d(%rcx,%riz,2),%ebp
 747:	61                   	(bad)  
 748:	74 69                	je     7b3 <.debug_str+0x7b3>
 74a:	6f                   	outsl  %ds:(%rsi),(%dx)
 74b:	6e                   	outsb  %ds:(%rsi),(%dx)
 74c:	00 63 6f             	add    %ah,0x6f(%rbx)
 74f:	64 65 00 51 75       	fs add %dl,%gs:0x75(%rcx)
 754:	6f                   	outsl  %ds:(%rsi),(%dx)
 755:	74 65                	je     7bc <.debug_str+0x7bc>
 757:	00 43 6f             	add    %al,0x6f(%rbx)
 75a:	6d                   	insl   (%dx),%es:(%rdi)
 75b:	70 75                	jo     7d2 <.debug_str+0x7d2>
 75d:	74 65                	je     7c4 <.debug_str+0x7c4>
 75f:	72 00                	jb     761 <.debug_str+0x761>
 761:	5f                   	pop    %rdi
 762:	5a                   	pop    %rdx
 763:	4e 37                	rex.WRX (bad) 
 765:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 767:	6e                   	outsb  %ds:(%rsi),(%dx)
 768:	73 6f                	jae    7d9 <.debug_str+0x7d9>
 76a:	6c                   	insb   (%dx),%es:(%rdi)
 76b:	65 31 35 52 65 6e 64 	xor    %esi,%gs:0x646e6552(%rip)        # 646e6cc4 <ConsoleKeyEventHandler(Input::Key, bool)+0x646e6854>
 772:	65 72 4d             	gs jb  7c2 <.debug_str+0x7c2>
 775:	6f                   	outsl  %ds:(%rsi),(%dx)
 776:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 77d:	45 
 77e:	76 00                	jbe    780 <.debug_str+0x780>
 780:	41 72 72             	rex.B jb 7f5 <.debug_str+0x7f5>
 783:	6f                   	outsl  %ds:(%rsi),(%dx)
 784:	77 52                	ja     7d8 <.debug_str+0x7d8>
 786:	69 67 68 74 00 75 69 	imul   $0x69750074,0x68(%rdi),%esp
 78d:	6e                   	outsb  %ds:(%rsi),(%dx)
 78e:	74 38                	je     7c8 <.debug_str+0x7c8>
 790:	5f                   	pop    %rdi
 791:	74 00                	je     793 <.debug_str+0x793>
 793:	4d 75 6c             	rex.WRB jne 802 <.debug_str+0x802>
 796:	74 69                	je     801 <.debug_str+0x801>
 798:	70 6c                	jo     806 <.debug_str+0x806>
 79a:	79 00                	jns    79c <.debug_str+0x79c>
 79c:	4e 75 6d             	rex.WRX jne 80c <.debug_str+0x80c>
 79f:	70 61                	jo     802 <.debug_str+0x802>
 7a1:	64 53                	fs push %rbx
 7a3:	6c                   	insb   (%dx),%es:(%rdi)
 7a4:	61                   	(bad)  
 7a5:	73 68                	jae    80f <.debug_str+0x80f>
 7a7:	00 50 61             	add    %dl,0x61(%rax)
 7aa:	75 73                	jne    81f <.debug_str+0x81f>
 7ac:	65 42 72 65          	gs rex.X jb 815 <.debug_str+0x815>
 7b0:	61                   	(bad)  
 7b1:	6b 00 45             	imul   $0x45,(%rax),%eax
 7b4:	73 63                	jae    819 <.debug_str+0x819>
 7b6:	61                   	(bad)  
 7b7:	70 65                	jo     81e <.debug_str+0x81e>
 7b9:	00 6d 5f             	add    %ch,0x5f(%rbp)
 7bc:	42 75 66             	rex.X jne 825 <.debug_str+0x825>
 7bf:	66 65 72 73          	data16 gs jb 836 <.debug_str+0x836>
 7c3:	00 43 61             	add    %al,0x61(%rbx)
 7c6:	6c                   	insb   (%dx),%es:(%rdi)
 7c7:	63 75 6c             	movsxd 0x6c(%rbp),%esi
 7ca:	61                   	(bad)  
 7cb:	74 6f                	je     83c <.debug_str+0x83c>
 7cd:	72 00                	jb     7cf <.debug_str+0x7cf>
 7cf:	4e 75 6d             	rex.WRX jne 83f <.debug_str+0x83f>
 7d2:	70 61                	jo     835 <.debug_str+0x835>
 7d4:	64 50                	fs push %rax
 7d6:	65 72 69             	gs jb  842 <.debug_str+0x842>
 7d9:	6f                   	outsl  %ds:(%rsi),(%dx)
 7da:	64 00 51 75          	add    %dl,%fs:0x75(%rcx)
 7de:	65 73 74             	gs jae 855 <.debug_str+0x855>
 7e1:	69 6f 6e 00 5f 5a 4e 	imul   $0x4e5a5f00,0x6e(%rdi),%ebp
 7e8:	35 56 69 64 65       	xor    $0x65646956,%eax
 7ed:	6f                   	outsl  %ds:(%rsi),(%dx)
 7ee:	31 37                	xor    %esi,(%rdi)
 7f0:	54                   	push   %rsp
 7f1:	65 78 74             	gs js  868 <.debug_str+0x868>
 7f4:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 7f6:	64 65 50             	fs gs push %rax
 7f9:	72 65                	jb     860 <.debug_str+0x860>
 7fb:	73 65                	jae    862 <.debug_str+0x862>
 7fd:	6e                   	outsb  %ds:(%rsi),(%dx)
 7fe:	74 65                	je     865 <.debug_str+0x865>
 800:	72 36                	jb     838 <.debug_str+0x838>
 802:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 804:	76 65                	jbe    86b <.debug_str+0x86b>
 806:	55                   	push   %rbp
 807:	70 45                	jo     84e <.debug_str+0x84e>
 809:	76 00                	jbe    80b <.debug_str+0x80b>
 80b:	6d                   	insl   (%dx),%es:(%rdi)
 80c:	5f                   	pop    %rdi
 80d:	4f                   	rex.WRXB
 80e:	66 66 73 65          	data16 data16 jae 877 <.debug_str+0x877>
 812:	74 59                	je     86d <.debug_str+0x86d>
 814:	00 53 70             	add    %dl,0x70(%rbx)
 817:	61                   	(bad)  
 818:	63 65 00             	movsxd 0x0(%rbp),%esp
 81b:	53                   	push   %rbx
 81c:	6c                   	insb   (%dx),%es:(%rdi)
 81d:	65 65 70 00          	gs gs jo 821 <.debug_str+0x821>
 821:	5f                   	pop    %rdi
 822:	5a                   	pop    %rdx
 823:	4e 37                	rex.WRX (bad) 
 825:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 827:	6e                   	outsb  %ds:(%rsi),(%dx)
 828:	73 6f                	jae    899 <ConsoleKeyEventHandler(Input::Key, bool)+0x429>
 82a:	6c                   	insb   (%dx),%es:(%rdi)
 82b:	65 37                	gs (bad) 
 82d:	41                   	rex.B
 82e:	64 64 43 68 61 72 45 	fs fs rex.XB push $0x63457261
 835:	63 
 836:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
 83a:	74 00                	je     83c <.debug_str+0x83c>
 83c:	4b                   	rex.WXB
 83d:	65 79 4d             	gs jns 88d <ConsoleKeyEventHandler(Input::Key, bool)+0x41d>
 840:	6f                   	outsl  %ds:(%rsi),(%dx)
 841:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 848:	00 
 849:	4c 53                	rex.WR push %rbx
 84b:	68 69 66 74 00       	push   $0x746669
 850:	5f                   	pop    %rdi
 851:	5a                   	pop    %rdx
 852:	32 32                	xor    (%rdx),%dh
 854:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 856:	6e                   	outsb  %ds:(%rsi),(%dx)
 857:	73 6f                	jae    8c8 <ConsoleKeyEventHandler(Input::Key, bool)+0x458>
 859:	6c                   	insb   (%dx),%es:(%rdi)
 85a:	65 4b                	gs rex.WXB
 85c:	65 79 45             	gs jns 8a4 <ConsoleKeyEventHandler(Input::Key, bool)+0x434>
 85f:	76 65                	jbe    8c6 <ConsoleKeyEventHandler(Input::Key, bool)+0x456>
 861:	6e                   	outsb  %ds:(%rsi),(%dx)
 862:	74 48                	je     8ac <ConsoleKeyEventHandler(Input::Key, bool)+0x43c>
 864:	61                   	(bad)  
 865:	6e                   	outsb  %ds:(%rsi),(%dx)
 866:	64 6c                	fs insb (%dx),%es:(%rdi)
 868:	65 72 4e             	gs jb  8b9 <ConsoleKeyEventHandler(Input::Key, bool)+0x449>
 86b:	35 49 6e 70 75       	xor    $0x75706e49,%eax
 870:	74 33                	je     8a5 <ConsoleKeyEventHandler(Input::Key, bool)+0x435>
 872:	4b                   	rex.WXB
 873:	65 79 45             	gs jns 8bb <ConsoleKeyEventHandler(Input::Key, bool)+0x44b>
 876:	62                   	.byte 0x62
	...

Disassembly of section .debug_line_str:

0000000000000000 <.debug_line_str>:
}
   0:	2f                   	(bad)  
   1:	68 6f 6d 65 2f       	push   $0x2f656d6f
   6:	75 6d                	jne    75 <.debug_line_str+0x75>
   8:	61                   	(bad)  
   9:	72 69                	jb     74 <.debug_line_str+0x74>
   b:	6e                   	outsb  %ds:(%rsi),(%dx)
   c:	2f                   	(bad)  
   d:	73 6f                	jae    7e <.debug_line_str+0x7e>
   f:	75 72                	jne    83 <.debug_line_str+0x83>
}
  11:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  14:	6e                   	outsb  %ds:(%rsi),(%dx)
  15:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  1c:	65 
  1d:	72 6e                	jb     8d <.debug_line_str+0x8d>
  1f:	65 6c                	gs insb (%dx),%es:(%rdi)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  21:	00 73 72             	add    %dh,0x72(%rbx)
  24:	63 2f                	movsxd (%rdi),%ebp
  26:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  28:	70 75                	jo     9f <.debug_line_str+0x9f>
  2a:	74 2f                	je     5b <.debug_line_str+0x5b>
  2c:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  2e:	6e                   	outsb  %ds:(%rsi),(%dx)
  2f:	73 6f                	jae    a0 <.debug_line_str+0xa0>
  31:	6c                   	insb   (%dx),%es:(%rdi)
  32:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
{
  35:	70 6c                	jo     a3 <.debug_line_str+0xa3>
  37:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  3b:	2f                   	(bad)  
  3c:	68 6f 6d 65 2f       	push   $0x2f656d6f
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  41:	75 6d                	jne    b0 <.debug_line_str+0xb0>
  43:	61                   	(bad)  
  44:	72 69                	jb     af <.debug_line_str+0xaf>
  46:	6e                   	outsb  %ds:(%rsi),(%dx)
  47:	2f                   	(bad)  
  48:	73 6f                	jae    b9 <.debug_line_str+0xb9>
{
  4a:	75 72                	jne    be <.debug_line_str+0xbe>
  4c:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  4f:	6e                   	outsb  %ds:(%rsi),(%dx)
  50:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  57:	65 
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  58:	72 6e                	jb     c8 <.debug_line_str+0xc8>
  5a:	65 6c                	gs insb (%dx),%es:(%rdi)
  5c:	00 73 72             	add    %dh,0x72(%rbx)
  5f:	63 2f                	movsxd (%rdi),%ebp
  61:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  63:	70 75                	jo     da <.debug_line_str+0xda>
  65:	74 00                	je     67 <.debug_line_str+0x67>
  67:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
  6e:	2f                   	(bad)  
  6f:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
  71:	70 75                	jo     e8 <.debug_line_str+0xe8>
  73:	74 00                	je     75 <.debug_line_str+0x75>
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
  75:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  7c:	2f                   	(bad)  
  7d:	56                   	push   %rsi
  7e:	69 64 65 6f 00 2f 68 	imul   $0x6f682f00,0x6f(%rbp,%riz,2),%esp
  85:	6f 
  86:	6d                   	insl   (%dx),%es:(%rdi)
  87:	65 2f                	gs (bad) 
  89:	75 6d                	jne    f8 <.debug_line_str+0xf8>
  8b:	61                   	(bad)  
  8c:	72 69                	jb     f7 <.debug_line_str+0xf7>
  8e:	6e                   	outsb  %ds:(%rsi),(%dx)
  8f:	2f                   	(bad)  
  90:	62 75                	(bad)  
  92:	69 6c 64 2f 78 38 36 	imul   $0x5f363878,0x2f(%rsp,%riz,2),%ebp
  99:	5f 
  9a:	36 34 2d             	ss xor $0x2d,%al
  9d:	65 6c                	gs insb (%dx),%es:(%rdi)
  9f:	66 2f                	data16 (bad) 
  a1:	6c                   	insb   (%dx),%es:(%rdi)
  a2:	69 62 2f 67 63 63 2f 	imul   $0x2f636367,0x2f(%rdx),%esp
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
  a9:	78 38                	js     e3 <.debug_line_str+0xe3>
  ab:	36 5f                	ss pop %rdi
  ad:	36 34 2d             	ss xor $0x2d,%al
  b0:	65 6c                	gs insb (%dx),%es:(%rdi)
  b2:	66 2f                	data16 (bad) 
  b4:	31 31                	xor    %esi,(%rcx)
  b6:	2e 32 2e             	cs xor (%rsi),%ch
  b9:	30 2f                	xor    %ch,(%rdi)
  bb:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  c2:	00 43 6f             	add    %al,0x6f(%rbx)
  c5:	6e                   	outsb  %ds:(%rsi),(%dx)
  c6:	73 6f                	jae    137 <Console::RenderModifiers()+0x117>
  c8:	6c                   	insb   (%dx),%es:(%rdi)
  c9:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  cc:	70 6c                	jo     13a <Console::RenderModifiers()+0x11a>
  ce:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
  d2:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  d4:	6e                   	outsb  %ds:(%rsi),(%dx)
  d5:	73 6f                	jae    146 <Console::RenderModifiers()+0x126>
  d7:	6c                   	insb   (%dx),%es:(%rdi)
  d8:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  db:	70 6c                	jo     149 <Console::RenderModifiers()+0x129>
  dd:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  e1:	4b                   	rex.WXB
  e2:	65 79 43             	gs jns 128 <Console::RenderModifiers()+0x108>
  e5:	6f                   	outsl  %ds:(%rsi),(%dx)
  e6:	64 65 2e 68 00 56 69 	fs gs cs push $0x64695600
  ed:	64 
  ee:	65 6f                	outsl  %gs:(%rsi),(%dx)
  f0:	2e 68 00 54 65 78    	cs push $0x78655400
  f6:	74 4d                	je     145 <Console::RenderModifiers()+0x125>
  f8:	6f                   	outsl  %ds:(%rsi),(%dx)
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
  f9:	64 65 50             	fs gs push %rax
  fc:	72 65                	jb     163 <Console::Refresh()+0x3>
  fe:	73 65                	jae    165 <Console::Refresh()+0x5>
 100:	6e                   	outsb  %ds:(%rsi),(%dx)
 101:	74 65                	je     168 <Console::Refresh()+0x8>
 103:	72 2e                	jb     133 <Console::RenderModifiers()+0x113>
 105:	68 00 43 6f 6e       	push   $0x6e6f4300
 10a:	73 6f                	jae    17b <Console::Refresh()+0x1b>
 10c:	6c                   	insb   (%dx),%es:(%rdi)
 10d:	65 2e 68 00 73 74 64 	gs cs push $0x64747300
 114:	69 6e 74 2d 67 63 63 	imul   $0x6363672d,0x74(%rsi),%ebp
 11b:	2e                   	cs
 11c:	68                   	.byte 0x68
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
}
   0:	00 47 43             	add    %al,0x43(%rdi)
   3:	43 3a 20             	rex.XB cmp (%r8),%spl
   6:	28 47 4e             	sub    %al,0x4e(%rdi)
   9:	55                   	push   %rbp
   a:	29 20                	sub    %esp,(%rax)
   c:	31 31                	xor    %esi,(%rcx)
   e:	2e 32 2e             	cs xor (%rsi),%ch
}
  11:	30 00                	xor    %al,(%rax)

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	00 00                	add    %al,(%rax)
   6:	00 00                	add    %al,(%rax)
   8:	01 7a 52             	add    %edi,0x52(%rdx)
   b:	00 01                	add    %al,(%rcx)
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    %ebx,(%rbx)
  11:	0c 07                	or     $0x7,%al
  13:	08 90 01 00 00 10    	or     %dl,0x10000001(%rax)
  19:	00 00                	add    %al,(%rax)
  1b:	00 1c 00             	add    %bl,(%rax,%rax,1)
  1e:	00 00                	add    %al,(%rax)
  20:	00 00                	add    %al,(%rax)
  22:	00 00                	add    %al,(%rax)
  24:	01 00                	add    %eax,(%rax)
  26:	00 00                	add    %al,(%rax)
  28:	00 00                	add    %al,(%rax)
  2a:	00 00                	add    %al,(%rax)
  2c:	10 00                	adc    %al,(%rax)
  2e:	00 00                	add    %al,(%rax)
  30:	30 00                	xor    %al,(%rax)
  32:	00 00                	add    %al,(%rax)
  34:	00 00                	add    %al,(%rax)
  36:	00 00                	add    %al,(%rax)
  38:	01 00                	add    %eax,(%rax)
  3a:	00 00                	add    %al,(%rax)
  3c:	00 00                	add    %al,(%rax)
  3e:	00 00                	add    %al,(%rax)
  40:	34 00                	xor    $0x0,%al
  42:	00 00                	add    %al,(%rax)
  44:	44 00 00             	add    %r8b,(%rax)
  47:	00 00                	add    %al,(%rax)
  49:	00 00                	add    %al,(%rax)
  4b:	00 38                	add    %bh,(%rax)
  4d:	01 00                	add    %eax,(%rax)
  4f:	00 00                	add    %al,(%rax)
  51:	41 0e                	rex.B (bad) 
  53:	10 86 02 57 0d 06    	adc    %al,0x60d5702(%rsi)
  59:	48 8f 03             	rex.W pop (%rbx)
  5c:	8e 04 8d 05 8c 06 4b 	mov    0x4b068c05(,%rcx,4),%es
  63:	83 07 02             	addl   $0x2,(%rdi)
  66:	e6 c3                	out    %al,$0xc3
  68:	45 cc                	rex.RB int3 
  6a:	51                   	push   %rcx
  6b:	cd 42                	int    $0x42
  6d:	ce                   	(bad)  
  6e:	4c cf                	rex.WR iretq 
  70:	41 c6                	rex.B (bad) 
  72:	0c 07                	or     $0x7,%al
  74:	08 00                	or     %al,(%rax)
  76:	00 00                	add    %al,(%rax)
  78:	20 00                	and    %al,(%rax)
  7a:	00 00                	add    %al,(%rax)
  7c:	7c 00                	jl     7e <.eh_frame+0x7e>
  7e:	00 00                	add    %al,(%rax)
  80:	00 00                	add    %al,(%rax)
  82:	00 00                	add    %al,(%rax)
  84:	4e 00 00             	rex.WRX add %r8b,(%rax)
  87:	00 00                	add    %al,(%rax)
  89:	41 0e                	rex.B (bad) 
  8b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  91:	41 83 03 02          	addl   $0x2,(%r11)
  95:	47 c6 c3 0c          	rex.RXB mov $0xc,%r11b
  99:	07                   	(bad)  
  9a:	08 00                	or     %al,(%rax)
  9c:	24 00                	and    $0x0,%al
  9e:	00 00                	add    %al,(%rax)
  a0:	a0 00 00 00 00 00 00 	movabs 0x6800000000000000,%al
  a7:	00 68 
  a9:	00 00                	add    %al,(%rax)
  ab:	00 00                	add    %al,(%rax)
  ad:	4b 0e                	rex.WXB (bad) 
  af:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  b5:	42 8c 03             	rex.X mov %es,(%rbx)
  b8:	49 83 04 70 c3       	addq   $0xffffffffffffffc3,(%r8,%rsi,2)
  bd:	52                   	push   %rdx
  be:	cc                   	int3   
  bf:	4b c6                	rex.WXB (bad) 
  c1:	0c 07                	or     $0x7,%al
  c3:	08 34 00             	or     %dh,(%rax,%rax,1)
  c6:	00 00                	add    %al,(%rax)
  c8:	c8 00 00 00          	enter  $0x0,$0x0
  cc:	00 00                	add    %al,(%rax)
  ce:	00 00                	add    %al,(%rax)
  d0:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  d1:	00 00                	add    %al,(%rax)
  d3:	00 00                	add    %al,(%rax)
  d5:	41 0e                	rex.B (bad) 
  d7:	10 86 02 52 0d 06    	adc    %al,0x60d5202(%rsi)
  dd:	42 8c 03             	rex.X mov %es,(%rbx)
  e0:	02 4a 0a             	add    0xa(%rdx),%cl
  e3:	c6                   	(bad)  
  e4:	cc                   	int3   
  e5:	0c 07                	or     $0x7,%al
  e7:	08 41 0b             	or     %al,0xb(%rcx)
  ea:	5d                   	pop    %rbp
  eb:	0a c6                	or     %dh,%al
  ed:	cc                   	int3   
  ee:	0c 07                	or     $0x7,%al
  f0:	08 43 0b             	or     %al,0xb(%rbx)
  f3:	62 c6 cc 0c 07       	(bad)
  f8:	08 00                	or     %al,(%rax)
  fa:	00 00                	add    %al,(%rax)
  fc:	40 00 00             	rex add %al,(%rax)
  ff:	00 00                	add    %al,(%rax)
 101:	01 00                	add    %eax,(%rax)
 103:	00 00                	add    %al,(%rax)
 105:	00 00                	add    %al,(%rax)
 107:	00 97 01 00 00 00    	add    %dl,0x1(%rdi)
 10d:	41 0e                	rex.B (bad) 
 10f:	10 86 02 46 0d 06    	adc    %al,0x60d4602(%rsi)
 115:	42 8c 03             	rex.X mov %es,(%rbx)
 118:	02 51 0a             	add    0xa(%rcx),%dl
 11b:	c6                   	(bad)  
 11c:	cc                   	int3   
 11d:	0c 07                	or     $0x7,%al
 11f:	08 46 0b             	or     %al,0xb(%rsi)
 122:	6a 0a                	push   $0xa
 124:	c6                   	(bad)  
 125:	cc                   	int3   
 126:	0c 07                	or     $0x7,%al
 128:	08 46 0b             	or     %al,0xb(%rsi)
 12b:	02 67 0a             	add    0xa(%rdi),%ah
 12e:	c6                   	(bad)  
 12f:	cc                   	int3   
 130:	0c 07                	or     $0x7,%al
 132:	08 49 0b             	or     %cl,0xb(%rcx)
 135:	02 4a 0a             	add    0xa(%rdx),%cl
 138:	c6                   	(bad)  
 139:	cc                   	int3   
 13a:	0c 07                	or     $0x7,%al
 13c:	08 5e 0b             	or     %bl,0xb(%rsi)
 13f:	00 14 00             	add    %dl,(%rax,%rax,1)
 142:	00 00                	add    %al,(%rax)
 144:	44 01 00             	add    %r8d,(%rax)
 147:	00 00                	add    %al,(%rax)
 149:	00 00                	add    %al,(%rax)
 14b:	00 1f                	add    %bl,(%rdi)
	...
