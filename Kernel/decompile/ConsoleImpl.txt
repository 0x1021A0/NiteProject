
build/kernel/Input/ConsoleImpl.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <ConsoleKeyEventHandler(Input::Key, bool)>:
#include <Input/KeyCode.h>
#include <Input/Console.h>

void ConsoleKeyEventHandler(Input::Key key, bool isPressed)
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 f0                	mov    %esi,%eax
   d:	88 45 e8             	mov    %al,-0x18(%rbp)
    Console *console = g_Console;
  10:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  17:	00 00 00 
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    console->AcceptKey(key, isPressed);
  21:	0f b6 55 e8          	movzbl -0x18(%rbp),%edx
  25:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	89 ce                	mov    %ecx,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  38:	00 00 00 
  3b:	ff d0                	call   *%rax
}
  3d:	90                   	nop
  3e:	c9                   	leave  
  3f:	c3                   	ret    

0000000000000040 <Console::Console()>:

using namespace Input;

Console::Console()
  40:	55                   	push   %rbp
  41:	48 89 e5             	mov    %rsp,%rbp
  44:	53                   	push   %rbx
  45:	48 83 ec 18          	sub    $0x18,%rsp
  49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  : m_TextPresenter(new Video::TextModePresenter()),
  4d:	bf 30 00 00 00       	mov    $0x30,%edi
  52:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  59:	00 00 00 
  5c:	ff d0                	call   *%rax
  5e:	48 89 c3             	mov    %rax,%rbx
  61:	48 89 df             	mov    %rbx,%rdi
  64:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  6b:	00 00 00 
  6e:	ff d0                	call   *%rax
  70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  74:	48 89 18             	mov    %rbx,(%rax)
    m_Buffers(new uint8_t[23 * 80]),
    m_OffsetX(0),
    m_OffsetY(0),
    m_KeyModifiers(0)
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	c6 40 08 00          	movb   $0x0,0x8(%rax)
    m_Buffers(new uint8_t[23 * 80]),
  7f:	bf 30 07 00 00       	mov    $0x730,%edi
  84:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  8b:	00 00 00 
  8e:	ff d0                	call   *%rax
  90:	48 89 c2             	mov    %rax,%rdx
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	48 89 50 10          	mov    %rdx,0x10(%rax)
    m_OffsetX(0),
  9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9f:	c6 40 19 00          	movb   $0x0,0x19(%rax)
    m_OffsetY(0),
  a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a7:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
{
    Refresh();
  ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  af:	48 89 c7             	mov    %rax,%rdi
  b2:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  b9:	00 00 00 
  bc:	ff d0                	call   *%rax
}
  be:	90                   	nop
  bf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  c3:	c9                   	leave  
  c4:	c3                   	ret    
  c5:	90                   	nop

00000000000000c6 <Console::~Console()>:

Console::~Console()
  c6:	55                   	push   %rbp
  c7:	48 89 e5             	mov    %rsp,%rbp
  ca:	48 83 ec 08          	sub    $0x8,%rsp
  ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
{

}
  d2:	90                   	nop
  d3:	c9                   	leave  
  d4:	c3                   	ret    
  d5:	90                   	nop

00000000000000d6 <Console::Render()>:

void Console::Render()
{
  d6:	55                   	push   %rbp
  d7:	48 89 e5             	mov    %rsp,%rbp
  da:	53                   	push   %rbx
  db:	48 83 ec 18          	sub    $0x18,%rsp
  df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    RenderModifiers();
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 89 c7             	mov    %rax,%rdi
  ea:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  f1:	00 00 00 
  f4:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 104:	ff ff ff 
 107:	48 21 da             	and    %rbx,%rdx
 10a:	48 89 d3             	mov    %rdx,%rbx
 10d:	89 d9                	mov    %ebx,%ecx
 10f:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
 116:	00 00 00 
 119:	48 09 ca             	or     %rcx,%rdx
 11c:	48 89 d3             	mov    %rdx,%rbx
 11f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
 125:	b9 0f 00 00 00       	mov    $0xf,%ecx
 12a:	ba 3e 00 00 00       	mov    $0x3e,%edx
 12f:	48 89 de             	mov    %rbx,%rsi
 132:	48 89 c7             	mov    %rax,%rdi
 135:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 13c:	00 00 00 
 13f:	ff d0                	call   *%rax
}
 141:	90                   	nop
 142:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 146:	c9                   	leave  
 147:	c3                   	ret    

0000000000000148 <Console::Refresh()>:

void Console::Refresh()
{
 148:	55                   	push   %rbp
 149:	48 89 e5             	mov    %rsp,%rbp
 14c:	48 83 ec 10          	sub    $0x10,%rsp
 150:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    m_TextPresenter->Clear();
 154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 158:	48 8b 00             	mov    (%rax),%rax
 15b:	48 8b 00             	mov    (%rax),%rax
 15e:	48 8b 10             	mov    (%rax),%rdx
 161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 165:	48 8b 00             	mov    (%rax),%rax
 168:	48 89 c7             	mov    %rax,%rdi
 16b:	ff d2                	call   *%rdx
    Render();
 16d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 171:	48 89 c7             	mov    %rax,%rdi
 174:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 17b:	00 00 00 
 17e:	ff d0                	call   *%rax
}
 180:	90                   	nop
 181:	c9                   	leave  
 182:	c3                   	ret    
 183:	90                   	nop

0000000000000184 <Console::RenderModifiers()>:

void Console::RenderModifiers()
{
 184:	55                   	push   %rbp
 185:	48 89 e5             	mov    %rsp,%rbp
 188:	41 57                	push   %r15
 18a:	41 56                	push   %r14
 18c:	41 55                	push   %r13
 18e:	41 54                	push   %r12
 190:	53                   	push   %rbx
 191:	48 83 ec 28          	sub    $0x28,%rsp
 195:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
 199:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 19d:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
 1a1:	0f b6 d2             	movzbl %dl,%edx
 1a4:	83 e2 08             	and    $0x8,%edx
 1a7:	85 d2                	test   %edx,%edx
 1a9:	0f 95 c2             	setne  %dl
 1ac:	88 55 cf             	mov    %dl,-0x31(%rbp)
    bool shift = m_KeyModifiers & KeyModifiersShift;
 1af:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 1b3:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
 1b7:	0f b6 d2             	movzbl %dl,%edx
 1ba:	83 e2 02             	and    $0x2,%edx
 1bd:	85 d2                	test   %edx,%edx
 1bf:	0f 95 c2             	setne  %dl
 1c2:	88 55 ce             	mov    %dl,-0x32(%rbp)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
 1c5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 1c9:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
 1cd:	0f b6 d2             	movzbl %dl,%edx
 1d0:	83 e2 04             	and    $0x4,%edx
 1d3:	85 d2                	test   %edx,%edx
 1d5:	0f 95 c2             	setne  %dl
 1d8:	88 55 cd             	mov    %dl,-0x33(%rbp)
    bool alt = m_KeyModifiers & KeyModifiersAlt;
 1db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 1df:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
 1e3:	0f b6 d2             	movzbl %dl,%edx
 1e6:	83 e2 01             	and    $0x1,%edx
 1e9:	85 d2                	test   %edx,%edx
 1eb:	0f 95 c2             	setne  %dl
 1ee:	88 55 cc             	mov    %dl,-0x34(%rbp)

    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
 1f1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 1f5:	48 8b 3a             	mov    (%rdx),%rdi
 1f8:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 1ff:	ff ff ff 
 202:	48 21 d0             	and    %rdx,%rax
 205:	89 c0                	mov    %eax,%eax
 207:	41 b8 00 00 00 00    	mov    $0x0,%r8d
 20d:	b9 0f 00 00 00       	mov    $0xf,%ecx
 212:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 219:	00 00 00 
 21c:	48 89 c6             	mov    %rax,%rsi
 21f:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 226:	00 00 00 
 229:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
 22b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 22f:	48 8b 38             	mov    (%rax),%rdi
 232:	80 7d cf 00          	cmpb   $0x0,-0x31(%rbp)
 236:	74 0c                	je     244 <Console::RenderModifiers()+0xc0>
 238:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 23f:	00 00 00 
 242:	eb 0a                	jmp    24e <Console::RenderModifiers()+0xca>
 244:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 24b:	00 00 00 
 24e:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 255:	ff ff ff 
 258:	4c 21 fa             	and    %r15,%rdx
 25b:	48 83 ca 09          	or     $0x9,%rdx
 25f:	49 89 d7             	mov    %rdx,%r15
 262:	44 89 fa             	mov    %r15d,%edx
 265:	49 89 d7             	mov    %rdx,%r15
 268:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
 26e:	b9 00 00 00 00       	mov    $0x0,%ecx
 273:	48 89 c2             	mov    %rax,%rdx
 276:	4c 89 fe             	mov    %r15,%rsi
 279:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 280:	00 00 00 
 283:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
 285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 289:	48 8b 00             	mov    (%rax),%rax
 28c:	80 7d cd 00          	cmpb   $0x0,-0x33(%rbp)
 290:	74 07                	je     299 <Console::RenderModifiers()+0x115>
 292:	be 0f 00 00 00       	mov    $0xf,%esi
 297:	eb 05                	jmp    29e <Console::RenderModifiers()+0x11a>
 299:	be 00 00 00 00       	mov    $0x0,%esi
 29e:	80 7d cd 00          	cmpb   $0x0,-0x33(%rbp)
 2a2:	74 07                	je     2ab <Console::RenderModifiers()+0x127>
 2a4:	b9 00 00 00 00       	mov    $0x0,%ecx
 2a9:	eb 05                	jmp    2b0 <Console::RenderModifiers()+0x12c>
 2ab:	b9 0f 00 00 00       	mov    $0xf,%ecx
 2b0:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 2b7:	ff ff ff 
 2ba:	4c 21 f2             	and    %r14,%rdx
 2bd:	48 83 ca 0d          	or     $0xd,%rdx
 2c1:	49 89 d6             	mov    %rdx,%r14
 2c4:	44 89 f2             	mov    %r14d,%edx
 2c7:	49 89 d6             	mov    %rdx,%r14
 2ca:	41 89 f0             	mov    %esi,%r8d
 2cd:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 2d4:	00 00 00 
 2d7:	4c 89 f6             	mov    %r14,%rsi
 2da:	48 89 c7             	mov    %rax,%rdi
 2dd:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 2e4:	00 00 00 
 2e7:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
 2e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2ed:	48 8b 00             	mov    (%rax),%rax
 2f0:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
 2f4:	74 07                	je     2fd <Console::RenderModifiers()+0x179>
 2f6:	be 0f 00 00 00       	mov    $0xf,%esi
 2fb:	eb 05                	jmp    302 <Console::RenderModifiers()+0x17e>
 2fd:	be 00 00 00 00       	mov    $0x0,%esi
 302:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
 306:	74 07                	je     30f <Console::RenderModifiers()+0x18b>
 308:	b9 00 00 00 00       	mov    $0x0,%ecx
 30d:	eb 05                	jmp    314 <Console::RenderModifiers()+0x190>
 30f:	b9 0f 00 00 00       	mov    $0xf,%ecx
 314:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 31b:	ff ff ff 
 31e:	4c 21 ea             	and    %r13,%rdx
 321:	48 83 ca 14          	or     $0x14,%rdx
 325:	49 89 d5             	mov    %rdx,%r13
 328:	44 89 ea             	mov    %r13d,%edx
 32b:	49 89 d5             	mov    %rdx,%r13
 32e:	41 89 f0             	mov    %esi,%r8d
 331:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 338:	00 00 00 
 33b:	4c 89 ee             	mov    %r13,%rsi
 33e:	48 89 c7             	mov    %rax,%rdi
 341:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 348:	00 00 00 
 34b:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
 34d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 351:	48 8b 00             	mov    (%rax),%rax
 354:	80 7d cc 00          	cmpb   $0x0,-0x34(%rbp)
 358:	74 07                	je     361 <Console::RenderModifiers()+0x1dd>
 35a:	be 0f 00 00 00       	mov    $0xf,%esi
 35f:	eb 05                	jmp    366 <Console::RenderModifiers()+0x1e2>
 361:	be 00 00 00 00       	mov    $0x0,%esi
 366:	80 7d cc 00          	cmpb   $0x0,-0x34(%rbp)
 36a:	74 07                	je     373 <Console::RenderModifiers()+0x1ef>
 36c:	b9 00 00 00 00       	mov    $0x0,%ecx
 371:	eb 05                	jmp    378 <Console::RenderModifiers()+0x1f4>
 373:	b9 0f 00 00 00       	mov    $0xf,%ecx
 378:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 37f:	ff ff ff 
 382:	4c 21 e2             	and    %r12,%rdx
 385:	48 83 ca 1c          	or     $0x1c,%rdx
 389:	49 89 d4             	mov    %rdx,%r12
 38c:	44 89 e2             	mov    %r12d,%edx
 38f:	49 89 d4             	mov    %rdx,%r12
 392:	41 89 f0             	mov    %esi,%r8d
 395:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 39c:	00 00 00 
 39f:	4c 89 e6             	mov    %r12,%rsi
 3a2:	48 89 c7             	mov    %rax,%rdi
 3a5:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 3ac:	00 00 00 
 3af:	ff d0                	call   *%rax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 3b1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 3b5:	48 8b 00             	mov    (%rax),%rax
 3b8:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 3bf:	ff ff ff 
 3c2:	48 21 da             	and    %rbx,%rdx
 3c5:	48 89 d3             	mov    %rdx,%rbx
 3c8:	89 d9                	mov    %ebx,%ecx
 3ca:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
 3d1:	00 00 00 
 3d4:	48 09 ca             	or     %rcx,%rdx
 3d7:	48 89 d3             	mov    %rdx,%rbx
 3da:	41 b8 00 00 00 00    	mov    $0x0,%r8d
 3e0:	b9 0f 00 00 00       	mov    $0xf,%ecx
 3e5:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx
 3ec:	00 00 00 
 3ef:	48 89 de             	mov    %rbx,%rsi
 3f2:	48 89 c7             	mov    %rax,%rdi
 3f5:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 3fc:	00 00 00 
 3ff:	ff d0                	call   *%rax
}
 401:	90                   	nop
 402:	48 83 c4 28          	add    $0x28,%rsp
 406:	5b                   	pop    %rbx
 407:	41 5c                	pop    %r12
 409:	41 5d                	pop    %r13
 40b:	41 5e                	pop    %r14
 40d:	41 5f                	pop    %r15
 40f:	5d                   	pop    %rbp
 410:	c3                   	ret    
 411:	90                   	nop

0000000000000412 <Console::AcceptKey(Input::Key, bool)>:

void Console::AcceptKey(Input::Key key, bool isPressed)
{
 412:	55                   	push   %rbp
 413:	48 89 e5             	mov    %rsp,%rbp
 416:	53                   	push   %rbx
 417:	48 83 ec 28          	sub    $0x28,%rsp
 41b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
 41f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
 422:	89 d0                	mov    %edx,%eax
 424:	88 45 d0             	mov    %al,-0x30(%rbp)
    switch (key)
 427:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 42a:	83 e8 05             	sub    $0x5,%eax
 42d:	83 f8 1d             	cmp    $0x1d,%eax
 430:	0f 87 58 02 00 00    	ja     68e <Console::AcceptKey(Input::Key, bool)+0x27c>
 436:	89 c0                	mov    %eax,%eax
 438:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 43f:	00 
 440:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 447:	00 00 00 
 44a:	48 01 d0             	add    %rdx,%rax
 44d:	48 8b 00             	mov    (%rax),%rax
 450:	ff e0                	jmp    *%rax
    {
    case CapsLock:
        if (isPressed)
 452:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
 456:	74 3c                	je     494 <Console::AcceptKey(Input::Key, bool)+0x82>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 45c:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 460:	0f b6 c0             	movzbl %al,%eax
 463:	83 e0 08             	and    $0x8,%eax
 466:	85 c0                	test   %eax,%eax
 468:	74 16                	je     480 <Console::AcceptKey(Input::Key, bool)+0x6e>
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 46a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 46e:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 472:	83 e0 f7             	and    $0xfffffff7,%eax
 475:	89 c2                	mov    %eax,%edx
 477:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 47b:	88 50 08             	mov    %dl,0x8(%rax)
 47e:	eb 14                	jmp    494 <Console::AcceptKey(Input::Key, bool)+0x82>
            else
                m_KeyModifiers |= KeyModifiersCapsLock;
 480:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 484:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 488:	83 c8 08             	or     $0x8,%eax
 48b:	89 c2                	mov    %eax,%edx
 48d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 491:	88 50 08             	mov    %dl,0x8(%rax)
        RenderModifiers();
 494:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 498:	48 89 c7             	mov    %rax,%rdi
 49b:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 4a2:	00 00 00 
 4a5:	ff d0                	call   *%rax
        break;
 4a7:	e9 3f 02 00 00       	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case LShift:
    case RShift:
        if (isPressed)
 4ac:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
 4b0:	74 16                	je     4c8 <Console::AcceptKey(Input::Key, bool)+0xb6>
            m_KeyModifiers |= KeyModifiersShift;
 4b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4b6:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 4ba:	83 c8 02             	or     $0x2,%eax
 4bd:	89 c2                	mov    %eax,%edx
 4bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4c3:	88 50 08             	mov    %dl,0x8(%rax)
 4c6:	eb 14                	jmp    4dc <Console::AcceptKey(Input::Key, bool)+0xca>
        else
            m_KeyModifiers &= ~(KeyModifiersShift);
 4c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4cc:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 4d0:	83 e0 fd             	and    $0xfffffffd,%eax
 4d3:	89 c2                	mov    %eax,%edx
 4d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4d9:	88 50 08             	mov    %dl,0x8(%rax)
        RenderModifiers();
 4dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4e0:	48 89 c7             	mov    %rax,%rdi
 4e3:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 4ea:	00 00 00 
 4ed:	ff d0                	call   *%rax
        break;
 4ef:	e9 f7 01 00 00       	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case LCtrl:
    case RCtrl:
        if (isPressed)
 4f4:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
 4f8:	74 16                	je     510 <Console::AcceptKey(Input::Key, bool)+0xfe>
            m_KeyModifiers |= KeyModifiersCtrl;
 4fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4fe:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 502:	83 c8 04             	or     $0x4,%eax
 505:	89 c2                	mov    %eax,%edx
 507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 50b:	88 50 08             	mov    %dl,0x8(%rax)
 50e:	eb 14                	jmp    524 <Console::AcceptKey(Input::Key, bool)+0x112>
        else
            m_KeyModifiers &= ~(KeyModifiersCtrl);
 510:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 514:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 518:	83 e0 fb             	and    $0xfffffffb,%eax
 51b:	89 c2                	mov    %eax,%edx
 51d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 521:	88 50 08             	mov    %dl,0x8(%rax)
        RenderModifiers();
 524:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 528:	48 89 c7             	mov    %rax,%rdi
 52b:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 532:	00 00 00 
 535:	ff d0                	call   *%rax
        break;
 537:	e9 af 01 00 00       	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case LAlt:
    case RAlt:
        if (isPressed)
 53c:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
 540:	74 16                	je     558 <Console::AcceptKey(Input::Key, bool)+0x146>
            m_KeyModifiers |= KeyModifiersAlt;
 542:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 546:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 54a:	83 c8 01             	or     $0x1,%eax
 54d:	89 c2                	mov    %eax,%edx
 54f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 553:	88 50 08             	mov    %dl,0x8(%rax)
 556:	eb 14                	jmp    56c <Console::AcceptKey(Input::Key, bool)+0x15a>
        else
            m_KeyModifiers &= ~(KeyModifiersAlt);
 558:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 55c:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 560:	83 e0 fe             	and    $0xfffffffe,%eax
 563:	89 c2                	mov    %eax,%edx
 565:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 569:	88 50 08             	mov    %dl,0x8(%rax)
        RenderModifiers();
 56c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 570:	48 89 c7             	mov    %rax,%rdi
 573:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 57a:	00 00 00 
 57d:	ff d0                	call   *%rax
        break;
 57f:	e9 67 01 00 00       	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case F5:
        m_TextPresenter->Clear();
 584:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 588:	48 8b 00             	mov    (%rax),%rax
 58b:	48 8b 00             	mov    (%rax),%rax
 58e:	48 8b 10             	mov    (%rax),%rdx
 591:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 595:	48 8b 00             	mov    (%rax),%rax
 598:	48 89 c7             	mov    %rax,%rdi
 59b:	ff d2                	call   *%rdx
        RenderModifiers();
 59d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5a1:	48 89 c7             	mov    %rax,%rdi
 5a4:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 5ab:	00 00 00 
 5ae:	ff d0                	call   *%rax
        break;
 5b0:	e9 36 01 00 00       	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case Enter:
        if (!isPressed) break;
 5b5:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
 5b9:	83 f0 01             	xor    $0x1,%eax
 5bc:	84 c0                	test   %al,%al
 5be:	0f 85 26 01 00 00    	jne    6ea <Console::AcceptKey(Input::Key, bool)+0x2d8>

        m_LineLength = 0;
 5c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5c8:	c6 40 1b 00          	movb   $0x0,0x1b(%rax)
        m_OffsetX = 1;
 5cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5d0:	c6 40 19 01          	movb   $0x1,0x19(%rax)
        if (m_OffsetY >= 22)
 5d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5d8:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 5dc:	3c 15                	cmp    $0x15,%al
 5de:	76 2b                	jbe    60b <Console::AcceptKey(Input::Key, bool)+0x1f9>
        {
            m_TextPresenter->MoveUp();
 5e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5e4:	48 8b 00             	mov    (%rax),%rax
 5e7:	48 89 c7             	mov    %rax,%rdi
 5ea:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 5f1:	00 00 00 
 5f4:	ff d0                	call   *%rax
            RenderModifiers();
 5f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5fa:	48 89 c7             	mov    %rax,%rdi
 5fd:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 604:	00 00 00 
 607:	ff d0                	call   *%rax
 609:	eb 12                	jmp    61d <Console::AcceptKey(Input::Key, bool)+0x20b>
        } else m_OffsetY++;
 60b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 60f:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 613:	8d 50 01             	lea    0x1(%rax),%edx
 616:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 61a:	88 50 1a             	mov    %dl,0x1a(%rax)
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 61d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 621:	48 8b 00             	mov    (%rax),%rax
 624:	48 ba 00 00 00 00 ff 	movabs $0xffffffff00000000,%rdx
 62b:	ff ff ff 
 62e:	48 21 da             	and    %rbx,%rdx
 631:	48 89 d3             	mov    %rdx,%rbx
 634:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 638:	0f b6 52 1a          	movzbl 0x1a(%rdx),%edx
 63c:	0f b6 d2             	movzbl %dl,%edx
 63f:	83 c2 02             	add    $0x2,%edx
 642:	89 d2                	mov    %edx,%edx
 644:	48 c1 e2 20          	shl    $0x20,%rdx
 648:	89 d9                	mov    %ebx,%ecx
 64a:	48 09 ca             	or     %rcx,%rdx
 64d:	48 89 d3             	mov    %rdx,%rbx
 650:	41 b8 00 00 00 00    	mov    $0x0,%r8d
 656:	b9 0f 00 00 00       	mov    $0xf,%ecx
 65b:	ba 3e 00 00 00       	mov    $0x3e,%edx
 660:	48 89 de             	mov    %rbx,%rsi
 663:	48 89 c7             	mov    %rax,%rdi
 666:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 66d:	00 00 00 
 670:	ff d0                	call   *%rax
        break;
 672:	eb 77                	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case Space:
        AddChar(' '); break;
 674:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 678:	be 20 00 00 00       	mov    $0x20,%esi
 67d:	48 89 c7             	mov    %rax,%rdi
 680:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 687:	00 00 00 
 68a:	ff d0                	call   *%rax
 68c:	eb 5d                	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
    case Backspace:
        
        break;
    default:
        char code = ApplyModifiers(key, m_KeyModifiers);
 68e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 692:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 696:	0f b6 d0             	movzbl %al,%edx
 699:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 69c:	89 d6                	mov    %edx,%esi
 69e:	89 c7                	mov    %eax,%edi
 6a0:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 6a7:	00 00 00 
 6aa:	ff d0                	call   *%rax
 6ac:	88 45 ef             	mov    %al,-0x11(%rbp)
        if (!code || !isPressed || m_LineLength == 255) break;
 6af:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
 6b3:	74 36                	je     6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
 6b5:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
 6b9:	83 f0 01             	xor    $0x1,%eax
 6bc:	84 c0                	test   %al,%al
 6be:	75 2b                	jne    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
 6c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 6c4:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
 6c8:	3c ff                	cmp    $0xff,%al
 6ca:	74 1f                	je     6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
        
        AddChar(code);
 6cc:	0f be 55 ef          	movsbl -0x11(%rbp),%edx
 6d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 6d4:	89 d6                	mov    %edx,%esi
 6d6:	48 89 c7             	mov    %rax,%rdi
 6d9:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 6e0:	00 00 00 
 6e3:	ff d0                	call   *%rax
        break;
 6e5:	eb 04                	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
        break;
 6e7:	90                   	nop
 6e8:	eb 01                	jmp    6eb <Console::AcceptKey(Input::Key, bool)+0x2d9>
        if (!isPressed) break;
 6ea:	90                   	nop
    }
}
 6eb:	90                   	nop
 6ec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 6f0:	c9                   	leave  
 6f1:	c3                   	ret    

00000000000006f2 <Console::AddChar(char)>:

void Console::AddChar(char c)
{
 6f2:	55                   	push   %rbp
 6f3:	48 89 e5             	mov    %rsp,%rbp
 6f6:	48 83 ec 10          	sub    $0x10,%rsp
 6fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
 6fe:	89 f2                	mov    %esi,%edx
 700:	88 55 f4             	mov    %dl,-0xc(%rbp)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 703:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 707:	48 8b 3a             	mov    (%rdx),%rdi
 70a:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
 70e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 712:	0f b6 49 19          	movzbl 0x19(%rcx),%ecx
 716:	0f b6 c9             	movzbl %cl,%ecx
 719:	89 ce                	mov    %ecx,%esi
 71b:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
 722:	ff ff ff 
 725:	48 21 c8             	and    %rcx,%rax
 728:	48 09 f0             	or     %rsi,%rax
 72b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 72f:	0f b6 49 1a          	movzbl 0x1a(%rcx),%ecx
 733:	0f b6 c9             	movzbl %cl,%ecx
 736:	83 c1 02             	add    $0x2,%ecx
 739:	89 c9                	mov    %ecx,%ecx
 73b:	48 c1 e1 20          	shl    $0x20,%rcx
 73f:	89 c0                	mov    %eax,%eax
 741:	48 09 c8             	or     %rcx,%rax
 744:	41 b8 00 00 00 00    	mov    $0x0,%r8d
 74a:	b9 0f 00 00 00       	mov    $0xf,%ecx
 74f:	48 89 c6             	mov    %rax,%rsi
 752:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 759:	00 00 00 
 75c:	ff d0                	call   *%rax
    m_LineLength++;
 75e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 762:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
 766:	8d 50 01             	lea    0x1(%rax),%edx
 769:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 76d:	88 50 1b             	mov    %dl,0x1b(%rax)
    if (++m_OffsetX >= 80)
 770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 774:	0f b6 40 19          	movzbl 0x19(%rax),%eax
 778:	8d 50 01             	lea    0x1(%rax),%edx
 77b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 77f:	88 50 19             	mov    %dl,0x19(%rax)
 782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 786:	0f b6 40 19          	movzbl 0x19(%rax),%eax
 78a:	3c 4f                	cmp    $0x4f,%al
 78c:	0f 97 c0             	seta   %al
 78f:	84 c0                	test   %al,%al
 791:	74 51                	je     7e4 <Console::AddChar(char)+0xf2>
    {
        m_OffsetX = 0;
 793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 797:	c6 40 19 00          	movb   $0x0,0x19(%rax)
        if (m_OffsetY >= 22)
 79b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 79f:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 7a3:	3c 15                	cmp    $0x15,%al
 7a5:	76 2b                	jbe    7d2 <Console::AddChar(char)+0xe0>
        {
            m_TextPresenter->MoveUp();
 7a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 7ab:	48 8b 00             	mov    (%rax),%rax
 7ae:	48 89 c7             	mov    %rax,%rdi
 7b1:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 7b8:	00 00 00 
 7bb:	ff d0                	call   *%rax
            RenderModifiers();
 7bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 7c1:	48 89 c7             	mov    %rax,%rdi
 7c4:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
 7cb:	00 00 00 
 7ce:	ff d0                	call   *%rax
        } else m_OffsetY++;
    }
 7d0:	eb 12                	jmp    7e4 <Console::AddChar(char)+0xf2>
        } else m_OffsetY++;
 7d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 7d6:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 7da:	8d 50 01             	lea    0x1(%rax),%edx
 7dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 7e1:	88 50 1a             	mov    %dl,0x1a(%rax)
 7e4:	90                   	nop
 7e5:	c9                   	leave  
 7e6:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <.rodata>:
   0:	43 61                	rex.XB (bad) 
   2:	70 73                	jo     77 <.rodata+0x77>
   4:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
   6:	63 6b 3a             	movsxd 0x3a(%rbx),%ebp
   9:	20 20                	and    %ah,(%rax)
   b:	20 7c 20 20          	and    %bh,0x20(%rax,%riz,1)
   f:	20 20                	and    %ah,(%rax)
  11:	20 20                	and    %ah,(%rax)
  13:	7c 20                	jl     35 <.rodata+0x35>
  15:	20 20                	and    %ah,(%rax)
  17:	20 20                	and    %ah,(%rax)
  19:	20 20                	and    %ah,(%rax)
  1b:	7c 20                	jl     3d <.rodata+0x3d>
  1d:	20 20                	and    %ah,(%rax)
  1f:	20 20                	and    %ah,(%rax)
  21:	7c 20                	jl     43 <.rodata+0x43>
  23:	20 20                	and    %ah,(%rax)
  25:	20 20                	and    %ah,(%rax)
  27:	20 20                	and    %ah,(%rax)
  29:	20 20                	and    %ah,(%rax)
  2b:	20 20                	and    %ah,(%rax)
  2d:	20 20                	and    %ah,(%rax)
  2f:	20 20                	and    %ah,(%rax)
  31:	20 20                	and    %ah,(%rax)
  33:	20 20                	and    %ah,(%rax)
  35:	20 20                	and    %ah,(%rax)
  37:	20 20                	and    %ah,(%rax)
  39:	20 20                	and    %ah,(%rax)
  3b:	20 20                	and    %ah,(%rax)
  3d:	20 20                	and    %ah,(%rax)
  3f:	20 20                	and    %ah,(%rax)
  41:	20 20                	and    %ah,(%rax)
  43:	20 20                	and    %ah,(%rax)
  45:	20 20                	and    %ah,(%rax)
  47:	20 20                	and    %ah,(%rax)
  49:	20 20                	and    %ah,(%rax)
  4b:	20 20                	and    %ah,(%rax)
  4d:	20 20                	and    %ah,(%rax)
  4f:	20 00                	and    %al,(%rax)
  51:	20 41 20             	and    %al,0x20(%rcx)
  54:	00 20                	add    %ah,(%rax)
  56:	61                   	(bad)  
  57:	20 00                	and    %al,(%rax)
  59:	20 43 74             	and    %al,0x74(%rbx)
  5c:	72 6c                	jb     ca <.rodata+0xca>
  5e:	20 00                	and    %al,(%rax)
  60:	20 53 68             	and    %dl,0x68(%rbx)
  63:	69 66 74 20 00 20 41 	imul   $0x41200020,0x74(%rsi),%esp
  6a:	6c                   	insb   (%dx),%es:(%rdi)
  6b:	74 20                	je     8d <.rodata+0x8d>
  6d:	00 00                	add    %al,(%rax)
  6f:	00 2d 2d 2d 2d 2d    	add    %ch,0x2d2d2d2d(%rip)        # 2d2d2da2 <Console::AddChar(char)+0x2d2d26b0>
  75:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  7a:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  7f:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  84:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  89:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  8e:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  93:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  98:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  9d:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  a2:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  a7:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  ac:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  b1:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  b6:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  bb:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
{
   0:	32 0a                	xor    (%rdx),%cl
   2:	00 00                	add    %al,(%rax)
   4:	05 00 01 08 00       	add    $0x80100,%eax
   9:	00 00                	add    %al,(%rax)
   b:	00 18                	add    %bl,(%rax)
   d:	00 00                	add    %al,(%rax)
   f:	00 00                	add    %al,(%rax)
    Console *console = g_Console;
  11:	21 00                	and    %eax,(%rax)
	...
  1f:	00 00                	add    %al,(%rax)
    console->AcceptKey(key, isPressed);
  21:	00 e7                	add    %ah,%bh
  23:	07                   	(bad)  
	...
  2c:	00 00                	add    %al,(%rax)
  2e:	06                   	(bad)  
  2f:	01 06                	add    %eax,(%rsi)
  31:	00 00                	add    %al,(%rax)
  33:	00 00                	add    %al,(%rax)
  35:	06                   	(bad)  
  36:	02 05 00 00 00 00    	add    0x0(%rip),%al        # 3c <.debug_info+0x3c>
  3c:	19 04 05 69 6e 74 00 	sbb    %eax,0x746e69(,%rax,1)
Console::Console()
  43:	0b 3c 00             	or     (%rax,%rax,1),%edi
  46:	00 00                	add    %al,(%rax)
  48:	06                   	(bad)  
  49:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 4f <.debug_info+0x4f>
  : m_TextPresenter(new Video::TextModePresenter()),
  4f:	1a 00                	sbb    (%rax),%al
  51:	00 00                	add    %al,(%rax)
  53:	00 06                	add    %al,(%rsi)
  55:	2e 18 5b 00          	cs sbb %bl,0x0(%rbx)
  59:	00 00                	add    %al,(%rax)
  5b:	06                   	(bad)  
  5c:	01 08                	add    %ecx,(%rax)
  5e:	00 00                	add    %al,(%rax)
  60:	00 00                	add    %al,(%rax)
  62:	06                   	(bad)  
  63:	02 07                	add    (%rdi),%al
  65:	00 00                	add    %al,(%rax)
  67:	00 00                	add    %al,(%rax)
  69:	06                   	(bad)  
  6a:	04 07                	add    $0x7,%al
  6c:	00 00                	add    %al,(%rax)
  6e:	00 00                	add    %al,(%rax)
  70:	06                   	(bad)  
  71:	08 07                	or     %al,(%rdi)
  73:	00 00                	add    %al,(%rax)
  75:	00 00                	add    %al,(%rax)
    m_KeyModifiers(0)
  77:	06                   	(bad)  
  78:	08 05 00 00 00 00    	or     %al,0x0(%rip)        # 7e <.debug_info+0x7e>
  7e:	06                   	(bad)  
    m_Buffers(new uint8_t[23 * 80]),
  7f:	10 04 00             	adc    %al,(%rax,%rax,1)
  82:	00 00                	add    %al,(%rax)
  84:	00 1b                	add    %bl,(%rbx)
  86:	00 00                	add    %al,(%rax)
  88:	00 00                	add    %al,(%rax)
  8a:	10 00                	adc    %al,(%rax)
  8c:	00 00                	add    %al,(%rax)
  8e:	00 02                	add    %al,(%rdx)
  90:	05 29 04 00 00       	add    $0x429,%eax
  95:	1c 4b                	sbb    $0x4b,%al
  97:	65 79 00             	gs jns 9a <.debug_info+0x9a>
  9a:	07                   	(bad)  
    m_OffsetX(0),
  9b:	04 69                	add    $0x69,%al
  9d:	00 00                	add    %al,(%rax)
  9f:	00 02                	add    %al,(%rdx)
  a1:	07                   	(bad)  
  a2:	0a e2                	or     %dl,%ah
    m_OffsetY(0),
  a4:	03 00                	add    (%rax),%eax
  a6:	00 01                	add    %al,(%rcx)
  a8:	00 00                	add    %al,(%rax)
  aa:	00 00                	add    %al,(%rax)
    Refresh();
  ac:	00 02                	add    %al,(%rdx)
  ae:	46 31 00             	rex.RX xor %r8d,(%rax)
  b1:	01 02                	add    %eax,(%rdx)
  b3:	46 32 00             	rex.RX xor (%rax),%r8b
  b6:	02 02                	add    (%rdx),%al
  b8:	46 33 00             	rex.RX xor (%rax),%r8d
  bb:	03 02                	add    (%rdx),%eax
  bd:	46 34 00             	rex.RX xor $0x0,%al
}
  c0:	04 02                	add    $0x2,%al
  c2:	46 35 00 05 02 46    	rex.RX xor $0x46020500,%eax
Console::~Console()
  c8:	36 00 06             	ss add %al,(%rsi)
  cb:	02 46 37             	add    0x37(%rsi),%al
  ce:	00 07                	add    %al,(%rdi)
  d0:	02 46 38             	add    0x38(%rsi),%al
}
  d3:	00 08                	add    %cl,(%rax)
  d5:	02 46 39             	add    0x39(%rsi),%al
{
  d8:	00 09                	add    %cl,(%rcx)
  da:	02 46 31             	add    0x31(%rsi),%al
  dd:	30 00                	xor    %al,(%rax)
  df:	0a 02                	or     (%rdx),%al
  e1:	46 31 31             	rex.RX xor %r14d,(%rcx)
    RenderModifiers();
  e4:	00 0b                	add    %cl,(%rbx)
  e6:	02 46 31             	add    0x31(%rsi),%al
  e9:	32 00                	xor    (%rax),%al
  eb:	0c 01                	or     $0x1,%al
  ed:	00 00                	add    %al,(%rax)
  ef:	00 00                	add    %al,(%rax)
  f1:	0d 01 00 00 00       	or     $0x1,%eax
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f6:	00 0e                	add    %cl,(%rsi)
  f8:	01 00                	add    %eax,(%rax)
  fa:	00 00                	add    %al,(%rax)
  fc:	00 0f                	add    %cl,(%rdi)
  fe:	01 00                	add    %eax,(%rax)
 100:	00 00                	add    %al,(%rax)
 102:	00 10                	add    %dl,(%rax)
 104:	01 00                	add    %eax,(%rax)
 106:	00 00                	add    %al,(%rax)
 108:	00 11                	add    %dl,(%rcx)
 10a:	01 00                	add    %eax,(%rax)
 10c:	00 00                	add    %al,(%rax)
 10e:	00 12                	add    %dl,(%rdx)
 110:	01 00                	add    %eax,(%rax)
 112:	00 00                	add    %al,(%rax)
 114:	00 13                	add    %dl,(%rbx)
 116:	02 45 6e             	add    0x6e(%rbp),%al
 119:	64 00 14 01          	add    %dl,%fs:(%rcx,%rax,1)
 11d:	00 00                	add    %al,(%rax)
 11f:	00 00                	add    %al,(%rax)
 121:	15 01 00 00 00       	adc    $0x1,%eax
 126:	00 16                	add    %dl,(%rsi)
 128:	01 00                	add    %eax,(%rax)
 12a:	00 00                	add    %al,(%rax)
 12c:	00 17                	add    %dl,(%rdi)
 12e:	02 54 61 62          	add    0x62(%rcx,%riz,2),%dl
 132:	00 18                	add    %bl,(%rax)
 134:	01 00                	add    %eax,(%rax)
 136:	00 00                	add    %al,(%rax)
 138:	00 19                	add    %bl,(%rcx)
 13a:	01 00                	add    %eax,(%rax)
 13c:	00 00                	add    %al,(%rax)
 13e:	00 1a                	add    %bl,(%rdx)
 140:	01 00                	add    %eax,(%rax)
}
 142:	00 00                	add    %al,(%rax)
 144:	00 1b                	add    %bl,(%rbx)
 146:	01 00                	add    %eax,(%rax)
{
 148:	00 00                	add    %al,(%rax)
 14a:	00 1c 01             	add    %bl,(%rcx,%rax,1)
 14d:	00 00                	add    %al,(%rax)
 14f:	00 00                	add    %al,(%rax)
 151:	1d 01 00 00 00       	sbb    $0x1,%eax
    m_TextPresenter->Clear();
 156:	00 1e                	add    %bl,(%rsi)
 158:	01 00                	add    %eax,(%rax)
 15a:	00 00                	add    %al,(%rax)
 15c:	00 1f                	add    %bl,(%rdi)
 15e:	01 00                	add    %eax,(%rax)
 160:	00 00                	add    %al,(%rax)
 162:	00 20                	add    %ah,(%rax)
 164:	01 00                	add    %eax,(%rax)
 166:	00 00                	add    %al,(%rax)
 168:	00 21                	add    %ah,(%rcx)
 16a:	01 00                	add    %eax,(%rax)
 16c:	00 00                	add    %al,(%rax)
    Render();
 16e:	00 22                	add    %ah,(%rdx)
 170:	01 00                	add    %eax,(%rax)
 172:	00 00                	add    %al,(%rax)
 174:	00 23                	add    %ah,(%rbx)
 176:	01 00                	add    %eax,(%rax)
 178:	00 00                	add    %al,(%rax)
 17a:	00 24 01             	add    %ah,(%rcx,%rax,1)
 17d:	00 00                	add    %al,(%rax)
 17f:	00 00                	add    %al,(%rax)
}
 181:	25 01 00 00 00       	and    $0x1,%eax
{
 186:	00 26                	add    %ah,(%rsi)
 188:	01 00                	add    %eax,(%rax)
 18a:	00 00                	add    %al,(%rax)
 18c:	00 27                	add    %ah,(%rdi)
 18e:	01 00                	add    %eax,(%rax)
 190:	00 00                	add    %al,(%rax)
 192:	00 28                	add    %ch,(%rax)
 194:	01 00                	add    %eax,(%rax)
 196:	00 00                	add    %al,(%rax)
 198:	00 29                	add    %ch,(%rcx)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
 19a:	01 00                	add    %eax,(%rax)
 19c:	00 00                	add    %al,(%rax)
 19e:	00 2a                	add    %ch,(%rdx)
 1a0:	01 00                	add    %eax,(%rax)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	00 2b                	add    %ch,(%rbx)
 1a6:	01 00                	add    %eax,(%rax)
 1a8:	00 00                	add    %al,(%rax)
 1aa:	00 2c 01             	add    %ch,(%rcx,%rax,1)
 1ad:	00 00                	add    %al,(%rax)
    bool shift = m_KeyModifiers & KeyModifiersShift;
 1af:	00 00                	add    %al,(%rax)
 1b1:	2d 01 00 00 00       	sub    $0x1,%eax
 1b6:	00 2e                	add    %ch,(%rsi)
 1b8:	01 00                	add    %eax,(%rax)
 1ba:	00 00                	add    %al,(%rax)
 1bc:	00 2f                	add    %ch,(%rdi)
 1be:	01 00                	add    %eax,(%rax)
 1c0:	00 00                	add    %al,(%rax)
 1c2:	00 30                	add    %dh,(%rax)
 1c4:	02 41 00             	add    0x0(%rcx),%al
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
 1c7:	31 02                	xor    %eax,(%rdx)
 1c9:	42 00 32             	rex.X add %sil,(%rdx)
 1cc:	02 43 00             	add    0x0(%rbx),%al
 1cf:	33 02                	xor    (%rdx),%eax
 1d1:	44 00 34 02          	add    %r14b,(%rdx,%rax,1)
 1d5:	45 00 35 02 46 00 36 	add    %r14b,0x36004602(%rip)        # 360047de <Console::AddChar(char)+0x360040ec>
    bool alt = m_KeyModifiers & KeyModifiersAlt;
 1dc:	02 47 00             	add    0x0(%rdi),%al
 1df:	37                   	(bad)  
 1e0:	02 48 00             	add    0x0(%rax),%cl
 1e3:	38 02                	cmp    %al,(%rdx)
 1e5:	49 00 39             	rex.WB add %dil,(%r9)
 1e8:	02 4a 00             	add    0x0(%rdx),%cl
 1eb:	3a 02                	cmp    (%rdx),%al
 1ed:	4b 00 3b             	rex.WXB add %dil,(%r11)
 1f0:	02 4c 00 3c          	add    0x3c(%rax,%rax,1),%cl
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
 1f4:	02 4d 00             	add    0x0(%rbp),%cl
 1f7:	3d 02 4e 00 3e       	cmp    $0x3e004e02,%eax
 1fc:	02 4f 00             	add    0x0(%rdi),%cl
 1ff:	3f                   	(bad)  
 200:	02 50 00             	add    0x0(%rax),%dl
 203:	40 02 51 00          	rex add 0x0(%rcx),%dl
 207:	41 02 52 00          	add    0x0(%r10),%dl
 20b:	42 02 53 00          	rex.X add 0x0(%rbx),%dl
 20f:	43 02 54 00 44       	add    0x44(%r8,%r8,1),%dl
 214:	02 55 00             	add    0x0(%rbp),%dl
 217:	45 02 56 00          	add    0x0(%r14),%r10b
 21b:	46 02 57 00          	rex.RX add 0x0(%rdi),%r10b
 21f:	47 02 58 00          	rex.RXB add 0x0(%r8),%r11b
 223:	48 02 59 00          	rex.W add 0x0(%rcx),%bl
 227:	49 02 5a 00          	rex.WB add 0x0(%r10),%bl
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
 22b:	4a 01 00             	rex.WX add %rax,(%rax)
 22e:	00 00                	add    %al,(%rax)
 230:	00 4b 01             	add    %cl,0x1(%rbx)
 233:	00 00                	add    %al,(%rax)
 235:	00 00                	add    %al,(%rax)
 237:	4c 01 00             	add    %r8,(%rax)
 23a:	00 00                	add    %al,(%rax)
 23c:	00 4d 01             	add    %cl,0x1(%rbp)
 23f:	00 00                	add    %al,(%rax)
 241:	00 00                	add    %al,(%rax)
 243:	4e 01 00             	rex.WRX add %r8,(%rax)
 246:	00 00                	add    %al,(%rax)
 248:	00 4f 01             	add    %cl,0x1(%rdi)
 24b:	00 00                	add    %al,(%rax)
 24d:	00 00                	add    %al,(%rax)
 24f:	50                   	push   %rax
 250:	01 00                	add    %eax,(%rax)
 252:	00 00                	add    %al,(%rax)
 254:	00 51 01             	add    %dl,0x1(%rcx)
 257:	00 00                	add    %al,(%rax)
 259:	00 00                	add    %al,(%rax)
 25b:	52                   	push   %rdx
 25c:	01 00                	add    %eax,(%rax)
 25e:	00 00                	add    %al,(%rax)
 260:	00 53 01             	add    %dl,0x1(%rbx)
 263:	00 00                	add    %al,(%rax)
 265:	00 00                	add    %al,(%rax)
 267:	54                   	push   %rsp
 268:	01 00                	add    %eax,(%rax)
 26a:	00 00                	add    %al,(%rax)
 26c:	00 55 01             	add    %dl,0x1(%rbp)
 26f:	00 00                	add    %al,(%rax)
 271:	00 00                	add    %al,(%rax)
 273:	56                   	push   %rsi
 274:	01 00                	add    %eax,(%rax)
 276:	00 00                	add    %al,(%rax)
 278:	00 57 01             	add    %dl,0x1(%rdi)
 27b:	00 00                	add    %al,(%rax)
 27d:	00 00                	add    %al,(%rax)
 27f:	58                   	pop    %rax
 280:	01 00                	add    %eax,(%rax)
 282:	00 00                	add    %al,(%rax)
 284:	00 59 01             	add    %bl,0x1(%rcx)
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
 287:	00 00                	add    %al,(%rax)
 289:	00 00                	add    %al,(%rax)
 28b:	5a                   	pop    %rdx
 28c:	01 00                	add    %eax,(%rax)
 28e:	00 00                	add    %al,(%rax)
 290:	00 5b 01             	add    %bl,0x1(%rbx)
 293:	00 00                	add    %al,(%rax)
 295:	00 00                	add    %al,(%rax)
 297:	5c                   	pop    %rsp
 298:	01 00                	add    %eax,(%rax)
 29a:	00 00                	add    %al,(%rax)
 29c:	00 5d 01             	add    %bl,0x1(%rbp)
 29f:	00 00                	add    %al,(%rax)
 2a1:	00 00                	add    %al,(%rax)
 2a3:	5e                   	pop    %rsi
 2a4:	01 00                	add    %eax,(%rax)
 2a6:	00 00                	add    %al,(%rax)
 2a8:	00 5f 02             	add    %bl,0x2(%rdi)
 2ab:	41 6e                	rex.B outsb %ds:(%rsi),(%dx)
 2ad:	64 00 60 01          	add    %ah,%fs:0x1(%rax)
 2b1:	00 00                	add    %al,(%rax)
 2b3:	00 00                	add    %al,(%rax)
 2b5:	61                   	(bad)  
 2b6:	01 00                	add    %eax,(%rax)
 2b8:	00 00                	add    %al,(%rax)
 2ba:	00 62 01             	add    %ah,0x1(%rdx)
 2bd:	00 00                	add    %al,(%rax)
 2bf:	00 00                	add    %al,(%rax)
 2c1:	63 01                	movsxd (%rcx),%eax
 2c3:	00 00                	add    %al,(%rax)
 2c5:	00 00                	add    %al,(%rax)
 2c7:	64 02 41 64          	add    %fs:0x64(%rcx),%al
 2cb:	64 00 65 01          	add    %ah,%fs:0x1(%rbp)
 2cf:	00 00                	add    %al,(%rax)
 2d1:	00 00                	add    %al,(%rax)
 2d3:	66 01 00             	add    %ax,(%rax)
 2d6:	00 00                	add    %al,(%rax)
 2d8:	00 67 01             	add    %ah,0x1(%rdi)
 2db:	00 00                	add    %al,(%rax)
 2dd:	00 00                	add    %al,(%rax)
 2df:	68 01 00 00 00       	push   $0x1
 2e4:	00 69 01             	add    %ch,0x1(%rcx)
 2e7:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
 2e9:	00 00                	add    %al,(%rax)
 2eb:	6a 01                	push   $0x1
 2ed:	00 00                	add    %al,(%rax)
 2ef:	00 00                	add    %al,(%rax)
 2f1:	6b 01 00             	imul   $0x0,(%rcx),%eax
 2f4:	00 00                	add    %al,(%rax)
 2f6:	00 6c 01 00          	add    %ch,0x0(%rcx,%rax,1)
 2fa:	00 00                	add    %al,(%rax)
 2fc:	00 6d 01             	add    %ch,0x1(%rbp)
 2ff:	00 00                	add    %al,(%rax)
 301:	00 00                	add    %al,(%rax)
 303:	6e                   	outsb  %ds:(%rsi),(%dx)
 304:	01 00                	add    %eax,(%rax)
 306:	00 00                	add    %al,(%rax)
 308:	00 6f 01             	add    %ch,0x1(%rdi)
 30b:	00 00                	add    %al,(%rax)
 30d:	00 00                	add    %al,(%rax)
 30f:	70 01                	jo     312 <.debug_info+0x312>
 311:	00 00                	add    %al,(%rax)
 313:	00 00                	add    %al,(%rax)
 315:	71 02                	jno    319 <.debug_info+0x319>
 317:	41 74 00             	rex.B je 31a <.debug_info+0x31a>
 31a:	72 01                	jb     31d <.debug_info+0x31d>
 31c:	00 00                	add    %al,(%rax)
 31e:	00 00                	add    %al,(%rax)
 320:	73 01                	jae    323 <.debug_info+0x323>
 322:	00 00                	add    %al,(%rax)
 324:	00 00                	add    %al,(%rax)
 326:	74 01                	je     329 <.debug_info+0x329>
 328:	00 00                	add    %al,(%rax)
 32a:	00 00                	add    %al,(%rax)
 32c:	75 01                	jne    32f <.debug_info+0x32f>
 32e:	00 00                	add    %al,(%rax)
 330:	00 00                	add    %al,(%rax)
 332:	76 01                	jbe    335 <.debug_info+0x335>
 334:	00 00                	add    %al,(%rax)
 336:	00 00                	add    %al,(%rax)
 338:	77 01                	ja     33b <.debug_info+0x33b>
 33a:	00 00                	add    %al,(%rax)
 33c:	00 00                	add    %al,(%rax)
 33e:	78 01                	js     341 <.debug_info+0x341>
 340:	00 00                	add    %al,(%rax)
 342:	00 00                	add    %al,(%rax)
 344:	79 01                	jns    347 <.debug_info+0x347>
 346:	00 00                	add    %al,(%rax)
 348:	00 00                	add    %al,(%rax)
 34a:	7a 01                	jp     34d <.debug_info+0x34d>
 34c:	00 00                	add    %al,(%rax)
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
 34e:	00 00                	add    %al,(%rax)
 350:	7b 01                	jnp    353 <.debug_info+0x353>
 352:	00 00                	add    %al,(%rax)
 354:	00 00                	add    %al,(%rax)
 356:	7c 01                	jl     359 <.debug_info+0x359>
 358:	00 00                	add    %al,(%rax)
 35a:	00 00                	add    %al,(%rax)
 35c:	7d 01                	jge    35f <.debug_info+0x35f>
 35e:	00 00                	add    %al,(%rax)
 360:	00 00                	add    %al,(%rax)
 362:	7e 01                	jle    365 <.debug_info+0x365>
 364:	00 00                	add    %al,(%rax)
 366:	00 00                	add    %al,(%rax)
 368:	7f 01                	jg     36b <.debug_info+0x36b>
 36a:	00 00                	add    %al,(%rax)
 36c:	00 00                	add    %al,(%rax)
 36e:	80 01 00             	addb   $0x0,(%rcx)
 371:	00 00                	add    %al,(%rax)
 373:	00 81 01 00 00 00    	add    %al,0x1(%rcx)
 379:	00 82 01 00 00 00    	add    %al,0x1(%rdx)
 37f:	00 83 01 00 00 00    	add    %al,0x1(%rbx)
 385:	00 84 01 00 00 00 00 	add    %al,0x0(%rcx,%rax,1)
 38c:	85 01                	test   %eax,(%rcx)
 38e:	00 00                	add    %al,(%rax)
 390:	00 00                	add    %al,(%rax)
 392:	86 01                	xchg   %al,(%rcx)
 394:	00 00                	add    %al,(%rax)
 396:	00 00                	add    %al,(%rax)
 398:	87 01                	xchg   %eax,(%rcx)
 39a:	00 00                	add    %al,(%rax)
 39c:	00 00                	add    %al,(%rax)
 39e:	88 01                	mov    %al,(%rcx)
 3a0:	00 00                	add    %al,(%rax)
 3a2:	00 00                	add    %al,(%rax)
 3a4:	89 01                	mov    %eax,(%rcx)
 3a6:	00 00                	add    %al,(%rax)
 3a8:	00 00                	add    %al,(%rax)
 3aa:	8a 01                	mov    (%rcx),%al
 3ac:	00 00                	add    %al,(%rax)
 3ae:	00 00                	add    %al,(%rax)
 3b0:	8b 01                	mov    (%rcx),%eax
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 3b2:	00 00                	add    %al,(%rax)
 3b4:	00 00                	add    %al,(%rax)
 3b6:	8c 01                	mov    %es,(%rcx)
 3b8:	00 00                	add    %al,(%rax)
 3ba:	00 00                	add    %al,(%rax)
 3bc:	8d 01                	lea    (%rcx),%eax
 3be:	00 00                	add    %al,(%rax)
 3c0:	00 00                	add    %al,(%rax)
 3c2:	8e 01                	mov    (%rcx),%es
 3c4:	00 00                	add    %al,(%rax)
 3c6:	00 00                	add    %al,(%rax)
 3c8:	8f 01                	pop    (%rcx)
 3ca:	00 00                	add    %al,(%rax)
 3cc:	00 00                	add    %al,(%rax)
 3ce:	90                   	nop
 3cf:	01 00                	add    %eax,(%rax)
 3d1:	00 00                	add    %al,(%rax)
 3d3:	00 91 01 00 00 00    	add    %dl,0x1(%rcx)
 3d9:	00 92 01 00 00 00    	add    %dl,0x1(%rdx)
 3df:	00 93 00 1d 00 00    	add    %dl,0x1d00(%rbx)
 3e5:	00 00                	add    %al,(%rax)
 3e7:	07                   	(bad)  
 3e8:	04 69                	add    $0x69,%al
 3ea:	00 00                	add    %al,(%rax)
 3ec:	00 02                	add    %al,(%rdx)
 3ee:	2b 0a                	sub    (%rdx),%ecx
 3f0:	0d 04 00 00 01       	or     $0x1000004,%eax
 3f5:	00 00                	add    %al,(%rax)
 3f7:	00 00                	add    %al,(%rax)
 3f9:	01 01                	add    %eax,(%rcx)
 3fb:	00 00                	add    %al,(%rax)
 3fd:	00 00                	add    %al,(%rax)
 3ff:	02 01                	add    (%rcx),%al
}
 401:	00 00                	add    %al,(%rax)
 403:	00 00                	add    %al,(%rax)
 405:	04 01                	add    $0x1,%al
 407:	00 00                	add    %al,(%rax)
 409:	00 00                	add    %al,(%rax)
 40b:	08 00                	or     %al,(%rax)
 40d:	1e                   	(bad)  
 40e:	00 00                	add    %al,(%rax)
 410:	00 00                	add    %al,(%rax)
{
 412:	02 35 0a 00 00 00    	add    0xa(%rip),%dh        # 422 <.debug_info+0x422>
 418:	00 32                	add    %dh,(%rdx)
 41a:	06                   	(bad)  
 41b:	00 00                	add    %al,(%rax)
 41d:	04 95                	add    $0x95,%al
 41f:	00 00                	add    %al,(%rax)
 421:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 424:	00 00                	add    %al,(%rax)
 426:	00 00                	add    %al,(%rax)
    switch (key)
 428:	00 10                	add    %dl,(%rax)
 42a:	00 00                	add    %al,(%rax)
 42c:	00 00                	add    %al,(%rax)
 42e:	03 07                	add    (%rdi),%eax
 430:	e9 04 00 00 1f       	jmp    1f000439 <Console::AddChar(char)+0x1efffd47>
 435:	00 00                	add    %al,(%rax)
 437:	00 00                	add    %al,(%rax)
 439:	08 03                	or     %al,(%rbx)
 43b:	09 0c 54             	or     %ecx,(%rsp,%rdx,2)
 43e:	04 00                	add    $0x0,%al
 440:	00 11                	add    %dl,(%rcx)
 442:	78 00                	js     444 <.debug_info+0x444>
 444:	18 3c 00             	sbb    %bh,(%rax,%rax,1)
 447:	00 00                	add    %al,(%rax)
 449:	00 11                	add    %dl,(%rcx)
 44b:	79 00                	jns    44d <.debug_info+0x44d>
 44d:	1b 3c 00             	sbb    (%rax,%rax,1),%edi
 450:	00 00                	add    %al,(%rax)
        if (isPressed)
 452:	04 00                	add    $0x0,%al
 454:	20 00                	and    %al,(%rax)
 456:	00 00                	add    %al,(%rax)
            if (m_KeyModifiers & KeyModifiersCapsLock)
 458:	00 07                	add    %al,(%rdi)
 45a:	00 00                	add    %al,(%rax)
 45c:	00 00                	add    %al,(%rax)
 45e:	04 18                	add    $0x18,%al
 460:	0e                   	(bad)  
 461:	00 00                	add    %al,(%rax)
 463:	00 00                	add    %al,(%rax)
 465:	6d                   	insl   (%dx),%es:(%rdi)
 466:	04 00                	add    $0x0,%al
 468:	00 73 04             	add    %dh,0x4(%rbx)
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 46b:	00 00                	add    %al,(%rax)
 46d:	05 19 06 00 00       	add    $0x619,%eax
 472:	00 07                	add    %al,(%rdi)
 474:	00 00                	add    %al,(%rax)
 476:	00 00                	add    %al,(%rax)
 478:	04 16                	add    $0x16,%al
 47a:	0e                   	(bad)  
 47b:	00 00                	add    %al,(%rax)
 47d:	00 00                	add    %al,(%rax)
 47f:	87 04 00             	xchg   %eax,(%rax,%rax,1)
                m_KeyModifiers |= KeyModifiersCapsLock;
 482:	00 a1 04 00 00 05    	add    %ah,0x5000004(%rcx)
 488:	19 06                	sbb    %eax,(%rsi)
 48a:	00 00                	add    %al,(%rax)
 48c:	04 34                	add    $0x34,%al
 48e:	04 00                	add    $0x0,%al
 490:	00 04 52             	add    %al,(%rdx,%rdx,2)
 493:	06                   	(bad)  
        RenderModifiers();
 494:	00 00                	add    %al,(%rax)
 496:	04 4f                	add    $0x4f,%al
 498:	00 00                	add    %al,(%rax)
 49a:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 49d:	00 00                	add    %al,(%rax)
 49f:	00 00                	add    %al,(%rax)
 4a1:	07                   	(bad)  
 4a2:	00 00                	add    %al,(%rax)
 4a4:	00 00                	add    %al,(%rax)
 4a6:	04 17                	add    $0x17,%al
        break;
 4a8:	0e                   	(bad)  
 4a9:	00 00                	add    %al,(%rax)
 4ab:	00 00                	add    %al,(%rax)
        if (isPressed)
 4ad:	b5 04                	mov    $0x4,%ch
 4af:	00 00                	add    %al,(%rax)
 4b1:	cf                   	iret   
            m_KeyModifiers |= KeyModifiersShift;
 4b2:	04 00                	add    $0x0,%al
 4b4:	00 05 19 06 00 00    	add    %al,0x619(%rip)        # ad3 <Console::AddChar(char)+0x3e1>
 4ba:	04 34                	add    $0x34,%al
 4bc:	04 00                	add    $0x0,%al
 4be:	00 04 32             	add    %al,(%rdx,%rsi,1)
 4c1:	06                   	(bad)  
 4c2:	00 00                	add    %al,(%rax)
 4c4:	04 4f                	add    $0x4f,%al
 4c6:	00 00                	add    %al,(%rax)
            m_KeyModifiers &= ~(KeyModifiersShift);
 4c8:	00 04 4f             	add    %al,(%rdi,%rcx,2)
 4cb:	00 00                	add    %al,(%rax)
 4cd:	00 00                	add    %al,(%rax)
 4cf:	21 00                	and    %eax,(%rax)
 4d1:	00 00                	add    %al,(%rax)
 4d3:	00 04 11             	add    %al,(%rcx,%rdx,1)
 4d6:	09 00                	or     %eax,(%rax)
 4d8:	00 00                	add    %al,(%rax)
 4da:	00 01                	add    %al,(%rcx)
        RenderModifiers();
 4dc:	e1 04                	loope  4e2 <.debug_info+0x4e2>
 4de:	00 00                	add    %al,(%rax)
 4e0:	00 05 19 06 00 00    	add    %al,0x619(%rip)        # aff <Console::AddChar(char)+0x40d>
 4e6:	00 00                	add    %al,(%rax)
 4e8:	00 06                	add    %al,(%rsi)
 4ea:	01 02                	add    %eax,(%rdx)
 4ec:	00 00                	add    %al,(%rax)
 4ee:	00 00                	add    %al,(%rax)
        break;
 4f0:	22 00                	and    (%rax),%al
 4f2:	00 00                	add    %al,(%rax)
        if (isPressed)
 4f4:	00 20                	add    %ah,(%rax)
 4f6:	05 06 07 19 06       	add    $0x6190706,%eax
            m_KeyModifiers |= KeyModifiersCtrl;
 4fb:	00 00                	add    %al,(%rax)
 4fd:	08 00                	or     %al,(%rax)
 4ff:	00 00                	add    %al,(%rax)
 501:	00 09                	add    %cl,(%rcx)
 503:	1f                   	(bad)  
 504:	19 06                	sbb    %eax,(%rsi)
 506:	00 00                	add    %al,(%rax)
 508:	00 08                	add    %cl,(%rax)
 50a:	00 00                	add    %al,(%rax)
 50c:	00 00                	add    %al,(%rax)
 50e:	0a 0d 4f 00 00 00    	or     0x4f(%rip),%cl        # 563 <.debug_info+0x563>
            m_KeyModifiers &= ~(KeyModifiersCtrl);
 514:	08 08                	or     %cl,(%rax)
 516:	00 00                	add    %al,(%rax)
 518:	00 00                	add    %al,(%rax)
 51a:	0b 0e                	or     (%rsi),%ecx
 51c:	23 06                	and    (%rsi),%eax
 51e:	00 00                	add    %al,(%rax)
 520:	10 08                	adc    %cl,(%rax)
 522:	00 00                	add    %al,(%rax)
        RenderModifiers();
 524:	00 00                	add    %al,(%rax)
 526:	0c 0a                	or     $0xa,%al
 528:	e9 04 00 00 18       	jmp    18000531 <Console::AddChar(char)+0x17fffe3f>
 52d:	08 00                	or     %al,(%rax)
 52f:	00 00                	add    %al,(%rax)
 531:	00 0d 0d 4f 00 00    	add    %cl,0x4f0d(%rip)        # 5444 <Console::AddChar(char)+0x4d52>
        break;
 537:	00 19                	add    %bl,(%rcx)
 539:	08 00                	or     %al,(%rax)
 53b:	00 00                	add    %al,(%rax)
        if (isPressed)
 53d:	00 0d 18 4f 00 00    	add    %cl,0x4f18(%rip)        # 545b <Console::AddChar(char)+0x4d69>
            m_KeyModifiers |= KeyModifiersAlt;
 543:	00 1a                	add    %bl,(%rdx)
 545:	08 00                	or     %al,(%rax)
 547:	00 00                	add    %al,(%rax)
 549:	00 0e                	add    %cl,(%rsi)
 54b:	0d 4f 00 00 00       	or     $0x4f,%eax
 550:	1b 07                	sbb    (%rdi),%eax
 552:	00 00                	add    %al,(%rax)
 554:	00 00                	add    %al,(%rax)
 556:	05 11 05 00 00       	add    $0x511,%eax
            m_KeyModifiers &= ~(KeyModifiersAlt);
 55b:	00 00                	add    %al,(%rax)
 55d:	65 05 00 00 6b 05    	gs add $0x56b0000,%eax
 563:	00 00                	add    %al,(%rax)
 565:	05 28 06 00 00       	add    $0x628,%eax
 56a:	00 07                	add    %al,(%rdi)
        RenderModifiers();
 56c:	00 00                	add    %al,(%rax)
 56e:	00 00                	add    %al,(%rax)
 570:	05 12 05 00 00       	add    $0x512,%eax
 575:	00 00                	add    %al,(%rax)
 577:	7f 05                	jg     57e <.debug_info+0x57e>
 579:	00 00                	add    %al,(%rax)
 57b:	8a 05 00 00 05 28    	mov    0x28050000(%rip),%al        # 28050581 <Console::AddChar(char)+0x2804fe8f>
        break;
 581:	06                   	(bad)  
 582:	00 00                	add    %al,(%rax)
        m_TextPresenter->Clear();
 584:	05 3c 00 00 00       	add    $0x3c,%eax
 589:	00 07                	add    %al,(%rdi)
 58b:	00 00                	add    %al,(%rax)
 58d:	00 00                	add    %al,(%rax)
 58f:	05 14 0a 00 00       	add    $0xa14,%eax
 594:	00 00                	add    %al,(%rax)
 596:	9e                   	sahf   
 597:	05 00 00 a4 05       	add    $0x5a40000,%eax
 59c:	00 00                	add    %al,(%rax)
        RenderModifiers();
 59e:	05 28 06 00 00       	add    $0x628,%eax
 5a3:	00 07                	add    %al,(%rdi)
 5a5:	00 00                	add    %al,(%rax)
 5a7:	00 00                	add    %al,(%rax)
 5a9:	05 15 0a 00 00       	add    $0xa15,%eax
 5ae:	00 00                	add    %al,(%rax)
        break;
 5b0:	b8 05 00 00 be       	mov    $0xbe000005,%eax
        if (!isPressed) break;
 5b5:	05 00 00 05 28       	add    $0x28050000,%eax
 5ba:	06                   	(bad)  
 5bb:	00 00                	add    %al,(%rax)
 5bd:	00 07                	add    %al,(%rdi)
 5bf:	00 00                	add    %al,(%rax)
 5c1:	00 00                	add    %al,(%rax)
 5c3:	05 16 0a 00 00       	add    $0xa16,%eax
        m_LineLength = 0;
 5c8:	00 00                	add    %al,(%rax)
 5ca:	d2 05 00 00 d8 05    	rolb   %cl,0x5d80000(%rip)        # 5d805d0 <Console::AddChar(char)+0x5d7fede>
        m_OffsetX = 1;
 5d0:	00 00                	add    %al,(%rax)
 5d2:	05 28 06 00 00       	add    $0x628,%eax
        if (m_OffsetY >= 22)
 5d7:	00 07                	add    %al,(%rdi)
 5d9:	00 00                	add    %al,(%rax)
 5db:	00 00                	add    %al,(%rax)
 5dd:	05 17 0a 00 00       	add    $0xa17,%eax
            m_TextPresenter->MoveUp();
 5e2:	00 00                	add    %al,(%rax)
 5e4:	ec                   	in     (%dx),%al
 5e5:	05 00 00 fc 05       	add    $0x5fc0000,%eax
 5ea:	00 00                	add    %al,(%rax)
 5ec:	05 28 06 00 00       	add    $0x628,%eax
 5f1:	04 95                	add    $0x95,%al
 5f3:	00 00                	add    %al,(%rax)
 5f5:	00 04 e9             	add    %al,(%rcx,%rbp,8)
            RenderModifiers();
 5f8:	04 00                	add    $0x0,%al
 5fa:	00 00                	add    %al,(%rax)
 5fc:	23 00                	and    (%rax),%eax
 5fe:	00 00                	add    %al,(%rax)
 600:	00 05 18 0a 00 00    	add    %al,0xa18(%rip)        # 101e <Console::AddChar(char)+0x92c>
 606:	00 00                	add    %al,(%rax)
 608:	01 0d 06 00 00 05    	add    %ecx,0x5000006(%rip)        # 5000614 <Console::AddChar(char)+0x4ffff22>
        } else m_OffsetY++;
 60e:	28 06                	sub    %al,(%rsi)
 610:	00 00                	add    %al,(%rax)
 612:	04 32                	add    $0x32,%al
 614:	06                   	(bad)  
 615:	00 00                	add    %al,(%rax)
 617:	00 00                	add    %al,(%rax)
 619:	0c 54                	or     $0x54,%al
 61b:	04 00                	add    $0x0,%al
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 61d:	00 0b                	add    %cl,(%rbx)
 61f:	19 06                	sbb    %eax,(%rsi)
 621:	00 00                	add    %al,(%rax)
 623:	0c 4f                	or     $0x4f,%al
 625:	00 00                	add    %al,(%rax)
 627:	00 0c f0             	add    %cl,(%rax,%rsi,8)
 62a:	04 00                	add    $0x0,%al
 62c:	00 0b                	add    %cl,(%rbx)
 62e:	28 06                	sub    %al,(%rsi)
 630:	00 00                	add    %al,(%rax)
 632:	06                   	(bad)  
 633:	01 06                	add    %eax,(%rsi)
 635:	00 00                	add    %al,(%rax)
 637:	00 00                	add    %al,(%rax)
 639:	0b 32                	or     (%rdx),%esi
 63b:	06                   	(bad)  
 63c:	00 00                	add    %al,(%rax)
 63e:	24 00                	and    $0x0,%al
 640:	00 00                	add    %al,(%rax)
 642:	00 05 1b 11 28 06    	add    %al,0x628111b(%rip)        # 6281763 <Console::AddChar(char)+0x6281071>
 648:	00 00                	add    %al,(%rax)
 64a:	25 01 0b 11 8a       	and    $0x8a110b01,%eax
 64f:	00 00                	add    %al,(%rax)
 651:	00 0c 39             	add    %cl,(%rcx,%rdi,1)
 654:	06                   	(bad)  
 655:	00 00                	add    %al,(%rax)
 657:	26 cf                	es iret 
 659:	04 00                	add    $0x0,%al
 65b:	00 00                	add    %al,(%rax)
 65d:	00 00                	add    %al,(%rax)
 65f:	00 68 06             	add    %ch,0x6(%rax)
 662:	00 00                	add    %al,(%rax)
 664:	72 06                	jb     66c <.debug_info+0x66c>
 666:	00 00                	add    %al,(%rax)
 668:	0d 00 00 00 00       	or     $0x0,%eax
 66d:	1e                   	(bad)  
 66e:	06                   	(bad)  
 66f:	00 00                	add    %al,(%rax)
 671:	00 0e                	add    %cl,(%rsi)
        break;
 673:	fc                   	cld    
        AddChar(' '); break;
 674:	05 00 00 79 92       	add    $0x92790000,%eax
 679:	06                   	(bad)  
	...
 682:	00 00                	add    %al,(%rax)
 684:	f5                   	cmc    
 685:	00 00                	add    %al,(%rax)
 687:	00 00                	add    %al,(%rax)
 689:	00 00                	add    %al,(%rax)
 68b:	00 01                	add    %al,(%rcx)
 68d:	9c                   	pushf  
        char code = ApplyModifiers(key, m_KeyModifiers);
 68e:	d2 06                	rolb   %cl,(%rsi)
 690:	00 00                	add    %al,(%rax)
 692:	09 00                	or     %eax,(%rax)
 694:	00 00                	add    %al,(%rax)
 696:	00 2d 06 00 00 02    	add    %ch,0x2000006(%rip)        # 20006a2 <Console::AddChar(char)+0x1ffffb0>
 69c:	91                   	xchg   %eax,%ecx
 69d:	68 0f 63 00 79       	push   $0x7900630f
 6a2:	1c 32                	sbb    $0x32,%al
 6a4:	06                   	(bad)  
 6a5:	00 00                	add    %al,(%rax)
 6a7:	02 91 64 03 00 00    	add    0x364(%rcx),%dl
 6ad:	00 00                	add    %al,(%rax)
        if (!code || !isPressed || m_LineLength == 255) break;
 6af:	00 00                	add    %al,(%rax)
 6b1:	00 00                	add    %al,(%rax)
 6b3:	a1 04 00 00 03 00 00 	movabs 0x3000004,%eax
 6ba:	00 00 
 6bc:	00 00                	add    %al,(%rax)
 6be:	00 00                	add    %al,(%rax)
 6c0:	59                   	pop    %rcx
 6c1:	04 00                	add    $0x0,%al
 6c3:	00 03                	add    %al,(%rbx)
	...
        AddChar(code);
 6cd:	ca 07 00             	lret   $0x7
 6d0:	00 00                	add    %al,(%rax)
 6d2:	12 d8                	adc    %al,%bl
 6d4:	05 00 00 37 f2       	add    $0xf2370000,%eax
 6d9:	06                   	(bad)  
	...
 6e2:	00 00                	add    %al,(%rax)
 6e4:	e0 02                	loopne 6e8 <.debug_info+0x6e8>
        break;
 6e6:	00 00                	add    %al,(%rax)
        break;
 6e8:	00 00                	add    %al,(%rax)
        if (!isPressed) break;
 6ea:	00 00                	add    %al,(%rax)
}
 6ec:	01 9c ca 07 00 00 09 	add    %ebx,0x9000007(%rdx,%rcx,8)
{
 6f3:	00 00                	add    %al,(%rax)
 6f5:	00 00                	add    %al,(%rax)
 6f7:	2d 06 00 00 02       	sub    $0x2000006,%eax
 6fc:	91                   	xchg   %eax,%ecx
 6fd:	48 0f 6b 65 79       	rex.W packssdw 0x79(%rbp),%mm4
 702:	00 37                	add    %dh,(%rdi)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 704:	24 95                	and    $0x95,%al
 706:	00 00                	add    %al,(%rax)
 708:	00 02                	add    %al,(%rdx)
 70a:	91                   	xchg   %eax,%ecx
 70b:	44 13 00             	adc    (%rax),%r8d
 70e:	00 00                	add    %al,(%rax)
 710:	00 37                	add    %dh,(%rdi)
 712:	2e e9 04 00 00 02    	cs jmp 200071c <Console::AddChar(char)+0x200002a>
 718:	91                   	xchg   %eax,%ecx
 719:	40 27                	rex (bad) 
	...
 723:	99                   	cltd   
 724:	02 00                	add    (%rax),%al
 726:	00 00                	add    %al,(%rax)
 728:	00 00                	add    %al,(%rax)
 72a:	00 0a                	add    %cl,(%rdx)
 72c:	00 00                	add    %al,(%rax)
 72e:	00 00                	add    %al,(%rax)
 730:	71 0e                	jno    740 <.debug_info+0x740>
 732:	32 06                	xor    (%rsi),%al
 734:	00 00                	add    %al,(%rax)
 736:	02 91 5f 03 00 00    	add    0x35f(%rcx),%dl
 73c:	00 00                	add    %al,(%rax)
 73e:	00 00                	add    %al,(%rax)
 740:	00 00                	add    %al,(%rax)
 742:	ca 07 00             	lret   $0x7
 745:	00 03                	add    %al,(%rbx)
	...
 74f:	ca 07 00             	lret   $0x7
 752:	00 03                	add    %al,(%rbx)
	...
 75c:	ca 07 00             	lret   $0x7
    m_LineLength++;
 75f:	00 03                	add    %al,(%rbx)
	...
 769:	ca 07 00             	lret   $0x7
 76c:	00 03                	add    %al,(%rbx)
	...
    if (++m_OffsetX >= 80)
 776:	ca 07 00             	lret   $0x7
 779:	00 03                	add    %al,(%rbx)
	...
 783:	59                   	pop    %rcx
 784:	04 00                	add    $0x0,%al
 786:	00 03                	add    %al,(%rbx)
	...
 790:	ca 07 00             	lret   $0x7
        m_OffsetX = 0;
 793:	00 03                	add    %al,(%rbx)
	...
        if (m_OffsetY >= 22)
 79d:	a1 04 00 00 03 00 00 	movabs 0x3000004,%eax
 7a4:	00 00 
 7a6:	00 00                	add    %al,(%rax)
            m_TextPresenter->MoveUp();
 7a8:	00 00                	add    %al,(%rax)
 7aa:	72 06                	jb     7b2 <.debug_info+0x7b2>
 7ac:	00 00                	add    %al,(%rax)
 7ae:	03 00                	add    (%rax),%eax
 7b0:	00 00                	add    %al,(%rax)
 7b2:	00 00                	add    %al,(%rax)
 7b4:	00 00                	add    %al,(%rax)
 7b6:	00 0d 04 00 00 03    	add    %cl,0x3000004(%rip)        # 30007c0 <Console::AddChar(char)+0x30000ce>
	...
            RenderModifiers();
 7c4:	72 06                	jb     7cc <.debug_info+0x7cc>
 7c6:	00 00                	add    %al,(%rax)
 7c8:	00 00                	add    %al,(%rax)
 7ca:	0e                   	(bad)  
 7cb:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
 7cc:	05 00 00 28 ea       	add    $0xea280000,%eax
 7d1:	07                   	(bad)  
	...
        } else m_OffsetY++;
 7da:	00 00                	add    %al,(%rax)
 7dc:	8d 02                	lea    (%rdx),%eax
 7de:	00 00                	add    %al,(%rax)
 7e0:	00 00                	add    %al,(%rax)
 7e2:	00 00                	add    %al,(%rax)
 7e4:	01 9c 83 08 00 00 09 	add    %ebx,0x9000008(%rbx,%rax,4)
 7eb:	00 00                	add    %al,(%rax)
 7ed:	00 00                	add    %al,(%rax)
 7ef:	2d 06 00 00 03       	sub    $0x3000006,%eax
 7f4:	91                   	xchg   %eax,%ecx
 7f5:	a8 7f                	test   $0x7f,%al
 7f7:	0a 00                	or     (%rax),%al
 7f9:	00 00                	add    %al,(%rax)
 7fb:	00 2a                	add    %ch,(%rdx)
 7fd:	0a e9                	or     %cl,%ch
 7ff:	04 00                	add    $0x0,%al
 801:	00 03                	add    %al,(%rbx)
 803:	91                   	xchg   %eax,%ecx
 804:	bf 7f 0a 00 00       	mov    $0xa7f,%edi
 809:	00 00                	add    %al,(%rax)
 80b:	2b 0a                	sub    (%rdx),%ecx
 80d:	e9 04 00 00 03       	jmp    3000816 <Console::AddChar(char)+0x3000124>
 812:	91                   	xchg   %eax,%ecx
 813:	be 7f 0a 00 00       	mov    $0xa7f,%esi
 818:	00 00                	add    %al,(%rax)
 81a:	2c 0a                	sub    $0xa,%al
 81c:	e9 04 00 00 03       	jmp    3000825 <Console::AddChar(char)+0x3000133>
 821:	91                   	xchg   %eax,%ecx
 822:	bd 7f 28 61 6c       	mov    $0x6c61287f,%ebp
 827:	74 00                	je     829 <.debug_info+0x829>
 829:	01 2d 0a e9 04 00    	add    %ebp,0x4e90a(%rip)        # 4f139 <Console::AddChar(char)+0x4ea47>
 82f:	00 03                	add    %al,(%rbx)
 831:	91                   	xchg   %eax,%ecx
 832:	bc 7f 03 00 00       	mov    $0x37f,%esp
 837:	00 00                	add    %al,(%rax)
 839:	00 00                	add    %al,(%rax)
 83b:	00 00                	add    %al,(%rax)
 83d:	73 04                	jae    843 <.debug_info+0x843>
 83f:	00 00                	add    %al,(%rax)
 841:	03 00                	add    (%rax),%eax
 843:	00 00                	add    %al,(%rax)
 845:	00 00                	add    %al,(%rax)
 847:	00 00                	add    %al,(%rax)
 849:	00 73 04             	add    %dh,0x4(%rbx)
 84c:	00 00                	add    %al,(%rax)
 84e:	03 00                	add    (%rax),%eax
 850:	00 00                	add    %al,(%rax)
 852:	00 00                	add    %al,(%rax)
 854:	00 00                	add    %al,(%rax)
 856:	00 73 04             	add    %dh,0x4(%rbx)
 859:	00 00                	add    %al,(%rax)
 85b:	03 00                	add    (%rax),%eax
 85d:	00 00                	add    %al,(%rax)
 85f:	00 00                	add    %al,(%rax)
 861:	00 00                	add    %al,(%rax)
 863:	00 73 04             	add    %dh,0x4(%rbx)
 866:	00 00                	add    %al,(%rax)
 868:	03 00                	add    (%rax),%eax
 86a:	00 00                	add    %al,(%rax)
 86c:	00 00                	add    %al,(%rax)
 86e:	00 00                	add    %al,(%rax)
 870:	00 73 04             	add    %dh,0x4(%rbx)
 873:	00 00                	add    %al,(%rax)
 875:	03 00                	add    (%rax),%eax
 877:	00 00                	add    %al,(%rax)
 879:	00 00                	add    %al,(%rax)
 87b:	00 00                	add    %al,(%rax)
 87d:	00 73 04             	add    %dh,0x4(%rbx)
 880:	00 00                	add    %al,(%rax)
 882:	00 12                	add    %dl,(%rdx)
 884:	be 05 00 00 22       	mov    $0x22000005,%esi
 889:	a3 08 00 00 00 00 00 	movabs %eax,0x8
 890:	00 00 
 892:	00 00                	add    %al,(%rax)
 894:	00 3b                	add    %bh,(%rbx)
 896:	00 00                	add    %al,(%rax)
 898:	00 00                	add    %al,(%rax)
 89a:	00 00                	add    %al,(%rax)
 89c:	00 01                	add    %al,(%rcx)
 89e:	9c                   	pushf  
 89f:	bd 08 00 00 09       	mov    $0x9000008,%ebp
 8a4:	00 00                	add    %al,(%rax)
 8a6:	00 00                	add    %al,(%rax)
 8a8:	2d 06 00 00 02       	sub    $0x2000006,%eax
 8ad:	91                   	xchg   %eax,%ecx
 8ae:	68 03 00 00 00       	push   $0x3
 8b3:	00 00                	add    %al,(%rax)
 8b5:	00 00                	add    %al,(%rax)
 8b7:	00 bd 08 00 00 00    	add    %bh,0x8(%rbp)
 8bd:	0e                   	(bad)  
 8be:	8a 05 00 00 1c dd    	mov    -0x22e40000(%rip),%al        # ffffffffdd1c08c4 <Console::AddChar(char)+0xffffffffdd1c01d2>
 8c4:	08 00                	or     %al,(%rax)
	...
 8ce:	00 72 00             	add    %dh,0x0(%rdx)
 8d1:	00 00                	add    %al,(%rax)
 8d3:	00 00                	add    %al,(%rax)
 8d5:	00 00                	add    %al,(%rax)
 8d7:	01 9c 04 09 00 00 09 	add    %ebx,0x9000009(%rsp,%rax,1)
 8de:	00 00                	add    %al,(%rax)
 8e0:	00 00                	add    %al,(%rax)
 8e2:	2d 06 00 00 02       	sub    $0x2000006,%eax
 8e7:	91                   	xchg   %eax,%ecx
 8e8:	58                   	pop    %rax
 8e9:	03 00                	add    (%rax),%eax
 8eb:	00 00                	add    %al,(%rax)
 8ed:	00 00                	add    %al,(%rax)
 8ef:	00 00                	add    %al,(%rax)
 8f1:	00 ca                	add    %cl,%dl
 8f3:	07                   	(bad)  
 8f4:	00 00                	add    %al,(%rax)
 8f6:	03 00                	add    (%rax),%eax
 8f8:	00 00                	add    %al,(%rax)
 8fa:	00 00                	add    %al,(%rax)
 8fc:	00 00                	add    %al,(%rax)
 8fe:	00 a1 04 00 00 00    	add    %ah,0x4(%rcx)
 904:	14 6b                	adc    $0x6b,%al
 906:	05 00 00 17 12       	add    $0x12170000,%eax
 90b:	09 00                	or     %eax,(%rax)
 90d:	00 25 09 00 00 0d    	add    %ah,0xd000009(%rip)        # d00091c <Console::AddChar(char)+0xd00022a>
 913:	00 00                	add    %al,(%rax)
 915:	00 00                	add    %al,(%rax)
 917:	2d 06 00 00 0d       	sub    $0xd000006,%eax
 91c:	00 00                	add    %al,(%rax)
 91e:	00 00                	add    %al,(%rax)
 920:	43 00 00             	rex.XB add %al,(%r8)
 923:	00 00                	add    %al,(%rax)
 925:	15 04 09 00 00       	adc    $0x904,%eax
 92a:	00 00                	add    %al,(%rax)
 92c:	00 00                	add    %al,(%rax)
 92e:	48 09 00             	or     %rax,(%rax)
	...
 939:	00 0f                	add    %cl,(%rdi)
 93b:	00 00                	add    %al,(%rax)
 93d:	00 00                	add    %al,(%rax)
 93f:	00 00                	add    %al,(%rax)
 941:	00 01                	add    %al,(%rcx)
 943:	9c                   	pushf  
 944:	51                   	push   %rcx
 945:	09 00                	or     %eax,(%rax)
 947:	00 16                	add    %dl,(%rsi)
 949:	12 09                	adc    (%rcx),%cl
 94b:	00 00                	add    %al,(%rax)
 94d:	02 91 68 00 14 51    	add    0x51140068(%rcx),%dl
 953:	05 00 00 0d 5f       	add    $0x5f0d0000,%eax
 958:	09 00                	or     %eax,(%rax)
 95a:	00 69 09             	add    %ch,0x9(%rcx)
 95d:	00 00                	add    %al,(%rax)
 95f:	0d 00 00 00 00       	or     $0x0,%eax
 964:	2d 06 00 00 00       	sub    $0x6,%eax
 969:	15 51 09 00 00       	adc    $0x951,%eax
 96e:	00 00                	add    %al,(%rax)
 970:	00 00                	add    %al,(%rax)
 972:	8c 09                	mov    %cs,(%rcx)
	...
 97c:	00 00                	add    %al,(%rax)
 97e:	85 00                	test   %eax,(%rax)
 980:	00 00                	add    %al,(%rax)
 982:	00 00                	add    %al,(%rax)
 984:	00 00                	add    %al,(%rax)
 986:	01 9c c9 09 00 00 16 	add    %ebx,0x16000009(%rcx,%rcx,8)
 98d:	5f                   	pop    %rdi
 98e:	09 00                	or     %eax,(%rax)
 990:	00 02                	add    %al,(%rdx)
 992:	91                   	xchg   %eax,%ecx
 993:	58                   	pop    %rax
 994:	03 00                	add    (%rax),%eax
 996:	00 00                	add    %al,(%rax)
 998:	00 00                	add    %al,(%rax)
 99a:	00 00                	add    %al,(%rax)
 99c:	00 23                	add    %ah,(%rbx)
 99e:	0a 00                	or     (%rax),%al
 9a0:	00 03                	add    %al,(%rbx)
	...
 9aa:	57                   	push   %rdi
 9ab:	06                   	(bad)  
 9ac:	00 00                	add    %al,(%rax)
 9ae:	03 00                	add    (%rax),%eax
 9b0:	00 00                	add    %al,(%rax)
 9b2:	00 00                	add    %al,(%rax)
 9b4:	00 00                	add    %al,(%rax)
 9b6:	00 2c 0a             	add    %ch,(%rdx,%rcx,1)
 9b9:	00 00                	add    %al,(%rax)
 9bb:	03 00                	add    (%rax),%eax
 9bd:	00 00                	add    %al,(%rax)
 9bf:	00 00                	add    %al,(%rax)
 9c1:	00 00                	add    %al,(%rax)
 9c3:	00 83 08 00 00 00    	add    %al,0x8(%rbx)
 9c9:	29 00                	sub    %eax,(%rax)
 9cb:	00 00                	add    %al,(%rax)
 9cd:	00 01                	add    %al,(%rcx)
 9cf:	04 06                	add    $0x6,%al
	...
 9dd:	40 00 00             	rex add %al,(%rax)
 9e0:	00 00                	add    %al,(%rax)
 9e2:	00 00                	add    %al,(%rax)
 9e4:	00 01                	add    %al,(%rcx)
 9e6:	9c                   	pushf  
 9e7:	23 0a                	and    (%rdx),%ecx
 9e9:	00 00                	add    %al,(%rax)
 9eb:	0f 6b 65 79          	packssdw 0x79(%rbp),%mm4
 9ef:	00 04 28             	add    %al,(%rax,%rbp,1)
 9f2:	95                   	xchg   %eax,%ebp
 9f3:	00 00                	add    %al,(%rax)
 9f5:	00 02                	add    %al,(%rdx)
 9f7:	91                   	xchg   %eax,%ecx
 9f8:	5c                   	pop    %rsp
 9f9:	13 00                	adc    (%rax),%eax
 9fb:	00 00                	add    %al,(%rax)
 9fd:	00 04 32             	add    %al,(%rdx,%rsi,1)
 a00:	e9 04 00 00 02       	jmp    2000a09 <Console::AddChar(char)+0x2000317>
 a05:	91                   	xchg   %eax,%ecx
 a06:	58                   	pop    %rax
 a07:	0a 00                	or     (%rax),%al
 a09:	00 00                	add    %al,(%rax)
 a0b:	00 06                	add    %al,(%rsi)
 a0d:	0e                   	(bad)  
 a0e:	28 06                	sub    %al,(%rsi)
 a10:	00 00                	add    %al,(%rax)
 a12:	02 91 68 03 00 00    	add    0x368(%rcx),%dl
 a18:	00 00                	add    %al,(%rax)
 a1a:	00 00                	add    %al,(%rax)
 a1c:	00 00                	add    %al,(%rax)
 a1e:	d2 06                	rolb   %cl,(%rsi)
 a20:	00 00                	add    %al,(%rax)
 a22:	00 17                	add    %dl,(%rdi)
	...
 a2c:	17                   	(bad)  
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
{
   0:	01 28                	add    %ebp,(%rax)
   2:	00 03                	add    %al,(%rbx)
   4:	0e                   	(bad)  
   5:	1c 0b                	sbb    $0xb,%al
   7:	00 00                	add    %al,(%rax)
   9:	02 28                	add    (%rax),%ch
   b:	00 03                	add    %al,(%rbx)
   d:	08 1c 0b             	or     %bl,(%rbx,%rcx,1)
    Console *console = g_Console;
  10:	00 00                	add    %al,(%rax)
  12:	03 48 00             	add    0x0(%rax),%ecx
  15:	7d 01                	jge    18 <.debug_abbrev+0x18>
  17:	7f 13                	jg     2c <.debug_abbrev+0x2c>
  19:	00 00                	add    %al,(%rax)
  1b:	04 05                	add    $0x5,%al
  1d:	00 49 13             	add    %cl,0x13(%rcx)
  20:	00 00                	add    %al,(%rax)
    console->AcceptKey(key, isPressed);
  22:	05 05 00 49 13       	add    $0x13490005,%eax
  27:	34 19                	xor    $0x19,%al
  29:	00 00                	add    %al,(%rax)
  2b:	06                   	(bad)  
  2c:	24 00                	and    $0x0,%al
  2e:	0b 0b                	or     (%rbx),%ecx
  30:	3e 0b 03             	ds or  (%rbx),%eax
  33:	0e                   	(bad)  
  34:	00 00                	add    %al,(%rax)
  36:	07                   	(bad)  
  37:	2e 01 3f             	cs add %edi,(%rdi)
  3a:	19 03                	sbb    %eax,(%rbx)
  3c:	0e                   	(bad)  
}
  3d:	3a 0b                	cmp    (%rbx),%cl
  3f:	3b 0b                	cmp    (%rbx),%ecx
Console::Console()
  41:	39 0b                	cmp    %ecx,(%rbx)
  43:	6e                   	outsb  %ds:(%rsi),(%dx)
  44:	0e                   	(bad)  
  45:	32 21                	xor    (%rcx),%ah
  47:	01 3c 19             	add    %edi,(%rcx,%rbx,1)
  4a:	64 13 01             	adc    %fs:(%rcx),%eax
  : m_TextPresenter(new Video::TextModePresenter()),
  4d:	13 00                	adc    (%rax),%eax
  4f:	00 08                	add    %cl,(%rax)
  51:	0d 00 03 0e 3a       	or     $0x3a0e0300,%eax
  56:	21 05 3b 0b 39 0b    	and    %eax,0xb390b3b(%rip)        # b390b97 <Console::AddChar(char)+0xb3904a5>
  5c:	49 13 38             	adc    (%r8),%rdi
  5f:	0b 00                	or     (%rax),%eax
  61:	00 09                	add    %cl,(%rcx)
  63:	05 00 03 0e 49       	add    $0x490e0300,%eax
  68:	13 34 19             	adc    (%rcx,%rbx,1),%esi
  6b:	02 18                	add    (%rax),%bl
  6d:	00 00                	add    %al,(%rax)
  6f:	0a 34 00             	or     (%rax,%rax,1),%dh
  72:	03 0e                	add    (%rsi),%ecx
  74:	3a 21                	cmp    (%rcx),%ah
  76:	01 3b                	add    %edi,(%rbx)
    m_KeyModifiers(0)
  78:	0b 39                	or     (%rcx),%edi
  7a:	0b 49 13             	or     0x13(%rcx),%ecx
  7d:	02 18                	add    (%rax),%bl
    m_Buffers(new uint8_t[23 * 80]),
  7f:	00 00                	add    %al,(%rax)
  81:	0b 26                	or     (%rsi),%esp
  83:	00 49 13             	add    %cl,0x13(%rcx)
  86:	00 00                	add    %al,(%rax)
  88:	0c 0f                	or     $0xf,%al
  8a:	00 0b                	add    %cl,(%rbx)
  8c:	21 08                	and    %ecx,(%rax)
  8e:	49 13 00             	adc    (%r8),%rax
  91:	00 0d 05 00 03 0e    	add    %cl,0xe030005(%rip)        # e03009c <Console::AddChar(char)+0xe02f9aa>
  97:	49 13 34 19          	adc    (%r9,%rbx,1),%rsi
    m_OffsetX(0),
  9b:	00 00                	add    %al,(%rax)
  9d:	0e                   	(bad)  
  9e:	2e 01 47 13          	cs add %eax,0x13(%rdi)
  a2:	3a 21                	cmp    (%rcx),%ah
    m_OffsetY(0),
  a4:	01 3b                	add    %edi,(%rbx)
  a6:	0b 39                	or     (%rcx),%edi
  a8:	21 06                	and    %eax,(%rsi)
  aa:	64 13 11             	adc    %fs:(%rcx),%edx
    Refresh();
  ad:	01 12                	add    %edx,(%rdx)
  af:	07                   	(bad)  
  b0:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
  b4:	01 13                	add    %edx,(%rbx)
  b6:	00 00                	add    %al,(%rax)
  b8:	0f 05                	syscall 
  ba:	00 03                	add    %al,(%rbx)
  bc:	08 3a                	or     %bh,(%rdx)
}
  be:	21 01                	and    %eax,(%rcx)
  c0:	3b 0b                	cmp    (%rbx),%ecx
  c2:	39 0b                	cmp    %ecx,(%rbx)
  c4:	49 13 02             	adc    (%r10),%rax
Console::~Console()
  c7:	18 00                	sbb    %al,(%rax)
  c9:	00 10                	add    %dl,(%rax)
  cb:	39 01                	cmp    %eax,(%rcx)
  cd:	03 0e                	add    (%rsi),%ecx
  cf:	3a 0b                	cmp    (%rbx),%cl
  d1:	3b 0b                	cmp    (%rbx),%ecx
}
  d3:	39 21                	cmp    %esp,(%rcx)
  d5:	0b 01                	or     (%rcx),%eax
{
  d7:	13 00                	adc    (%rax),%eax
  d9:	00 11                	add    %dl,(%rcx)
  db:	0d 00 03 08 3a       	or     $0x3a080300,%eax
  e0:	21 03                	and    %eax,(%rbx)
  e2:	3b 21                	cmp    (%rcx),%esp
    RenderModifiers();
  e4:	09 39                	or     %edi,(%rcx)
  e6:	0b 49 13             	or     0x13(%rcx),%ecx
  e9:	38 0b                	cmp    %cl,(%rbx)
  eb:	00 00                	add    %al,(%rax)
  ed:	12 2e                	adc    (%rsi),%ch
  ef:	01 47 13             	add    %eax,0x13(%rdi)
  f2:	3a 21                	cmp    (%rcx),%ah
  f4:	01 3b                	add    %edi,(%rbx)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f6:	0b 39                	or     (%rcx),%edi
  f8:	21 06                	and    %eax,(%rsi)
  fa:	64 13 11             	adc    %fs:(%rcx),%edx
  fd:	01 12                	add    %edx,(%rdx)
  ff:	07                   	(bad)  
 100:	40 18 7c 19 01       	sbb    %dil,0x1(%rcx,%rbx,1)
 105:	13 00                	adc    (%rax),%eax
 107:	00 13                	add    %dl,(%rbx)
 109:	05 00 03 0e 3a       	add    $0x3a0e0300,%eax
 10e:	21 01                	and    %eax,(%rcx)
 110:	3b 0b                	cmp    (%rbx),%ecx
 112:	39 0b                	cmp    %ecx,(%rbx)
 114:	49 13 02             	adc    (%r10),%rax
 117:	18 00                	sbb    %al,(%rax)
 119:	00 14 2e             	add    %dl,(%rsi,%rbp,1)
 11c:	01 47 13             	add    %eax,0x13(%rdi)
 11f:	3a 21                	cmp    (%rcx),%ah
 121:	01 3b                	add    %edi,(%rbx)
 123:	0b 39                	or     (%rcx),%edi
 125:	21 01                	and    %eax,(%rcx)
 127:	64 13 20             	adc    %fs:(%rax),%esp
 12a:	21 00                	and    %eax,(%rax)
 12c:	01 13                	add    %edx,(%rbx)
 12e:	00 00                	add    %al,(%rax)
 130:	15 2e 01 31 13       	adc    $0x1331012e,%eax
 135:	6e                   	outsb  %ds:(%rsi),(%dx)
 136:	0e                   	(bad)  
 137:	64 13 11             	adc    %fs:(%rcx),%edx
 13a:	01 12                	add    %edx,(%rdx)
 13c:	07                   	(bad)  
 13d:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
}
 141:	01 13                	add    %edx,(%rbx)
 143:	00 00                	add    %al,(%rax)
 145:	16                   	(bad)  
 146:	05 00 31 13 02       	add    $0x2133100,%eax
{
 14b:	18 00                	sbb    %al,(%rax)
 14d:	00 17                	add    %dl,(%rdi)
 14f:	2e 00 3f             	cs add %bh,(%rdi)
 152:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
    m_TextPresenter->Clear();
 155:	6e                   	outsb  %ds:(%rsi),(%dx)
 156:	0e                   	(bad)  
 157:	03 0e                	add    (%rsi),%ecx
 159:	00 00                	add    %al,(%rax)
 15b:	18 11                	sbb    %dl,(%rcx)
 15d:	01 25 0e 13 0b 03    	add    %esp,0x30b130e(%rip)        # 30b1471 <Console::AddChar(char)+0x30b0d7f>
 163:	1f                   	(bad)  
 164:	1b 1f                	sbb    (%rdi),%ebx
 166:	11 01                	adc    %eax,(%rcx)
 168:	12 07                	adc    (%rdi),%al
 16a:	10 17                	adc    %dl,(%rdi)
 16c:	00 00                	add    %al,(%rax)
    Render();
 16e:	19 24 00             	sbb    %esp,(%rax,%rax,1)
 171:	0b 0b                	or     (%rbx),%ecx
 173:	3e 0b 03             	ds or  (%rbx),%eax
 176:	08 00                	or     %al,(%rax)
 178:	00 1a                	add    %bl,(%rdx)
 17a:	16                   	(bad)  
 17b:	00 03                	add    %al,(%rbx)
 17d:	0e                   	(bad)  
 17e:	3a 0b                	cmp    (%rbx),%cl
}
 180:	3b 0b                	cmp    (%rbx),%ecx
 182:	39 0b                	cmp    %ecx,(%rbx)
{
 184:	49 13 00             	adc    (%r8),%rax
 187:	00 1b                	add    %bl,(%rbx)
 189:	3b 00                	cmp    (%rax),%eax
 18b:	03 0e                	add    (%rsi),%ecx
 18d:	00 00                	add    %al,(%rax)
 18f:	1c 04                	sbb    $0x4,%al
 191:	01 03                	add    %eax,(%rbx)
 193:	08 3e                	or     %bh,(%rsi)
 195:	0b 0b                	or     (%rbx),%ecx
 197:	0b 49 13             	or     0x13(%rcx),%ecx
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
 19a:	3a 0b                	cmp    (%rbx),%cl
 19c:	3b 0b                	cmp    (%rbx),%ecx
 19e:	39 0b                	cmp    %ecx,(%rbx)
 1a0:	01 13                	add    %edx,(%rbx)
 1a2:	00 00                	add    %al,(%rax)
 1a4:	1d 04 01 03 0e       	sbb    $0xe030104,%eax
 1a9:	3e 0b 0b             	ds or  (%rbx),%ecx
 1ac:	0b 49 13             	or     0x13(%rcx),%ecx
    bool shift = m_KeyModifiers & KeyModifiersShift;
 1af:	3a 0b                	cmp    (%rbx),%cl
 1b1:	3b 0b                	cmp    (%rbx),%ecx
 1b3:	39 0b                	cmp    %ecx,(%rbx)
 1b5:	01 13                	add    %edx,(%rbx)
 1b7:	00 00                	add    %al,(%rax)
 1b9:	1e                   	(bad)  
 1ba:	2e 01 3f             	cs add %edi,(%rdi)
 1bd:	19 03                	sbb    %eax,(%rbx)
 1bf:	0e                   	(bad)  
 1c0:	3a 0b                	cmp    (%rbx),%cl
 1c2:	3b 0b                	cmp    (%rbx),%ecx
 1c4:	39 0b                	cmp    %ecx,(%rbx)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
 1c6:	6e                   	outsb  %ds:(%rsi),(%dx)
 1c7:	0e                   	(bad)  
 1c8:	49 13 3c 19          	adc    (%r9,%rbx,1),%rdi
 1cc:	00 00                	add    %al,(%rax)
 1ce:	1f                   	(bad)  
 1cf:	13 01                	adc    (%rcx),%eax
 1d1:	03 0e                	add    (%rsi),%ecx
 1d3:	0b 0b                	or     (%rbx),%ecx
 1d5:	3a 0b                	cmp    (%rbx),%cl
 1d7:	3b 0b                	cmp    (%rbx),%ecx
 1d9:	39 0b                	cmp    %ecx,(%rbx)
    bool alt = m_KeyModifiers & KeyModifiersAlt;
 1db:	01 13                	add    %edx,(%rbx)
 1dd:	00 00                	add    %al,(%rax)
 1df:	20 02                	and    %al,(%rdx)
 1e1:	01 03                	add    %eax,(%rbx)
 1e3:	0e                   	(bad)  
 1e4:	3c 19                	cmp    $0x19,%al
 1e6:	00 00                	add    %al,(%rax)
 1e8:	21 2e                	and    %ebp,(%rsi)
 1ea:	01 3f                	add    %edi,(%rdi)
 1ec:	19 03                	sbb    %eax,(%rbx)
 1ee:	0e                   	(bad)  
 1ef:	3a 0b                	cmp    (%rbx),%cl
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
 1f1:	3b 0b                	cmp    (%rbx),%ecx
 1f3:	39 0b                	cmp    %ecx,(%rbx)
 1f5:	6e                   	outsb  %ds:(%rsi),(%dx)
 1f6:	0e                   	(bad)  
 1f7:	32 0b                	xor    (%rbx),%cl
 1f9:	3c 19                	cmp    $0x19,%al
 1fb:	64 13 20             	adc    %fs:(%rax),%esp
 1fe:	0b 00                	or     (%rax),%eax
 200:	00 22                	add    %ah,(%rdx)
 202:	02 01                	add    (%rcx),%al
 204:	03 0e                	add    (%rsi),%ecx
 206:	0b 0b                	or     (%rbx),%ecx
 208:	3a 0b                	cmp    (%rbx),%cl
 20a:	3b 0b                	cmp    (%rbx),%ecx
 20c:	39 0b                	cmp    %ecx,(%rbx)
 20e:	01 13                	add    %edx,(%rbx)
 210:	00 00                	add    %al,(%rax)
 212:	23 2e                	and    (%rsi),%ebp
 214:	01 3f                	add    %edi,(%rdi)
 216:	19 03                	sbb    %eax,(%rbx)
 218:	0e                   	(bad)  
 219:	3a 0b                	cmp    (%rbx),%cl
 21b:	3b 0b                	cmp    (%rbx),%ecx
 21d:	39 0b                	cmp    %ecx,(%rbx)
 21f:	6e                   	outsb  %ds:(%rsi),(%dx)
 220:	0e                   	(bad)  
 221:	32 0b                	xor    (%rbx),%cl
 223:	3c 19                	cmp    $0x19,%al
 225:	64 13 00             	adc    %fs:(%rax),%eax
 228:	00 24 34             	add    %ah,(%rsp,%rsi,1)
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
 22b:	00 03                	add    %al,(%rbx)
 22d:	0e                   	(bad)  
 22e:	3a 0b                	cmp    (%rbx),%cl
 230:	3b 0b                	cmp    (%rbx),%ecx
 232:	39 0b                	cmp    %ecx,(%rbx)
 234:	49 13 3f             	adc    (%r15),%rdi
 237:	19 3c 19             	sbb    %edi,(%rcx,%rbx,1)
 23a:	00 00                	add    %al,(%rax)
 23c:	25 3a 00 3a 0b       	and    $0xb3a003a,%eax
 241:	3b 0b                	cmp    (%rbx),%ecx
 243:	39 0b                	cmp    %ecx,(%rbx)
 245:	18 13                	sbb    %dl,(%rbx)
 247:	00 00                	add    %al,(%rax)
 249:	26 2e 01 31          	es cs add %esi,(%rcx)
 24d:	13 6e 0e             	adc    0xe(%rsi),%ebp
 250:	64 13 01             	adc    %fs:(%rcx),%eax
 253:	13 00                	adc    (%rax),%eax
 255:	00 27                	add    %ah,(%rdi)
 257:	0b 01                	or     (%rcx),%eax
 259:	11 01                	adc    %eax,(%rcx)
 25b:	12 07                	adc    (%rdi),%al
 25d:	00 00                	add    %al,(%rax)
 25f:	28 34 00             	sub    %dh,(%rax,%rax,1)
 262:	03 08                	add    (%rax),%ecx
 264:	3a 0b                	cmp    (%rbx),%cl
 266:	3b 0b                	cmp    (%rbx),%ecx
 268:	39 0b                	cmp    %ecx,(%rbx)
 26a:	49 13 02             	adc    (%r10),%rax
 26d:	18 00                	sbb    %al,(%rax)
 26f:	00 29                	add    %ch,(%rcx)
 271:	2e 01 3f             	cs add %edi,(%rdi)
 274:	19 03                	sbb    %eax,(%rbx)
 276:	0e                   	(bad)  
 277:	3a 0b                	cmp    (%rbx),%cl
 279:	3b 0b                	cmp    (%rbx),%ecx
 27b:	39 0b                	cmp    %ecx,(%rbx)
 27d:	6e                   	outsb  %ds:(%rsi),(%dx)
 27e:	0e                   	(bad)  
 27f:	11 01                	adc    %eax,(%rcx)
 281:	12 07                	adc    (%rdi),%al
 283:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
 287:	01 13                	add    %edx,(%rbx)
 289:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
{
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
	...
    Console *console = g_Console;
  18:	e7 07                	out    %eax,$0x7
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
{
   0:	ce                   	(bad)  
   1:	02 00                	add    (%rax),%al
   3:	00 05 00 08 00 53    	add    %al,0x53000800(%rip)        # 53000809 <Console::AddChar(char)+0x53000117>
   9:	00 00                	add    %al,(%rax)
   b:	00 01                	add    %al,(%rcx)
   d:	01 01                	add    %eax,(%rcx)
   f:	fb                   	sti    
    Console *console = g_Console;
  10:	0e                   	(bad)  
  11:	0d 00 01 01 01       	or     $0x1010100,%eax
  16:	01 00                	add    %eax,(%rax)
  18:	00 00                	add    %al,(%rax)
  1a:	01 00                	add    %eax,(%rax)
  1c:	00 01                	add    %al,(%rcx)
  1e:	01 01                	add    %eax,(%rcx)
  20:	1f                   	(bad)  
    console->AcceptKey(key, isPressed);
  21:	05 00 00 00 00       	add    $0x0,%eax
	...
  36:	02 01                	add    (%rcx),%al
  38:	1f                   	(bad)  
  39:	02 0f                	add    (%rdi),%cl
  3b:	07                   	(bad)  
  3c:	00 00                	add    %al,(%rax)
}
  3e:	00 00                	add    %al,(%rax)
Console::Console()
  40:	01 00                	add    %eax,(%rax)
  42:	00 00                	add    %al,(%rax)
  44:	00 01                	add    %al,(%rcx)
  46:	00 00                	add    %al,(%rax)
  48:	00 00                	add    %al,(%rax)
  4a:	02 00                	add    (%rax),%al
  4c:	00 00                	add    %al,(%rax)
  : m_TextPresenter(new Video::TextModePresenter()),
  4e:	00 03                	add    %al,(%rbx)
  50:	00 00                	add    %al,(%rax)
  52:	00 00                	add    %al,(%rax)
  54:	03 00                	add    (%rax),%eax
  56:	00 00                	add    %al,(%rax)
  58:	00 02                	add    %al,(%rdx)
  5a:	00 00                	add    %al,(%rax)
  5c:	00 00                	add    %al,(%rax)
  5e:	04 05                	add    $0x5,%al
  60:	01 00                	add    %eax,(%rax)
  62:	09 02                	or     %eax,(%rdx)
	...
  6c:	16                   	(bad)  
  6d:	05 0e f3 05 17       	add    $0x1705f30e,%eax
  72:	08 14 05 01 08 ad 40 	or     %dl,0x40ad0801(,%rax,1)
    m_KeyModifiers(0)
  79:	05 32 c9 05 05       	add    $0x505c932,%eax
  7e:	08 3c 08             	or     %bh,(%rax,%rcx,1)
    m_Buffers(new uint8_t[23 * 80]),
  81:	5c                   	pop    %rsp
  82:	05 22 7f 05 05       	add    $0x5057f22,%eax
  87:	08 3c 83             	or     %bh,(%rbx,%rax,4)
  8a:	83 05 0c 85 05 01 08 	addl   $0x8,0x105850c(%rip)        # 105859d <Console::AddChar(char)+0x1057eab>
  91:	2f                   	(bad)  
  92:	84 bd 4d 05 14 c9    	test   %bh,-0x36ebfab3(%rbp)
  98:	05 05 08 2f 05       	add    $0x52f0805,%eax
    m_OffsetX(0),
  9d:	1a 74 05 01          	sbb    0x1(%rbp,%rax,1),%dh
  a1:	02 44 13 77          	add    0x77(%rbx,%rdx,1),%al
    m_OffsetY(0),
  a5:	05 05 bb 05 1b       	add    $0x1b05bb05,%eax
  aa:	74 05                	je     b1 <.debug_line+0xb1>
    Refresh();
  ac:	05 66 05 1b 74       	add    $0x741b0566,%eax
  b1:	05 0b 59 05 01       	add    $0x105590b,%eax
  b6:	08 2f                	or     %ch,(%rdi)
  b8:	4d 05 11 08 4b 05    	rex.WRB add $0x54b0811,%rax
}
  be:	20 ac 05 0a 3c 05 12 	and    %ch,0x12053c0a(%rbp,%rax,1)
  c5:	83 05 21 ac 05 0a 3c 	addl   $0x3c,0xa05ac21(%rip)        # a05aced <Console::AddChar(char)+0xa05a5fb>
Console::~Console()
  cc:	05 11 83 05 20       	add    $0x20058311,%eax
  d1:	ac                   	lods   %ds:(%rsi),%al
}
  d2:	05 0a 3c 05 10       	add    $0x10053c0a,%eax
{
  d7:	83 05 1f ac 05 0a 3c 	addl   $0x3c,0xa05ac1f(%rip)        # a05acfd <Console::AddChar(char)+0xa05a60b>
  de:	05 05 84 05 1a       	add    $0x1a058405,%eax
    RenderModifiers();
  e3:	74 05                	je     ea <.debug_line+0xea>
  e5:	05 02 33 13 05       	add    $0x5133302,%eax
  ea:	1a 74 00 02          	sbb    0x2(%rax,%rax,1),%dh
  ee:	04 01                	add    $0x1,%al
  f0:	06                   	(bad)  
  f1:	66 00 02             	data16 add %al,(%rdx)
  f4:	04 02                	add    $0x2,%al
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f6:	ba 00 02 04 04       	mov    $0x4040200,%edx
  fb:	9e                   	sahf   
  fc:	05 05 00 02 04       	add    $0x4020005,%eax
 101:	04 06                	add    $0x6,%al
 103:	02 37                	add    (%rdi),%dh
 105:	13 05 1a 00 02 04    	adc    0x402001a(%rip),%eax        # 4020125 <Console::AddChar(char)+0x401fa33>
 10b:	04 74                	add    $0x74,%al
 10d:	00 02                	add    %al,(%rdx)
 10f:	04 01                	add    $0x1,%al
 111:	06                   	(bad)  
 112:	66 00 02             	data16 add %al,(%rdx)
 115:	04 02                	add    $0x2,%al
 117:	74 00                	je     119 <.debug_line+0x119>
 119:	02 04 04             	add    (%rsp,%rax,1),%al
 11c:	58                   	pop    %rax
 11d:	00 02                	add    %al,(%rdx)
 11f:	04 05                	add    $0x5,%al
 121:	66 00 02             	data16 add %al,(%rdx)
 124:	04 06                	add    $0x6,%al
 126:	74 00                	je     128 <.debug_line+0x128>
 128:	02 04 08             	add    (%rax,%rcx,1),%al
 12b:	58                   	pop    %rax
 12c:	05 05 00 02 04       	add    $0x4020005,%eax
 131:	08 06                	or     %al,(%rsi)
 133:	02 39                	add    (%rcx),%bh
 135:	13 05 1a 00 02 04    	adc    0x402001a(%rip),%eax        # 4020155 <Console::AddChar(char)+0x401fa63>
 13b:	08 74 00 02          	or     %dh,0x2(%rax,%rax,1)
 13f:	04 01                	add    $0x1,%al
}
 141:	06                   	(bad)  
 142:	66 00 02             	data16 add %al,(%rdx)
 145:	04 02                	add    $0x2,%al
 147:	74 00                	je     149 <.debug_line+0x149>
{
 149:	02 04 04             	add    (%rsp,%rax,1),%al
 14c:	58                   	pop    %rax
 14d:	00 02                	add    %al,(%rdx)
 14f:	04 05                	add    $0x5,%al
 151:	66 00 02             	data16 add %al,(%rdx)
    m_TextPresenter->Clear();
 154:	04 06                	add    $0x6,%al
 156:	74 00                	je     158 <.debug_line+0x158>
 158:	02 04 08             	add    (%rax,%rcx,1),%al
 15b:	58                   	pop    %rax
 15c:	05 05 00 02 04       	add    $0x4020005,%eax
 161:	08 06                	or     %al,(%rsi)
 163:	02 39                	add    (%rcx),%bh
 165:	13 05 1a 00 02 04    	adc    0x402001a(%rip),%eax        # 4020185 <Console::AddChar(char)+0x401fa93>
 16b:	08 74 00 02          	or     %dh,0x2(%rax,%rax,1)
    Render();
 16f:	04 01                	add    $0x1,%al
 171:	06                   	(bad)  
 172:	66 00 02             	data16 add %al,(%rdx)
 175:	04 02                	add    $0x2,%al
 177:	74 00                	je     179 <.debug_line+0x179>
 179:	02 04 04             	add    (%rsp,%rax,1),%al
 17c:	58                   	pop    %rax
 17d:	00 02                	add    %al,(%rdx)
 17f:	04 05                	add    $0x5,%al
}
 181:	66 00 02             	data16 add %al,(%rdx)
{
 184:	04 06                	add    $0x6,%al
 186:	74 00                	je     188 <.debug_line+0x188>
 188:	02 04 08             	add    (%rax,%rcx,1),%al
 18b:	58                   	pop    %rax
 18c:	05 05 00 02 04       	add    $0x4020005,%eax
 191:	08 06                	or     %al,(%rsi)
 193:	02 39                	add    (%rcx),%bh
 195:	13 05 1a 00 02 04    	adc    0x402001a(%rip),%eax        # 40201b5 <Console::AddChar(char)+0x401fac3>
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
 19b:	08 74 05 01          	or     %dh,0x1(%rbp,%rax,1)
 19f:	00 02                	add    %al,(%rdx)
 1a1:	04 08                	add    $0x8,%al
 1a3:	02 49 13             	add    0x13(%rcx),%cl
 1a6:	08 15 05 0d 08 4b    	or     %dl,0x4b080d05(%rip)        # 4b080eb1 <Console::AddChar(char)+0x4b0807bf>
 1ac:	05 05 3c 05 09       	add    $0x9053c05,%eax
    bool shift = m_KeyModifiers & KeyModifiersShift;
 1b1:	02 28                	add    (%rax),%ch
 1b3:	15 05 11 67 05       	adc    $0x5671105,%eax
 1b8:	20 ac 05 0d 3c 05 20 	and    %ch,0x20053c0d(%rbp,%rax,1)
 1bf:	4b 08 5a 05          	rex.WXB or %bl,0x5(%r10)
 1c3:	18 08                	sbb    %cl,(%rax)
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
 1c5:	3d 05 09 08 2f       	cmp    $0x2f080905,%eax
 1ca:	5b                   	pop    %rbx
 1cb:	05 1c 67 08 5a       	add    $0x5a08671c,%eax
 1d0:	05 18 08 3d 05       	add    $0x53d0818,%eax
 1d5:	09 08                	or     %ecx,(%rax)
 1d7:	2f                   	(bad)  
 1d8:	5b                   	pop    %rbx
 1d9:	05 1c 67 08 5a       	add    $0x5a08671c,%eax
    bool alt = m_KeyModifiers & KeyModifiersAlt;
 1de:	05 18 08 3d 05       	add    $0x53d0818,%eax
 1e3:	09 08                	or     %ecx,(%rax)
 1e5:	2f                   	(bad)  
 1e6:	5b                   	pop    %rbx
 1e7:	05 1c 67 08 5a       	add    $0x5a08671c,%eax
 1ec:	05 18 08 3d 05       	add    $0x53d0818,%eax
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
 1f1:	09 08                	or     %ecx,(%rax)
 1f3:	2f                   	(bad)  
 1f4:	5a                   	pop    %rdx
 1f5:	05 1f 74 05 09       	add    $0x905741f,%eax
 1fa:	66 05 1f 74          	add    $0x741f,%ax
 1fe:	05 18 59 05 09       	add    $0x9055918,%eax
 203:	08 2f                	or     %ch,(%rdi)
 205:	05 0d 5a 05 09       	add    $0x9055a0d,%eax
 20a:	74 05                	je     211 <.debug_line+0x211>
 20c:	16                   	(bad)  
 20d:	84 05 13 83 05 0d    	test   %al,0xd058313(%rip)        # d058526 <Console::AddChar(char)+0xd057e34>
 213:	83 05 09 82 05 0d 4c 	addl   $0x4c,0xd058209(%rip)        # d058423 <Console::AddChar(char)+0xd057d31>
 21a:	05 24 74 05 1c       	add    $0x1c057424,%eax
 21f:	e5 05                	in     $0x5,%eax
 221:	10 08                	adc    %cl,(%rax)
 223:	4b 05 19 82 05 09    	rex.WXB add $0x9058219,%rax
 229:	9f                   	lahf   
 22a:	05 1e 74 05 24       	add    $0x2405741e,%eax
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
 22f:	f2 05 2e ac 05 1e    	repnz add $0x1e05ac2e,%eax
 235:	3c 05                	cmp    $0x5,%al
 237:	09 02                	or     %eax,(%rdx)
 239:	30 13                	xor    %dl,(%rbx)
 23b:	05 10 30 05 17       	add    $0x17053010,%eax
 240:	08 74 05 29          	or     %dh,0x29(%rbp,%rax,1)
 244:	33 05 23 82 05 09    	xor    0x9058223(%rip),%eax        # 905846d <Console::AddChar(char)+0x9057d7b>
 24a:	08 83 05 16 00 02    	or     %al,0x2001605(%rbx)
 250:	04 01                	add    $0x1,%al
 252:	66 05 13 00          	add    $0x13,%ax
 256:	02 04 01             	add    (%rcx,%rax,1),%al
 259:	74 05                	je     260 <.debug_line+0x260>
 25b:	24 00                	and    $0x0,%al
 25d:	02 04 02             	add    (%rdx,%rax,1),%al
 260:	4a 05 21 00 02 04    	rex.WX add $0x4020021,%rax
 266:	02 82 05 10 4c 05    	add    0x54c1005(%rdx),%al
 26c:	09 08                	or     %ecx,(%rax)
 26e:	83 03 7a             	addl   $0x7a,(%rbx)
 271:	2e 05 19 03 71 3c    	cs add $0x3c710319,%eax
 277:	05 01 03 17 20       	add    $0x20170301,%eax
 27c:	77 05                	ja     283 <.debug_line+0x283>
 27e:	05 08 13 05 1a       	add    $0x1a051308,%eax
 283:	74 05                	je     28a <.debug_line+0x28a>
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
 285:	1d 4a 05 1a ac       	sbb    $0xac1a054a,%eax
 28a:	05 2c 08 20 05       	add    $0x520082c,%eax
 28f:	2a ac 05 1a 3c 05 05 	sub    0x5053c1a(%rbp,%rax,1),%ch
 296:	02 25 13 05 11 82    	add    -0x7deefaed(%rip),%ah        # ffffffff821107af <Console::AddChar(char)+0xffffffff821100bd>
 29c:	05 0b 9f 05 09       	add    $0x9059f0b,%eax
 2a1:	82                   	(bad)  
 2a2:	05 15 3c 05 0b       	add    $0xb053c15,%eax
 2a7:	74 05                	je     2ae <.debug_line+0x2ae>
 2a9:	15 82 05 05 58       	adc    $0x58050582,%eax
 2ae:	05 13 4c 05 0d       	add    $0xd054c13,%eax
 2b3:	83 05 09 82 05 0d 4c 	addl   $0x4c,0xd058209(%rip)        # d0584c3 <Console::AddChar(char)+0xd057dd1>
 2ba:	05 24 74 05 1c       	add    $0x1c057424,%eax
 2bf:	e5 05                	in     $0x5,%eax
 2c1:	01 08                	add    %ecx,(%rax)
 2c3:	31 05 10 2c 05 19    	xor    %eax,0x19052c10(%rip)        # 19052ed9 <Console::AddChar(char)+0x190527e7>
 2c9:	82                   	(bad)  
 2ca:	05 01 a0 02 03       	add    $0x302a001,%eax
 2cf:	00 01                	add    %al,(%rcx)
 2d1:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
{
   0:	69 73 50 72 65 73 73 	imul   $0x73736572,0x50(%rbx),%esi
   7:	65 64 00 63 61       	gs add %ah,%fs:0x61(%rbx)
   c:	70 73                	jo     81 <.debug_str+0x81>
   e:	00 4d 69             	add    %cl,0x69(%rbp)
    Console *console = g_Console;
  11:	6e                   	outsb  %ds:(%rsi),(%dx)
  12:	75 73                	jne    87 <.debug_str+0x87>
  14:	00 48 6f             	add    %cl,0x6f(%rax)
  17:	6d                   	insl   (%dx),%es:(%rdi)
  18:	65 00 6d 5f          	add    %ch,%gs:0x5f(%rbp)
  1c:	4f                   	rex.WRXB
  1d:	66 66 73 65          	data16 data16 jae 86 <.debug_str+0x86>
    console->AcceptKey(key, isPressed);
  21:	74 58                	je     7b <.debug_str+0x7b>
  23:	00 50 6f             	add    %dl,0x6f(%rax)
  26:	75 6e                	jne    96 <.debug_str+0x96>
  28:	64 00 41 70          	add    %al,%fs:0x70(%rcx)
  2c:	70 73                	jo     a1 <.debug_str+0xa1>
  2e:	00 44 6f 75          	add    %al,0x75(%rdi,%rbp,2)
  32:	62                   	(bad)  
  33:	6c                   	insb   (%dx),%es:(%rdi)
  34:	65 51                	gs push %rcx
  36:	75 6f                	jne    a7 <.debug_str+0xa7>
  38:	74 65                	je     9f <.debug_str+0x9f>
  3a:	00 41 72             	add    %al,0x72(%rcx)
}
  3d:	72 6f                	jb     ae <.debug_str+0xae>
  3f:	77 4c                	ja     8d <.debug_str+0x8d>
Console::Console()
  41:	65 66 74 00          	gs data16 je 45 <.debug_str+0x45>
  45:	44 6f                	rex.R outsl %ds:(%rsi),(%dx)
  47:	6c                   	insb   (%dx),%es:(%rdi)
  48:	6c                   	insb   (%dx),%es:(%rdi)
  49:	61                   	(bad)  
  4a:	72 00                	jb     4c <.debug_str+0x4c>
  4c:	4c                   	rex.WR
  : m_TextPresenter(new Video::TextModePresenter()),
  4d:	43 74 72             	rex.XB je c2 <.debug_str+0xc2>
  50:	6c                   	insb   (%dx),%es:(%rdi)
  51:	00 43 75             	add    %al,0x75(%rbx)
  54:	72 73                	jb     c9 <.debug_str+0xc9>
  56:	6f                   	outsl  %ds:(%rsi),(%dx)
  57:	72 55                	jb     ae <.debug_str+0xae>
  59:	70 00                	jo     5b <.debug_str+0x5b>
  5b:	57                   	push   %rdi
  5c:	61                   	(bad)  
  5d:	76 65                	jbe    c4 <.debug_str+0xc4>
  5f:	00 4b 65             	add    %cl,0x65(%rbx)
  62:	79 4d                	jns    b1 <.debug_str+0xb1>
  64:	6f                   	outsl  %ds:(%rsi),(%dx)
  65:	64 69 66 69 65 72 73 	imul   $0x41737265,%fs:0x69(%rsi),%esp
  6c:	41 
  6d:	6c                   	insb   (%dx),%es:(%rdi)
  6e:	74 00                	je     70 <.debug_str+0x70>
  70:	4e 75 6d             	rex.WRX jne e0 <.debug_str+0xe0>
  73:	32 00                	xor    (%rax),%al
  75:	6f                   	outsl  %ds:(%rsi),(%dx)
  76:	70 65                	jo     dd <.debug_str+0xdd>
    m_KeyModifiers(0)
  78:	72 61                	jb     db <.debug_str+0xdb>
  7a:	74 6f                	je     eb <.debug_str+0xeb>
  7c:	72 20                	jb     9e <.debug_str+0x9e>
  7e:	6e                   	outsb  %ds:(%rsi),(%dx)
    m_Buffers(new uint8_t[23 * 80]),
  7f:	65 77 20             	gs ja  a2 <.debug_str+0xa2>
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	00 4d 65             	add    %cl,0x65(%rbp)
  87:	64 69 61 53 65 6c 65 	imul   $0x63656c65,%fs:0x53(%rcx),%esp
  8e:	63 
  8f:	74 00                	je     91 <.debug_str+0x91>
  91:	52                   	push   %rdx
  92:	69 67 68 74 42 72 61 	imul   $0x61724274,0x68(%rdi),%esp
  99:	63 65 00             	movsxd 0x0(%rbp),%esp
    m_OffsetX(0),
  9c:	7e 43                	jle    e1 <.debug_str+0xe1>
  9e:	6f                   	outsl  %ds:(%rsi),(%dx)
  9f:	6e                   	outsb  %ds:(%rsi),(%dx)
  a0:	73 6f                	jae    111 <.debug_str+0x111>
  a2:	6c                   	insb   (%dx),%es:(%rdi)
    m_OffsetY(0),
  a3:	65 00 5f 5a          	add    %bl,%gs:0x5a(%rdi)
  a7:	4e 37                	rex.WRX (bad) 
  a9:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
    Refresh();
  ab:	6e                   	outsb  %ds:(%rsi),(%dx)
  ac:	73 6f                	jae    11d <.debug_str+0x11d>
  ae:	6c                   	insb   (%dx),%es:(%rdi)
  af:	65 36 52             	gs ss push %rdx
  b2:	65 6e                	outsb  %gs:(%rsi),(%dx)
  b4:	64 65 72 45          	fs gs jb fd <.debug_str+0xfd>
  b8:	76 00                	jbe    ba <.debug_str+0xba>
  ba:	5f                   	pop    %rdi
  bb:	5f                   	pop    %rdi
  bc:	69 6e 5f 63 68 72 67 	imul   $0x67726863,0x5f(%rsi),%ebp
}
  c3:	00 52 41             	add    %dl,0x41(%rdx)
Console::~Console()
  c6:	6c                   	insb   (%dx),%es:(%rdi)
  c7:	74 00                	je     c9 <.debug_str+0xc9>
  c9:	42 61                	rex.X (bad) 
  cb:	63 6b 74             	movsxd 0x74(%rbx),%ebp
  ce:	69 63 6b 00 6c 6f 6e 	imul   $0x6e6f6c00,0x6b(%rbx),%esp
}
  d5:	67 20 6c 6f 6e       	and    %ch,0x6e(%edi,%ebp,2)
{
  da:	67 20 69 6e          	and    %ch,0x6e(%ecx)
  de:	74 00                	je     e0 <.debug_str+0xe0>
  e0:	73 69                	jae    14b <.debug_str+0x14b>
  e2:	67 6e                	outsb  %ds:(%esi),(%dx)
    RenderModifiers();
  e4:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
  e9:	61                   	(bad)  
  ea:	72 00                	jb     ec <.debug_str+0xec>
  ec:	5f                   	pop    %rdi
  ed:	5a                   	pop    %rdx
  ee:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
  f4:	6f                   	outsl  %ds:(%rsi),(%dx)
  f5:	31 37                	xor    %esi,(%rdi)
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f7:	54                   	push   %rsp
  f8:	65 78 74             	gs js  16f <.debug_str+0x16f>
  fb:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
  fd:	64 65 50             	fs gs push %rax
 100:	72 65                	jb     167 <.debug_str+0x167>
 102:	73 65                	jae    169 <.debug_str+0x169>
 104:	6e                   	outsb  %ds:(%rsi),(%dx)
 105:	74 65                	je     16c <.debug_str+0x16c>
 107:	72 34                	jb     13d <.debug_str+0x13d>
 109:	54                   	push   %rsp
 10a:	65 78 74             	gs js  181 <.debug_str+0x181>
 10d:	45                   	rex.RB
 10e:	4e 53                	rex.WRX push %rbx
 110:	5f                   	pop    %rdi
 111:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
 116:	74 45                	je     15d <.debug_str+0x15d>
 118:	63 68 68             	movsxd 0x68(%rax),%ebp
 11b:	00 50 65             	add    %dl,0x65(%rax)
 11e:	72 69                	jb     189 <.debug_str+0x189>
 120:	6f                   	outsl  %ds:(%rsi),(%dx)
 121:	64 00 4b 65          	add    %cl,%fs:0x65(%rbx)
 125:	79 4d                	jns    174 <.debug_str+0x174>
 127:	6f                   	outsl  %ds:(%rsi),(%dx)
 128:	64 69 66 69 65 72 73 	imul   $0x53737265,%fs:0x69(%rsi),%esp
 12f:	53 
 130:	68 69 66 74 00       	push   $0x746669
 135:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 137:	6d                   	insl   (%dx),%es:(%rdi)
 138:	6d                   	insl   (%dx),%es:(%rdi)
 139:	61                   	(bad)  
 13a:	00 4e 75             	add    %cl,0x75(%rsi)
 13d:	6d                   	insl   (%dx),%es:(%rdi)
 13e:	30 00                	xor    %al,(%rax)
 140:	4e 75 6d             	rex.WRX jne 1b0 <.debug_str+0x1b0>
}
 143:	31 00                	xor    %eax,(%rax)
 145:	50                   	push   %rax
 146:	61                   	(bad)  
 147:	67 65 55             	addr32 gs push %rbp
{
 14a:	70 00                	jo     14c <.debug_str+0x14c>
 14c:	4e 75 6d             	rex.WRX jne 1bc <.debug_str+0x1bc>
 14f:	33 00                	xor    (%rax),%eax
 151:	4e 75 6d             	rex.WRX jne 1c1 <.debug_str+0x1c1>
    m_TextPresenter->Clear();
 154:	34 00                	xor    $0x0,%al
 156:	4e 75 6d             	rex.WRX jne 1c6 <.debug_str+0x1c6>
 159:	35 00 4e 75 6d       	xor    $0x6d754e00,%eax
 15e:	36 00 4e 75          	ss add %cl,0x75(%rsi)
 162:	6d                   	insl   (%dx),%es:(%rdi)
 163:	37                   	(bad)  
 164:	00 4e 75             	add    %cl,0x75(%rsi)
 167:	6d                   	insl   (%dx),%es:(%rdi)
 168:	38 00                	cmp    %al,(%rax)
 16a:	4e 75 6d             	rex.WRX jne 1da <.debug_str+0x1da>
    Render();
 16d:	39 00                	cmp    %eax,(%rax)
 16f:	47 72 65             	rex.RXB jb 1d7 <.debug_str+0x1d7>
 172:	61                   	(bad)  
 173:	74 65                	je     1da <.debug_str+0x1da>
 175:	72 54                	jb     1cb <.debug_str+0x1cb>
 177:	68 61 6e 00 6c       	push   $0x6c006e61
 17c:	6f                   	outsl  %ds:(%rsi),(%dx)
 17d:	6e                   	outsb  %ds:(%rsi),(%dx)
 17e:	67 20 69 6e          	and    %ch,0x6e(%ecx)
}
 182:	74 00                	je     184 <.debug_str+0x184>
{
 184:	45 71 75             	rex.RB jno 1fc <.debug_str+0x1fc>
 187:	61                   	(bad)  
 188:	6c                   	insb   (%dx),%es:(%rdi)
 189:	73 00                	jae    18b <.debug_str+0x18b>
 18b:	57                   	push   %rdi
 18c:	65 62 46             	gs (bad) 
 18f:	61                   	(bad)  
 190:	76 6f                	jbe    201 <.debug_str+0x201>
 192:	72 69                	jb     1fd <.debug_str+0x1fd>
 194:	74 65                	je     1fb <.debug_str+0x1fb>
 196:	73 00                	jae    198 <.debug_str+0x198>
 198:	6f                   	outsl  %ds:(%rsi),(%dx)
    bool caps = m_KeyModifiers & KeyModifiersCapsLock;
 199:	70 65                	jo     200 <.debug_str+0x200>
 19b:	72 61                	jb     1fe <.debug_str+0x1fe>
 19d:	74 6f                	je     20e <.debug_str+0x20e>
 19f:	72 20                	jb     1c1 <.debug_str+0x1c1>
 1a1:	6e                   	outsb  %ds:(%rsi),(%dx)
 1a2:	65 77 00             	gs ja  1a5 <.debug_str+0x1a5>
 1a5:	45 6e                	rex.RB outsb %ds:(%rsi),(%dx)
 1a7:	74 65                	je     20e <.debug_str+0x20e>
 1a9:	72 00                	jb     1ab <.debug_str+0x1ab>
 1ab:	5f                   	pop    %rdi
 1ac:	5a                   	pop    %rdx
 1ad:	4e 37                	rex.WRX (bad) 
    bool shift = m_KeyModifiers & KeyModifiersShift;
 1af:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 1b1:	6e                   	outsb  %ds:(%rsi),(%dx)
 1b2:	73 6f                	jae    223 <.debug_str+0x223>
 1b4:	6c                   	insb   (%dx),%es:(%rdi)
 1b5:	65 39 41 63          	cmp    %eax,%gs:0x63(%rcx)
 1b9:	63 65 70             	movsxd 0x70(%rbp),%esp
 1bc:	74 4b                	je     209 <.debug_str+0x209>
 1be:	65 79 45             	gs jns 206 <.debug_str+0x206>
 1c1:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
    bool ctrl = m_KeyModifiers & KeyModifiersCtrl;
 1c7:	74 33                	je     1fc <.debug_str+0x1fc>
 1c9:	4b                   	rex.WXB
 1ca:	65 79 45             	gs jns 212 <.debug_str+0x212>
 1cd:	62                   	(bad)  
 1ce:	00 50 6f             	add    %dl,0x6f(%rax)
 1d1:	69 6e 74 00 56 6f 6c 	imul   $0x6c6f5600,0x74(%rsi),%ebp
 1d8:	75 6d                	jne    247 <.debug_str+0x247>
 1da:	65 44 6f             	rex.R outsl %gs:(%rsi),(%dx)
    bool alt = m_KeyModifiers & KeyModifiersAlt;
 1dd:	77 6e                	ja     24d <.debug_str+0x24d>
 1df:	00 43 75             	add    %al,0x75(%rbx)
 1e2:	72 73                	jb     257 <.debug_str+0x257>
 1e4:	6f                   	outsl  %ds:(%rsi),(%dx)
 1e5:	72 4c                	jb     233 <.debug_str+0x233>
 1e7:	65 66 74 00          	gs data16 je 1eb <.debug_str+0x1eb>
 1eb:	5f                   	pop    %rdi
 1ec:	5a                   	pop    %rdx
 1ed:	6e                   	outsb  %ds:(%rsi),(%dx)
 1ee:	77 6d                	ja     25d <.debug_str+0x25d>
 1f0:	00 57 65             	add    %dl,0x65(%rdi)
    m_TextPresenter->Text({ 0, 0 }, "CapsLock:   |      |       |     |                                              ", 15, 0);
 1f3:	62 42                	(bad)  
 1f5:	61                   	(bad)  
 1f6:	63 6b 77             	movsxd 0x77(%rbx),%ebp
 1f9:	61                   	(bad)  
 1fa:	72 64                	jb     260 <.debug_str+0x260>
 1fc:	00 47 4e             	add    %al,0x4e(%rdi)
 1ff:	55                   	push   %rbp
 200:	20 43 2b             	and    %al,0x2b(%rbx)
 203:	2b 31                	sub    (%rcx),%esi
 205:	37                   	(bad)  
 206:	20 31                	and    %dh,(%rcx)
 208:	31 2e                	xor    %ebp,(%rsi)
 20a:	32 2e                	xor    (%rsi),%ch
 20c:	30 20                	xor    %ah,(%rax)
 20e:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 213:	6d                   	insl   (%dx),%es:(%rdi)
 214:	6d                   	insl   (%dx),%es:(%rdi)
 215:	78 20                	js     237 <.debug_str+0x237>
 217:	2d 6d 6e 6f 2d       	sub    $0x2d6f6e6d,%eax
 21c:	73 73                	jae    291 <.debug_str+0x291>
 21e:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f7092 <Console::AddChar(char)+0x2d6f69a0>
 225:	73 73                	jae    29a <.debug_str+0x29a>
 227:	65 32 20             	xor    %gs:(%rax),%ah
 22a:	2d 6d 63 6d 6f       	sub    $0x6f6d636d,%eax
    m_TextPresenter->Text({ 9, 0 }, (caps ? " A " : " a "), 0, 15);
 22f:	64 65 6c             	fs gs insb (%dx),%es:(%rdi)
 232:	3d 6c 61 72 67       	cmp    $0x6772616c,%eax
 237:	65 20 2d 6d 6e 6f 2d 	and    %ch,%gs:0x2d6f6e6d(%rip)        # 2d6f70ab <Console::AddChar(char)+0x2d6f69b9>
 23e:	72 65                	jb     2a5 <.debug_str+0x2a5>
 240:	64 2d 7a 6f 6e 65    	fs sub $0x656e6f7a,%eax
 246:	20 2d 6d 74 75 6e    	and    %ch,0x6e75746d(%rip)        # 6e7576b9 <Console::AddChar(char)+0x6e756fc7>
 24c:	65 3d 67 65 6e 65    	gs cmp $0x656e6567,%eax
 252:	72 69                	jb     2bd <.debug_str+0x2bd>
 254:	63 20                	movsxd (%rax),%esp
 256:	2d 6d 61 72 63       	sub    $0x6372616d,%eax
 25b:	68 3d 78 38 36       	push   $0x3638783d
 260:	2d 36 34 20 2d       	sub    $0x2d203436,%eax
 265:	67 20 2d 4f 30 20 2d 	and    %ch,0x2d20304f(%eip)        # 2d2032bb <Console::AddChar(char)+0x2d202bc9>
 26c:	66 66 72 65          	data16 data16 jb 2d5 <.debug_str+0x2d5>
 270:	65 73 74             	gs jae 2e7 <.debug_str+0x2e7>
 273:	61                   	(bad)  
 274:	6e                   	outsb  %ds:(%rsi),(%dx)
 275:	64 69 6e 67 20 2d 66 	imul   $0x69662d20,%fs:0x67(%rsi),%ebp
 27c:	69 
 27d:	6e                   	outsb  %ds:(%rsi),(%dx)
 27e:	6c                   	insb   (%dx),%es:(%rdi)
 27f:	69 6e 65 2d 66 75 6e 	imul   $0x6e75662d,0x65(%rsi),%ebp
    m_TextPresenter->Text({ 13, 0 }, " Ctrl ", ctrl ? 0 : 15, ctrl ? 15 : 0);
 286:	63 74 69 6f          	movsxd 0x6f(%rcx,%rbp,2),%esi
 28a:	6e                   	outsb  %ds:(%rsi),(%dx)
 28b:	73 20                	jae    2ad <.debug_str+0x2ad>
 28d:	2d 66 6e 6f 2d       	sub    $0x2d6f6e66,%eax
 292:	65 78 63             	gs js  2f8 <.debug_str+0x2f8>
 295:	65 70 74             	gs jo  30c <.debug_str+0x30c>
 298:	69 6f 6e 73 20 2d 66 	imul   $0x662d2073,0x6e(%rdi),%ebp
 29f:	6e                   	outsb  %ds:(%rsi),(%dx)
 2a0:	6f                   	outsl  %ds:(%rsi),(%dx)
 2a1:	2d 72 74 74 69       	sub    $0x69747472,%eax
 2a6:	20 2d 66 6e 6f 2d    	and    %ch,0x2d6f6e66(%rip)        # 2d6f7112 <Console::AddChar(char)+0x2d6f6a20>
 2ac:	70 69                	jo     317 <.debug_str+0x317>
 2ae:	63 00                	movsxd (%rax),%eax
 2b0:	74 68                	je     31a <.debug_str+0x31a>
 2b2:	69 73 00 73 68 69 66 	imul   $0x66696873,0x0(%rbx),%esi
 2b9:	74 00                	je     2bb <.debug_str+0x2bb>
 2bb:	52                   	push   %rdx
 2bc:	65 66 72 65          	gs data16 jb 325 <.debug_str+0x325>
 2c0:	73 68                	jae    32a <.debug_str+0x32a>
 2c2:	00 52 65             	add    %dl,0x65(%rdx)
 2c5:	6e                   	outsb  %ds:(%rsi),(%dx)
 2c6:	64 65 72 4d          	fs gs jb 317 <.debug_str+0x317>
 2ca:	6f                   	outsl  %ds:(%rsi),(%dx)
 2cb:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 2d2:	00 
 2d3:	55                   	push   %rbp
 2d4:	6e                   	outsb  %ds:(%rsi),(%dx)
 2d5:	64 65 72 6c          	fs gs jb 345 <.debug_str+0x345>
 2d9:	69 6e 65 00 41 70 70 	imul   $0x70704100,0x65(%rsi),%ebp
 2e0:	6c                   	insb   (%dx),%es:(%rdi)
 2e1:	79 4d                	jns    330 <.debug_str+0x330>
 2e3:	6f                   	outsl  %ds:(%rsi),(%dx)
 2e4:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 2eb:	00 
    m_TextPresenter->Text({ 20, 0 }, " Shift ", shift ? 0 : 15, shift ? 15 : 0);
 2ec:	43 61                	rex.XB (bad) 
 2ee:	70 73                	jo     363 <.debug_str+0x363>
 2f0:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 2f2:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 2f5:	53                   	push   %rbx
 2f6:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 2f9:	6c                   	insb   (%dx),%es:(%rdi)
 2fa:	6c                   	insb   (%dx),%es:(%rdi)
 2fb:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 2fd:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 300:	6d                   	insl   (%dx),%es:(%rdi)
 301:	5f                   	pop    %rdi
 302:	4b                   	rex.WXB
 303:	65 79 4d             	gs jns 353 <.debug_str+0x353>
 306:	6f                   	outsl  %ds:(%rsi),(%dx)
 307:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 30e:	00 
 30f:	4e 75 6d             	rex.WRX jne 37f <.debug_str+0x37f>
 312:	70 61                	jo     375 <.debug_str+0x375>
 314:	64 4d 75 6c          	fs rex.WRB jne 384 <.debug_str+0x384>
 318:	74 69                	je     383 <.debug_str+0x383>
 31a:	70 6c                	jo     388 <.debug_str+0x388>
 31c:	79 00                	jns    31e <.debug_str+0x31e>
 31e:	63 74 72 6c          	movsxd 0x6c(%rdx,%rsi,2),%esi
 322:	00 57 61             	add    %dl,0x61(%rdi)
 325:	6b 65 00 45          	imul   $0x45,0x0(%rbp),%esp
 329:	6d                   	insl   (%dx),%es:(%rdi)
 32a:	61                   	(bad)  
 32b:	69 6c 00 4d 75 74 65 	imul   $0x657475,0x4d(%rax,%rax,1),%ebp
 332:	00 
 333:	4b                   	rex.WXB
 334:	65 79 4d             	gs jns 384 <.debug_str+0x384>
 337:	6f                   	outsl  %ds:(%rsi),(%dx)
 338:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 33f:	43 
 340:	74 72                	je     3b4 <.debug_str+0x3b4>
 342:	6c                   	insb   (%dx),%es:(%rdi)
 343:	00 5f 5a             	add    %bl,0x5a(%rdi)
 346:	4e 37                	rex.WRX (bad) 
 348:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 34a:	6e                   	outsb  %ds:(%rsi),(%dx)
 34b:	73 6f                	jae    3bc <.debug_str+0x3bc>
    m_TextPresenter->Text({ 28, 0 }, " Alt ", alt ? 0 : 15, alt ? 15 : 0);
 34d:	6c                   	insb   (%dx),%es:(%rdi)
 34e:	65 44 34 45          	gs rex.R xor $0x45,%al
 352:	76 00                	jbe    354 <.debug_str+0x354>
 354:	42 61                	rex.X (bad) 
 356:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 359:	6c                   	insb   (%dx),%es:(%rdi)
 35a:	61                   	(bad)  
 35b:	73 68                	jae    3c5 <.debug_str+0x3c5>
 35d:	00 52 69             	add    %dl,0x69(%rdx)
 360:	67 68 74 42 72 61    	addr32 push $0x61724274
 366:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 369:	74 00                	je     36b <.debug_str+0x36b>
 36b:	75 6e                	jne    3db <.debug_str+0x3db>
 36d:	73 69                	jae    3d8 <.debug_str+0x3d8>
 36f:	67 6e                	outsb  %ds:(%esi),(%dx)
 371:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 376:	74 00                	je     378 <.debug_str+0x378>
 378:	52                   	push   %rdx
 379:	53                   	push   %rbx
 37a:	68 69 66 74 00       	push   $0x746669
 37f:	5f                   	pop    %rdi
 380:	5a                   	pop    %rdx
 381:	6e                   	outsb  %ds:(%rsi),(%dx)
 382:	61                   	(bad)  
 383:	6d                   	insl   (%dx),%es:(%rdi)
 384:	00 5f 5a             	add    %bl,0x5a(%rdi)
 387:	4e 37                	rex.WRX (bad) 
 389:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 38b:	6e                   	outsb  %ds:(%rsi),(%dx)
 38c:	73 6f                	jae    3fd <.debug_str+0x3fd>
 38e:	6c                   	insb   (%dx),%es:(%rdi)
 38f:	65 37                	gs (bad) 
 391:	52                   	push   %rdx
 392:	65 66 72 65          	gs data16 jb 3fb <.debug_str+0x3fb>
 396:	73 68                	jae    400 <.debug_str+0x400>
 398:	45 76 00             	rex.RB jbe 39b <.debug_str+0x39b>
 39b:	6c                   	insb   (%dx),%es:(%rdi)
 39c:	6f                   	outsl  %ds:(%rsi),(%dx)
 39d:	6e                   	outsb  %ds:(%rsi),(%dx)
 39e:	67 20 75 6e          	and    %dh,0x6e(%ebp)
 3a2:	73 69                	jae    40d <.debug_str+0x40d>
 3a4:	67 6e                	outsb  %ds:(%esi),(%dx)
 3a6:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 3ab:	74 00                	je     3ad <.debug_str+0x3ad>
 3ad:	41 63 63 65          	movsxd 0x65(%r11),%esp
    m_TextPresenter->Text({ 0, 1 }, "--------------------------------------------------------------------------------", 15, 0);
 3b1:	70 74                	jo     427 <.debug_str+0x427>
 3b3:	4b                   	rex.WXB
 3b4:	65 79 00             	gs jns 3b7 <.debug_str+0x3b7>
 3b7:	50                   	push   %rax
 3b8:	61                   	(bad)  
 3b9:	67 65 44 6f          	rex.R outsl %gs:(%esi),(%dx)
 3bd:	77 6e                	ja     42d <.debug_str+0x42d>
 3bf:	00 41 72             	add    %al,0x72(%rcx)
 3c2:	72 6f                	jb     433 <.debug_str+0x433>
 3c4:	77 44                	ja     40a <.debug_str+0x40a>
 3c6:	6f                   	outsl  %ds:(%rsi),(%dx)
 3c7:	77 6e                	ja     437 <.debug_str+0x437>
 3c9:	00 56 69             	add    %dl,0x69(%rsi)
 3cc:	64 65 6f             	fs outsl %gs:(%rsi),(%dx)
 3cf:	00 4d 6f             	add    %cl,0x6f(%rbp)
 3d2:	76 65                	jbe    439 <.debug_str+0x439>
 3d4:	55                   	push   %rbp
 3d5:	70 00                	jo     3d7 <.debug_str+0x3d7>
 3d7:	73 68                	jae    441 <.debug_str+0x441>
 3d9:	6f                   	outsl  %ds:(%rsi),(%dx)
 3da:	72 74                	jb     450 <.debug_str+0x450>
 3dc:	20 75 6e             	and    %dh,0x6e(%rbp)
 3df:	73 69                	jae    44a <.debug_str+0x44a>
 3e1:	67 6e                	outsb  %ds:(%esi),(%dx)
 3e3:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
 3e8:	74 00                	je     3ea <.debug_str+0x3ea>
 3ea:	4e 75 6d             	rex.WRX jne 45a <.debug_str+0x45a>
 3ed:	70 61                	jo     450 <.debug_str+0x450>
 3ef:	64 41                	fs rex.B
 3f1:	64 64 00 49 6e       	fs add %cl,%fs:0x6e(%rcx)
 3f6:	73 65                	jae    45d <.debug_str+0x45d>
 3f8:	72 74                	jb     46e <.debug_str+0x46e>
 3fa:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
 3fe:	74 4d                	je     44d <.debug_str+0x44d>
 400:	6f                   	outsl  %ds:(%rsi),(%dx)
}
 401:	64 65 50             	fs gs push %rax
 404:	72 65                	jb     46b <.debug_str+0x46b>
 406:	73 65                	jae    46d <.debug_str+0x46d>
 408:	6e                   	outsb  %ds:(%rsi),(%dx)
 409:	74 65                	je     470 <.debug_str+0x470>
 40b:	72 00                	jb     40d <.debug_str+0x40d>
 40d:	4e 75 6d             	rex.WRX jne 47d <.debug_str+0x47d>
 410:	70 61                	jo     473 <.debug_str+0x473>
{
 412:	64 4d 69 6e 75 73 00 	imul   $0x65570073,%fs:0x75(%r14),%r13
 419:	57 65 
 41b:	62 53 74 6f 70       	(bad)
 420:	00 50 72             	add    %dl,0x72(%rax)
 423:	65 76 69             	gs jbe 48f <.debug_str+0x48f>
 426:	6f                   	outsl  %ds:(%rsi),(%dx)
    switch (key)
 427:	75 73                	jne    49c <.debug_str+0x49c>
 429:	54                   	push   %rsp
 42a:	72 61                	jb     48d <.debug_str+0x48d>
 42c:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 42f:	5f                   	pop    %rdi
 430:	5a                   	pop    %rdx
 431:	4e 37                	rex.WRX (bad) 
 433:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 435:	6e                   	outsb  %ds:(%rsi),(%dx)
 436:	73 6f                	jae    4a7 <.debug_str+0x4a7>
 438:	6c                   	insb   (%dx),%es:(%rdi)
 439:	65 43 34 45          	gs rex.XB xor $0x45,%al
 43d:	76 00                	jbe    43f <.debug_str+0x43f>
 43f:	4e                   	rex.WRX
 440:	65 78 74             	gs js  4b7 <.debug_str+0x4b7>
 443:	54                   	push   %rsp
 444:	72 61                	jb     4a7 <.debug_str+0x4a7>
 446:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 449:	62                   	(bad)  
 44a:	6f                   	outsl  %ds:(%rsi),(%dx)
 44b:	6f                   	outsl  %ds:(%rsi),(%dx)
 44c:	6c                   	insb   (%dx),%es:(%rdi)
 44d:	00 4e 75             	add    %cl,0x75(%rsi)
 450:	6d                   	insl   (%dx),%es:(%rdi)
 451:	70 61                	jo     4b4 <.debug_str+0x4b4>
        if (isPressed)
 453:	64 45 6e             	rex.RB outsb %fs:(%rsi),(%dx)
 456:	74 65                	je     4bd <.debug_str+0x4bd>
            if (m_KeyModifiers & KeyModifiersCapsLock)
 458:	72 00                	jb     45a <.debug_str+0x45a>
 45a:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 45c:	6e                   	outsb  %ds:(%rsi),(%dx)
 45d:	73 6f                	jae    4ce <.debug_str+0x4ce>
 45f:	6c                   	insb   (%dx),%es:(%rdi)
 460:	65 00 56 6f          	add    %dl,%gs:0x6f(%rsi)
 464:	6c                   	insb   (%dx),%es:(%rdi)
 465:	75 6d                	jne    4d4 <.debug_str+0x4d4>
 467:	65 55                	gs push %rbp
 469:	70 00                	jo     46b <.debug_str+0x46b>
                m_KeyModifiers &= ~(KeyModifiersCapsLock);
 46b:	64 65 63 6c 74 79    	fs movsxd %gs:0x79(%rsp,%rsi,2),%ebp
 471:	70 65                	jo     4d8 <.debug_str+0x4d8>
 473:	28 6e 75             	sub    %ch,0x75(%rsi)
 476:	6c                   	insb   (%dx),%es:(%rdi)
 477:	6c                   	insb   (%dx),%es:(%rdi)
 478:	70 74                	jo     4ee <.debug_str+0x4ee>
 47a:	72 29                	jb     4a5 <.debug_str+0x4a5>
 47c:	00 4d 65             	add    %cl,0x65(%rbp)
 47f:	64 69 61 50 6c 61 79 	imul   $0x79616c,%fs:0x50(%rcx),%esp
 486:	00 
                m_KeyModifiers |= KeyModifiersCapsLock;
 487:	6d                   	insl   (%dx),%es:(%rdi)
 488:	5f                   	pop    %rdi
 489:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 48b:	69 74 00 4e 6f 6e 65 	imul   $0x656e6f,0x4e(%rax,%rax,1),%esi
 492:	00 
 493:	67 5f                	addr32 pop %rdi
        RenderModifiers();
 495:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 497:	6e                   	outsb  %ds:(%rsi),(%dx)
 498:	73 6f                	jae    509 <.debug_str+0x509>
 49a:	6c                   	insb   (%dx),%es:(%rdi)
 49b:	65 00 57 65          	add    %dl,%gs:0x65(%rdi)
 49f:	62 53 65 61 72       	(bad)
 4a4:	63 68 00             	movsxd 0x0(%rax),%ebp
        break;
 4a7:	50                   	push   %rax
 4a8:	6f                   	outsl  %ds:(%rsi),(%dx)
 4a9:	77 65                	ja     510 <.debug_str+0x510>
 4ab:	72 00                	jb     4ad <.debug_str+0x4ad>
        if (isPressed)
 4ad:	4d                   	rex.WRB
 4ae:	65 64 69 61 53 74 6f 	gs imul $0x706f74,%fs:0x53(%rcx),%esp
 4b5:	70 00 
            m_KeyModifiers |= KeyModifiersShift;
 4b7:	6c                   	insb   (%dx),%es:(%rdi)
 4b8:	6f                   	outsl  %ds:(%rsi),(%dx)
 4b9:	6e                   	outsb  %ds:(%rsi),(%dx)
 4ba:	67 20 64 6f 75       	and    %ah,0x75(%edi,%ebp,2)
 4bf:	62                   	(bad)  
 4c0:	6c                   	insb   (%dx),%es:(%rdi)
 4c1:	65 00 63 6f          	add    %ah,%gs:0x6f(%rbx)
 4c5:	6e                   	outsb  %ds:(%rsi),(%dx)
 4c6:	73 6f                	jae    537 <.debug_str+0x537>
            m_KeyModifiers &= ~(KeyModifiersShift);
 4c8:	6c                   	insb   (%dx),%es:(%rdi)
 4c9:	65 00 53 6c          	add    %dl,%gs:0x6c(%rbx)
 4cd:	61                   	(bad)  
 4ce:	73 68                	jae    538 <.debug_str+0x538>
 4d0:	00 44 65 6c          	add    %al,0x6c(%rbp,%riz,2)
 4d4:	65 74 65             	gs je  53c <.debug_str+0x53c>
 4d7:	00 43 75             	add    %al,0x75(%rbx)
 4da:	72 73                	jb     54f <.debug_str+0x54f>
        RenderModifiers();
 4dc:	6f                   	outsl  %ds:(%rsi),(%dx)
 4dd:	72 52                	jb     531 <.debug_str+0x531>
 4df:	69 67 68 74 00 43 75 	imul   $0x75430074,0x68(%rdi),%esp
 4e6:	72 73                	jb     55b <.debug_str+0x55b>
 4e8:	6f                   	outsl  %ds:(%rsi),(%dx)
 4e9:	72 44                	jb     52f <.debug_str+0x52f>
 4eb:	6f                   	outsl  %ds:(%rsi),(%dx)
 4ec:	77 6e                	ja     55c <.debug_str+0x55c>
 4ee:	00 4c 65 66          	add    %cl,0x66(%rbp,%riz,2)
        break;
 4f2:	74 4d                	je     541 <.debug_str+0x541>
        if (isPressed)
 4f4:	65 6e                	outsb  %gs:(%rsi),(%dx)
 4f6:	75 00                	jne    4f8 <.debug_str+0x4f8>
 4f8:	4c                   	rex.WR
 4f9:	65 66 74 42          	gs data16 je 53f <.debug_str+0x53f>
            m_KeyModifiers |= KeyModifiersCtrl;
 4fd:	72 61                	jb     560 <.debug_str+0x560>
 4ff:	63 65 00             	movsxd 0x0(%rbp),%esp
 502:	41 72 72             	rex.B jb 577 <.debug_str+0x577>
 505:	6f                   	outsl  %ds:(%rsi),(%dx)
 506:	77 55                	ja     55d <.debug_str+0x55d>
 508:	70 00                	jo     50a <.debug_str+0x50a>
 50a:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 50c:	70 75                	jo     583 <.debug_str+0x583>
 50e:	74 00                	je     510 <.debug_str+0x510>
            m_KeyModifiers &= ~(KeyModifiersCtrl);
 510:	75 6e                	jne    580 <.debug_str+0x580>
 512:	73 69                	jae    57d <.debug_str+0x57d>
 514:	67 6e                	outsb  %ds:(%esi),(%dx)
 516:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
 51b:	61                   	(bad)  
 51c:	72 00                	jb     51e <.debug_str+0x51e>
 51e:	53                   	push   %rbx
 51f:	65 6d                	gs insl (%dx),%es:(%rdi)
 521:	69 63 6f 6c 6f 6e 00 	imul   $0x6e6f6c,0x6f(%rbx),%esp
        RenderModifiers();
 528:	52                   	push   %rdx
 529:	69 67 68 74 4d 65 6e 	imul   $0x6e654d74,0x68(%rdi),%esp
 530:	75 00                	jne    532 <.debug_str+0x532>
 532:	73 68                	jae    59c <.debug_str+0x59c>
 534:	6f                   	outsl  %ds:(%rsi),(%dx)
 535:	72 74                	jb     5ab <.debug_str+0x5ab>
        break;
 537:	20 69 6e             	and    %ch,0x6e(%rcx)
 53a:	74 00                	je     53c <.debug_str+0x53c>
        if (isPressed)
 53c:	5f                   	pop    %rdi
 53d:	5a                   	pop    %rdx
 53e:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
            m_KeyModifiers |= KeyModifiersAlt;
 544:	6f                   	outsl  %ds:(%rsi),(%dx)
 545:	31 37                	xor    %esi,(%rdi)
 547:	54                   	push   %rsp
 548:	65 78 74             	gs js  5bf <.debug_str+0x5bf>
 54b:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 54d:	64 65 50             	fs gs push %rax
 550:	72 65                	jb     5b7 <.debug_str+0x5b7>
 552:	73 65                	jae    5b9 <.debug_str+0x5b9>
 554:	6e                   	outsb  %ds:(%rsi),(%dx)
 555:	74 65                	je     5bc <.debug_str+0x5bc>
 557:	72 34                	jb     58d <.debug_str+0x58d>
            m_KeyModifiers &= ~(KeyModifiersAlt);
 559:	54                   	push   %rsp
 55a:	65 78 74             	gs js  5d1 <.debug_str+0x5d1>
 55d:	45                   	rex.RB
 55e:	4e 53                	rex.WRX push %rbx
 560:	5f                   	pop    %rdi
 561:	35 50 6f 69 6e       	xor    $0x6e696f50,%eax
 566:	74 45                	je     5ad <.debug_str+0x5ad>
 568:	50                   	push   %rax
 569:	4b 63 68 68          	rex.WXB movslq 0x68(%r8),%rbp
        RenderModifiers();
 56d:	00 5f 5a             	add    %bl,0x5a(%rdi)
 570:	4e 37                	rex.WRX (bad) 
 572:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 574:	6e                   	outsb  %ds:(%rsi),(%dx)
 575:	73 6f                	jae    5e6 <.debug_str+0x5e6>
 577:	6c                   	insb   (%dx),%es:(%rdi)
 578:	65 44 32 45 76       	xor    %gs:0x76(%rbp),%r8b
 57d:	00 6d 5f             	add    %ch,0x5f(%rbp)
        break;
 580:	4c 69 6e 65 4c 65 6e 	imul   $0x676e654c,0x65(%rsi),%r13
 587:	67 
        m_TextPresenter->Clear();
 588:	74 68                	je     5f2 <.debug_str+0x5f2>
 58a:	00 41 64             	add    %al,0x64(%rcx)
 58d:	64 43 68 61 72 00 43 	fs rex.XB push $0x43007261
 594:	6f                   	outsl  %ds:(%rsi),(%dx)
 595:	6c                   	insb   (%dx),%es:(%rdi)
 596:	6f                   	outsl  %ds:(%rsi),(%dx)
 597:	6e                   	outsb  %ds:(%rsi),(%dx)
 598:	00 4c 65 73          	add    %cl,0x73(%rbp,%riz,2)
 59c:	73 54                	jae    5f2 <.debug_str+0x5f2>
        RenderModifiers();
 59e:	68 61 6e 00 5f       	push   $0x5f006e61
 5a3:	5a                   	pop    %rdx
 5a4:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 5aa:	6f                   	outsl  %ds:(%rsi),(%dx)
 5ab:	31 37                	xor    %esi,(%rdi)
 5ad:	54                   	push   %rsp
 5ae:	65 78 74             	gs js  625 <.debug_str+0x625>
        break;
 5b1:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 5b3:	64 65 50             	fs gs push %rax
        if (!isPressed) break;
 5b6:	72 65                	jb     61d <.debug_str+0x61d>
 5b8:	73 65                	jae    61f <.debug_str+0x61f>
 5ba:	6e                   	outsb  %ds:(%rsi),(%dx)
 5bb:	74 65                	je     622 <.debug_str+0x622>
 5bd:	72 43                	jb     602 <.debug_str+0x602>
 5bf:	34 45                	xor    $0x45,%al
 5c1:	76 00                	jbe    5c3 <.debug_str+0x5c3>
 5c3:	5f                   	pop    %rdi
        m_LineLength = 0;
 5c4:	5a                   	pop    %rdx
 5c5:	4e 35 56 69 64 65    	rex.WRX xor $0x65646956,%rax
 5cb:	6f                   	outsl  %ds:(%rsi),(%dx)
        m_OffsetX = 1;
 5cc:	31 37                	xor    %esi,(%rdi)
 5ce:	54                   	push   %rsp
 5cf:	65 78 74             	gs js  646 <.debug_str+0x646>
 5d2:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
        if (m_OffsetY >= 22)
 5d4:	64 65 50             	fs gs push %rax
 5d7:	72 65                	jb     63e <.debug_str+0x63e>
 5d9:	73 65                	jae    640 <.debug_str+0x640>
 5db:	6e                   	outsb  %ds:(%rsi),(%dx)
 5dc:	74 65                	je     643 <.debug_str+0x643>
 5de:	72 43                	jb     623 <.debug_str+0x623>
            m_TextPresenter->MoveUp();
 5e0:	31 45 76             	xor    %eax,0x76(%rbp)
 5e3:	00 43 6f             	add    %al,0x6f(%rbx)
 5e6:	6e                   	outsb  %ds:(%rsi),(%dx)
 5e7:	73 6f                	jae    658 <.debug_str+0x658>
 5e9:	6c                   	insb   (%dx),%es:(%rdi)
 5ea:	65 4b                	gs rex.WXB
 5ec:	65 79 45             	gs jns 634 <.debug_str+0x634>
 5ef:	76 65                	jbe    656 <.debug_str+0x656>
 5f1:	6e                   	outsb  %ds:(%rsi),(%dx)
 5f2:	74 48                	je     63c <.debug_str+0x63c>
 5f4:	61                   	(bad)  
 5f5:	6e                   	outsb  %ds:(%rsi),(%dx)
            RenderModifiers();
 5f6:	64 6c                	fs insb (%dx),%es:(%rdi)
 5f8:	65 72 00             	gs jb  5fb <.debug_str+0x5fb>
 5fb:	50                   	push   %rax
 5fc:	61                   	(bad)  
 5fd:	67 65 53             	addr32 gs push %rbx
 600:	63 72 6f             	movsxd 0x6f(%rdx),%esi
 603:	6c                   	insb   (%dx),%es:(%rdi)
 604:	6c                   	insb   (%dx),%es:(%rdi)
 605:	00 57 65             	add    %dl,0x65(%rdi)
 608:	62 46 6f 72 77       	(bad)
        } else m_OffsetY++;
 60d:	61                   	(bad)  
 60e:	72 64                	jb     674 <.debug_str+0x674>
 610:	00 4b 65             	add    %cl,0x65(%rbx)
 613:	79 4d                	jns    662 <.debug_str+0x662>
 615:	6f                   	outsl  %ds:(%rsi),(%dx)
 616:	64 69 66 69 65 72 73 	imul   $0x43737265,%fs:0x69(%rsi),%esp
 61d:	43 
        m_TextPresenter->Text({ 0, m_OffsetY + 2 }, '>', 15, 0);
 61e:	61                   	(bad)  
 61f:	70 73                	jo     694 <.debug_str+0x694>
 621:	4c 6f                	rex.WR outsl %ds:(%rsi),(%dx)
 623:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 626:	52                   	push   %rdx
 627:	65 6e                	outsb  %gs:(%rsi),(%dx)
 629:	64 65 72 00          	fs gs jb 62d <.debug_str+0x62d>
 62d:	63 68 61             	movsxd 0x61(%rax),%ebp
 630:	72 00                	jb     632 <.debug_str+0x632>
 632:	42 61                	rex.X (bad) 
 634:	63 6b 73             	movsxd 0x73(%rbx),%ebp
 637:	70 61                	jo     69a <.debug_str+0x69a>
 639:	63 65 00             	movsxd 0x0(%rbp),%esp
 63c:	5f                   	pop    %rdi
 63d:	5a                   	pop    %rdx
 63e:	4e 35 49 6e 70 75    	rex.WRX xor $0x75706e49,%rax
 644:	74 31                	je     677 <.debug_str+0x677>
 646:	34 41                	xor    $0x41,%al
 648:	70 70                	jo     6ba <.debug_str+0x6ba>
 64a:	6c                   	insb   (%dx),%es:(%rdi)
 64b:	79 4d                	jns    69a <.debug_str+0x69a>
 64d:	6f                   	outsl  %ds:(%rsi),(%dx)
 64e:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 655:	45 
 656:	4e 53                	rex.WRX push %rbx
 658:	5f                   	pop    %rdi
 659:	33 4b 65             	xor    0x65(%rbx),%ecx
 65c:	79 45                	jns    6a3 <.debug_str+0x6a3>
 65e:	68 00 43 61 72       	push   $0x72614300
 663:	65 74 00             	gs je  666 <.debug_str+0x666>
 666:	4e 75 6d             	rex.WRX jne 6d6 <.debug_str+0x6d6>
 669:	62 65                	(bad)  
 66b:	72 4c                	jb     6b9 <.debug_str+0x6b9>
 66d:	6f                   	outsl  %ds:(%rsi),(%dx)
 66e:	63 6b 00             	movsxd 0x0(%rbx),%ebp
 671:	5f                   	pop    %rdi
        break;
 672:	5a                   	pop    %rdx
 673:	4e 37                	rex.WRX (bad) 
        AddChar(' '); break;
 675:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 677:	6e                   	outsb  %ds:(%rsi),(%dx)
 678:	73 6f                	jae    6e9 <.debug_str+0x6e9>
 67a:	6c                   	insb   (%dx),%es:(%rdi)
 67b:	65 43 32 45 76       	rex.XB xor %gs:0x76(%r13),%al
 680:	00 4c 41 6c          	add    %cl,0x6c(%rcx,%rax,2)
 684:	74 00                	je     686 <.debug_str+0x686>
 686:	57                   	push   %rdi
 687:	65 62 52 65 66 72    	(bad)
 68d:	65 73 68             	gs jae 6f8 <.debug_str+0x6f8>
        char code = ApplyModifiers(key, m_KeyModifiers);
 690:	00 6d 5f             	add    %ch,0x5f(%rbp)
 693:	54                   	push   %rsp
 694:	65 78 74             	gs js  70b <.debug_str+0x70b>
 697:	50                   	push   %rax
 698:	72 65                	jb     6ff <.debug_str+0x6ff>
 69a:	73 65                	jae    701 <.debug_str+0x701>
 69c:	6e                   	outsb  %ds:(%rsi),(%dx)
 69d:	74 65                	je     704 <.debug_str+0x704>
 69f:	72 00                	jb     6a1 <.debug_str+0x6a1>
 6a1:	57                   	push   %rdi
 6a2:	65 62                	gs (bad) 
 6a4:	48 6f                	rex.W outsl %ds:(%rsi),(%dx)
 6a6:	6d                   	insl   (%dx),%es:(%rdi)
 6a7:	65 00 4e 75          	add    %cl,%gs:0x75(%rsi)
 6ab:	6d                   	insl   (%dx),%es:(%rdi)
 6ac:	70 61                	jo     70f <.debug_str+0x70f>
 6ae:	64 30 00             	xor    %al,%fs:(%rax)
        if (!code || !isPressed || m_LineLength == 255) break;
 6b1:	4e 75 6d             	rex.WRX jne 721 <.debug_str+0x721>
 6b4:	70 61                	jo     717 <.debug_str+0x717>
 6b6:	64 31 00             	xor    %eax,%fs:(%rax)
 6b9:	4e 75 6d             	rex.WRX jne 729 <.debug_str+0x729>
 6bc:	70 61                	jo     71f <.debug_str+0x71f>
 6be:	64 32 00             	xor    %fs:(%rax),%al
 6c1:	4e 75 6d             	rex.WRX jne 731 <.debug_str+0x731>
 6c4:	70 61                	jo     727 <.debug_str+0x727>
 6c6:	64 33 00             	xor    %fs:(%rax),%eax
 6c9:	4e 75 6d             	rex.WRX jne 739 <.debug_str+0x739>
        AddChar(code);
 6cc:	70 61                	jo     72f <.debug_str+0x72f>
 6ce:	64 34 00             	fs xor $0x0,%al
 6d1:	4e 75 6d             	rex.WRX jne 741 <.debug_str+0x741>
 6d4:	70 61                	jo     737 <.debug_str+0x737>
 6d6:	64 35 00 4e 75 6d    	fs xor $0x6d754e00,%eax
 6dc:	70 61                	jo     73f <.debug_str+0x73f>
 6de:	64 36 00 4e 75       	fs add %cl,%fs:0x75(%rsi)
 6e3:	6d                   	insl   (%dx),%es:(%rdi)
 6e4:	70 61                	jo     747 <.debug_str+0x747>
        break;
 6e6:	64 37                	fs (bad) 
        break;
 6e8:	00 4e 75             	add    %cl,0x75(%rsi)
}
 6eb:	6d                   	insl   (%dx),%es:(%rdi)
 6ec:	70 61                	jo     74f <.debug_str+0x74f>
 6ee:	64 38 00             	cmp    %al,%fs:(%rax)
 6f1:	4e 75 6d             	rex.WRX jne 761 <.debug_str+0x761>
{
 6f4:	70 61                	jo     757 <.debug_str+0x757>
 6f6:	64 39 00             	cmp    %eax,%fs:(%rax)
 6f9:	50                   	push   %rax
 6fa:	65 72 63             	gs jb  760 <.debug_str+0x760>
 6fd:	65 6e                	outsb  %gs:(%rsi),(%dx)
 6ff:	74 61                	je     762 <.debug_str+0x762>
 701:	67 65 00 4c 65 66    	add    %cl,%gs:0x66(%ebp,%eiz,2)
    m_TextPresenter->Text({ m_OffsetX, 2 + m_OffsetY }, c, 15, 0);
 707:	74 42                	je     74b <.debug_str+0x74b>
 709:	72 61                	jb     76c <.debug_str+0x76c>
 70b:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 70e:	74 00                	je     710 <.debug_str+0x710>
 710:	52                   	push   %rdx
 711:	43 74 72             	rex.XB je 786 <.debug_str+0x786>
 714:	6c                   	insb   (%dx),%es:(%rdi)
 715:	00 45 78             	add    %al,0x78(%rbp)
 718:	63 6c 61 6d          	movsxd 0x6d(%rcx,%riz,2),%ebp
 71c:	61                   	(bad)  
 71d:	74 69                	je     788 <.debug_str+0x788>
 71f:	6f                   	outsl  %ds:(%rsi),(%dx)
 720:	6e                   	outsb  %ds:(%rsi),(%dx)
 721:	00 63 6f             	add    %ah,0x6f(%rbx)
 724:	64 65 00 51 75       	fs add %dl,%gs:0x75(%rcx)
 729:	6f                   	outsl  %ds:(%rsi),(%dx)
 72a:	74 65                	je     791 <.debug_str+0x791>
 72c:	00 43 6f             	add    %al,0x6f(%rbx)
 72f:	6d                   	insl   (%dx),%es:(%rdi)
 730:	70 75                	jo     7a7 <.debug_str+0x7a7>
 732:	74 65                	je     799 <.debug_str+0x799>
 734:	72 00                	jb     736 <.debug_str+0x736>
 736:	5f                   	pop    %rdi
 737:	5a                   	pop    %rdx
 738:	4e 37                	rex.WRX (bad) 
 73a:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 73c:	6e                   	outsb  %ds:(%rsi),(%dx)
 73d:	73 6f                	jae    7ae <.debug_str+0x7ae>
 73f:	6c                   	insb   (%dx),%es:(%rdi)
 740:	65 31 35 52 65 6e 64 	xor    %esi,%gs:0x646e6552(%rip)        # 646e6c99 <Console::AddChar(char)+0x646e65a7>
 747:	65 72 4d             	gs jb  797 <.debug_str+0x797>
 74a:	6f                   	outsl  %ds:(%rsi),(%dx)
 74b:	64 69 66 69 65 72 73 	imul   $0x45737265,%fs:0x69(%rsi),%esp
 752:	45 
 753:	76 00                	jbe    755 <.debug_str+0x755>
 755:	41 72 72             	rex.B jb 7ca <.debug_str+0x7ca>
 758:	6f                   	outsl  %ds:(%rsi),(%dx)
 759:	77 52                	ja     7ad <.debug_str+0x7ad>
 75b:	69 67 68 74 00 75 69 	imul   $0x69750074,0x68(%rdi),%esp
    m_LineLength++;
 762:	6e                   	outsb  %ds:(%rsi),(%dx)
 763:	74 38                	je     79d <.debug_str+0x79d>
 765:	5f                   	pop    %rdi
 766:	74 00                	je     768 <.debug_str+0x768>
 768:	4d 75 6c             	rex.WRB jne 7d7 <.debug_str+0x7d7>
 76b:	74 69                	je     7d6 <.debug_str+0x7d6>
 76d:	70 6c                	jo     7db <.debug_str+0x7db>
 76f:	79 00                	jns    771 <.debug_str+0x771>
    if (++m_OffsetX >= 80)
 771:	4e 75 6d             	rex.WRX jne 7e1 <.debug_str+0x7e1>
 774:	70 61                	jo     7d7 <.debug_str+0x7d7>
 776:	64 53                	fs push %rbx
 778:	6c                   	insb   (%dx),%es:(%rdi)
 779:	61                   	(bad)  
 77a:	73 68                	jae    7e4 <.debug_str+0x7e4>
 77c:	00 50 61             	add    %dl,0x61(%rax)
 77f:	75 73                	jne    7f4 <.debug_str+0x7f4>
 781:	65 42 72 65          	gs rex.X jb 7ea <.debug_str+0x7ea>
 785:	61                   	(bad)  
 786:	6b 00 45             	imul   $0x45,(%rax),%eax
 789:	73 63                	jae    7ee <.debug_str+0x7ee>
 78b:	61                   	(bad)  
 78c:	70 65                	jo     7f3 <.debug_str+0x7f3>
 78e:	00 6d 5f             	add    %ch,0x5f(%rbp)
 791:	42 75 66             	rex.X jne 7fa <.debug_str+0x7fa>
        m_OffsetX = 0;
 794:	66 65 72 73          	data16 gs jb 80b <.debug_str+0x80b>
 798:	00 43 61             	add    %al,0x61(%rbx)
        if (m_OffsetY >= 22)
 79b:	6c                   	insb   (%dx),%es:(%rdi)
 79c:	63 75 6c             	movsxd 0x6c(%rbp),%esi
 79f:	61                   	(bad)  
 7a0:	74 6f                	je     811 <.debug_str+0x811>
 7a2:	72 00                	jb     7a4 <.debug_str+0x7a4>
 7a4:	4e 75 6d             	rex.WRX jne 814 <.debug_str+0x814>
            m_TextPresenter->MoveUp();
 7a7:	70 61                	jo     80a <.debug_str+0x80a>
 7a9:	64 50                	fs push %rax
 7ab:	65 72 69             	gs jb  817 <.debug_str+0x817>
 7ae:	6f                   	outsl  %ds:(%rsi),(%dx)
 7af:	64 00 51 75          	add    %dl,%fs:0x75(%rcx)
 7b3:	65 73 74             	gs jae 82a <.debug_str+0x82a>
 7b6:	69 6f 6e 00 5f 5a 4e 	imul   $0x4e5a5f00,0x6e(%rdi),%ebp
            RenderModifiers();
 7bd:	35 56 69 64 65       	xor    $0x65646956,%eax
 7c2:	6f                   	outsl  %ds:(%rsi),(%dx)
 7c3:	31 37                	xor    %esi,(%rdi)
 7c5:	54                   	push   %rsp
 7c6:	65 78 74             	gs js  83d <.debug_str+0x83d>
 7c9:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 7cb:	64 65 50             	fs gs push %rax
 7ce:	72 65                	jb     835 <.debug_str+0x835>
 7d0:	73 65                	jae    837 <.debug_str+0x837>
        } else m_OffsetY++;
 7d2:	6e                   	outsb  %ds:(%rsi),(%dx)
 7d3:	74 65                	je     83a <.debug_str+0x83a>
 7d5:	72 36                	jb     80d <.debug_str+0x80d>
 7d7:	4d 6f                	rex.WRB outsl %ds:(%rsi),(%dx)
 7d9:	76 65                	jbe    840 <.debug_str+0x840>
 7db:	55                   	push   %rbp
 7dc:	70 45                	jo     823 <.debug_str+0x823>
 7de:	76 00                	jbe    7e0 <.debug_str+0x7e0>
 7e0:	6d                   	insl   (%dx),%es:(%rdi)
 7e1:	5f                   	pop    %rdi
 7e2:	4f                   	rex.WRXB
 7e3:	66 66 73 65          	data16 data16 jae 84c <.debug_str+0x84c>
 7e7:	74 59                	je     842 <.debug_str+0x842>
 7e9:	00 53 70             	add    %dl,0x70(%rbx)
 7ec:	61                   	(bad)  
 7ed:	63 65 00             	movsxd 0x0(%rbp),%esp
 7f0:	53                   	push   %rbx
 7f1:	6c                   	insb   (%dx),%es:(%rdi)
 7f2:	65 65 70 00          	gs gs jo 7f6 <.debug_str+0x7f6>
 7f6:	5f                   	pop    %rdi
 7f7:	5a                   	pop    %rdx
 7f8:	4e 37                	rex.WRX (bad) 
 7fa:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 7fc:	6e                   	outsb  %ds:(%rsi),(%dx)
 7fd:	73 6f                	jae    86e <Console::AddChar(char)+0x17c>
 7ff:	6c                   	insb   (%dx),%es:(%rdi)
 800:	65 37                	gs (bad) 
 802:	41                   	rex.B
 803:	64 64 43 68 61 72 45 	fs fs rex.XB push $0x63457261
 80a:	63 
 80b:	00 54 65 78          	add    %dl,0x78(%rbp,%riz,2)
 80f:	74 00                	je     811 <.debug_str+0x811>
 811:	4b                   	rex.WXB
 812:	65 79 4d             	gs jns 862 <Console::AddChar(char)+0x170>
 815:	6f                   	outsl  %ds:(%rsi),(%dx)
 816:	64 69 66 69 65 72 73 	imul   $0x737265,%fs:0x69(%rsi),%esp
 81d:	00 
 81e:	4c 53                	rex.WR push %rbx
 820:	68 69 66 74 00       	push   $0x746669
 825:	5f                   	pop    %rdi
 826:	5a                   	pop    %rdx
 827:	32 32                	xor    (%rdx),%dh
 829:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 82b:	6e                   	outsb  %ds:(%rsi),(%dx)
 82c:	73 6f                	jae    89d <Console::AddChar(char)+0x1ab>
 82e:	6c                   	insb   (%dx),%es:(%rdi)
 82f:	65 4b                	gs rex.WXB
 831:	65 79 45             	gs jns 879 <Console::AddChar(char)+0x187>
 834:	76 65                	jbe    89b <Console::AddChar(char)+0x1a9>
 836:	6e                   	outsb  %ds:(%rsi),(%dx)
 837:	74 48                	je     881 <Console::AddChar(char)+0x18f>
 839:	61                   	(bad)  
 83a:	6e                   	outsb  %ds:(%rsi),(%dx)
 83b:	64 6c                	fs insb (%dx),%es:(%rdi)
 83d:	65 72 4e             	gs jb  88e <Console::AddChar(char)+0x19c>
 840:	35 49 6e 70 75       	xor    $0x75706e49,%eax
 845:	74 33                	je     87a <Console::AddChar(char)+0x188>
 847:	4b                   	rex.WXB
 848:	65 79 45             	gs jns 890 <Console::AddChar(char)+0x19e>
 84b:	62                   	.byte 0x62
	...

Disassembly of section .debug_line_str:

0000000000000000 <.debug_line_str>:
{
   0:	2f                   	(bad)  
   1:	68 6f 6d 65 2f       	push   $0x2f656d6f
   6:	75 6d                	jne    75 <.debug_line_str+0x75>
   8:	61                   	(bad)  
   9:	72 69                	jb     74 <.debug_line_str+0x74>
   b:	6e                   	outsb  %ds:(%rsi),(%dx)
   c:	2f                   	(bad)  
   d:	73 6f                	jae    7e <.debug_line_str+0x7e>
   f:	75 72                	jne    83 <.debug_line_str+0x83>
    Console *console = g_Console;
  11:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  14:	6e                   	outsb  %ds:(%rsi),(%dx)
  15:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  1c:	65 
  1d:	72 6e                	jb     8d <.debug_line_str+0x8d>
  1f:	65 6c                	gs insb (%dx),%es:(%rdi)
    console->AcceptKey(key, isPressed);
  21:	00 73 72             	add    %dh,0x72(%rbx)
  24:	63 2f                	movsxd (%rdi),%ebp
  26:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  28:	70 75                	jo     9f <.debug_line_str+0x9f>
  2a:	74 2f                	je     5b <.debug_line_str+0x5b>
  2c:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  2e:	6e                   	outsb  %ds:(%rsi),(%dx)
  2f:	73 6f                	jae    a0 <.debug_line_str+0xa0>
  31:	6c                   	insb   (%dx),%es:(%rdi)
  32:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  35:	70 6c                	jo     a3 <.debug_line_str+0xa3>
  37:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  3b:	2f                   	(bad)  
  3c:	68 6f 6d 65 2f       	push   $0x2f656d6f
Console::Console()
  41:	75 6d                	jne    b0 <.debug_line_str+0xb0>
  43:	61                   	(bad)  
  44:	72 69                	jb     af <.debug_line_str+0xaf>
  46:	6e                   	outsb  %ds:(%rsi),(%dx)
  47:	2f                   	(bad)  
  48:	73 6f                	jae    b9 <.debug_line_str+0xb9>
  4a:	75 72                	jne    be <.debug_line_str+0xbe>
  4c:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  : m_TextPresenter(new Video::TextModePresenter()),
  4f:	6e                   	outsb  %ds:(%rsi),(%dx)
  50:	69 74 65 4f 53 2f 4b 	imul   $0x654b2f53,0x4f(%rbp,%riz,2),%esi
  57:	65 
  58:	72 6e                	jb     c8 <.debug_line_str+0xc8>
  5a:	65 6c                	gs insb (%dx),%es:(%rdi)
  5c:	00 73 72             	add    %dh,0x72(%rbx)
  5f:	63 2f                	movsxd (%rdi),%ebp
  61:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  63:	70 75                	jo     da <.debug_line_str+0xda>
  65:	74 00                	je     67 <.debug_line_str+0x67>
  67:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  6e:	2f                   	(bad)  
  6f:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  71:	70 75                	jo     e8 <.debug_line_str+0xe8>
  73:	74 00                	je     75 <.debug_line_str+0x75>
  75:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
    m_KeyModifiers(0)
  7c:	2f                   	(bad)  
  7d:	56                   	push   %rsi
  7e:	69 64 65 6f 00 2f 68 	imul   $0x6f682f00,0x6f(%rbp,%riz,2),%esp
  85:	6f 
    m_Buffers(new uint8_t[23 * 80]),
  86:	6d                   	insl   (%dx),%es:(%rdi)
  87:	65 2f                	gs (bad) 
  89:	75 6d                	jne    f8 <.debug_line_str+0xf8>
  8b:	61                   	(bad)  
  8c:	72 69                	jb     f7 <.debug_line_str+0xf7>
  8e:	6e                   	outsb  %ds:(%rsi),(%dx)
  8f:	2f                   	(bad)  
  90:	62 75                	(bad)  
  92:	69 6c 64 2f 78 38 36 	imul   $0x5f363878,0x2f(%rsp,%riz,2),%ebp
  99:	5f 
  9a:	36 34 2d             	ss xor $0x2d,%al
    m_OffsetX(0),
  9d:	65 6c                	gs insb (%dx),%es:(%rdi)
  9f:	66 2f                	data16 (bad) 
  a1:	6c                   	insb   (%dx),%es:(%rdi)
  a2:	69 62 2f 67 63 63 2f 	imul   $0x2f636367,0x2f(%rdx),%esp
    m_OffsetY(0),
  a9:	78 38                	js     e3 <.debug_line_str+0xe3>
    Refresh();
  ab:	36 5f                	ss pop %rdi
  ad:	36 34 2d             	ss xor $0x2d,%al
  b0:	65 6c                	gs insb (%dx),%es:(%rdi)
  b2:	66 2f                	data16 (bad) 
  b4:	31 31                	xor    %esi,(%rcx)
  b6:	2e 32 2e             	cs xor (%rsi),%ch
  b9:	30 2f                	xor    %ch,(%rdi)
  bb:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
}
  c2:	00 43 6f             	add    %al,0x6f(%rbx)
  c5:	6e                   	outsb  %ds:(%rsi),(%dx)
Console::~Console()
  c6:	73 6f                	jae    137 <Console::Render()+0x61>
  c8:	6c                   	insb   (%dx),%es:(%rdi)
  c9:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  cc:	70 6c                	jo     13a <Console::Render()+0x64>
  ce:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
}
  d2:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
  d4:	6e                   	outsb  %ds:(%rsi),(%dx)
  d5:	73 6f                	jae    146 <Console::Render()+0x70>
{
  d7:	6c                   	insb   (%dx),%es:(%rdi)
  d8:	65 49 6d             	gs rex.WB insl (%dx),%es:(%rdi)
  db:	70 6c                	jo     149 <Console::Refresh()+0x1>
  dd:	2e 63 63 00          	cs movsxd 0x0(%rbx),%esp
  e1:	4b                   	rex.WXB
  e2:	65 79 43             	gs jns 128 <Console::Render()+0x52>
    RenderModifiers();
  e5:	6f                   	outsl  %ds:(%rsi),(%dx)
  e6:	64 65 2e 68 00 56 69 	fs gs cs push $0x64695600
  ed:	64 
  ee:	65 6f                	outsl  %gs:(%rsi),(%dx)
  f0:	2e 68 00 54 65 78    	cs push $0x78655400
    m_TextPresenter->Text({ 0, 2 }, '>', 15, 0);
  f6:	74 4d                	je     145 <Console::Render()+0x6f>
  f8:	6f                   	outsl  %ds:(%rsi),(%dx)
  f9:	64 65 50             	fs gs push %rax
  fc:	72 65                	jb     163 <Console::Refresh()+0x1b>
  fe:	73 65                	jae    165 <Console::Refresh()+0x1d>
 100:	6e                   	outsb  %ds:(%rsi),(%dx)
 101:	74 65                	je     168 <Console::Refresh()+0x20>
 103:	72 2e                	jb     133 <Console::Render()+0x5d>
 105:	68 00 43 6f 6e       	push   $0x6e6f4300
 10a:	73 6f                	jae    17b <Console::Refresh()+0x33>
 10c:	6c                   	insb   (%dx),%es:(%rdi)
 10d:	65 2e 68 00 73 74 64 	gs cs push $0x64747300
 114:	69 6e 74 2d 67 63 63 	imul   $0x6363672d,0x74(%rsi),%ebp
 11b:	2e                   	cs
 11c:	68                   	.byte 0x68
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
{
   0:	00 47 43             	add    %al,0x43(%rdi)
   3:	43 3a 20             	rex.XB cmp (%r8),%spl
   6:	28 47 4e             	sub    %al,0x4e(%rdi)
   9:	55                   	push   %rbp
   a:	29 20                	sub    %esp,(%rax)
   c:	31 31                	xor    %esi,(%rcx)
   e:	2e 32 2e             	cs xor (%rsi),%ch
    Console *console = g_Console;
  11:	30 00                	xor    %al,(%rax)

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	00 00                	add    %al,(%rax)
   6:	00 00                	add    %al,(%rax)
   8:	01 7a 52             	add    %edi,0x52(%rdx)
   b:	00 01                	add    %al,(%rcx)
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    %ebx,(%rbx)
  11:	0c 07                	or     $0x7,%al
  13:	08 90 01 00 00 1c    	or     %dl,0x1c000001(%rax)
  19:	00 00                	add    %al,(%rax)
  1b:	00 1c 00             	add    %bl,(%rax,%rax,1)
  1e:	00 00                	add    %al,(%rax)
  20:	00 00                	add    %al,(%rax)
  22:	00 00                	add    %al,(%rax)
  24:	40 00 00             	rex add %al,(%rax)
  27:	00 00                	add    %al,(%rax)
  29:	41 0e                	rex.B (bad) 
  2b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  31:	7b c6                	jnp    fffffffffffffff9 <Console::AddChar(char)+0xfffffffffffff907>
  33:	0c 07                	or     $0x7,%al
  35:	08 00                	or     %al,(%rax)
  37:	00 20                	add    %ah,(%rax)
  39:	00 00                	add    %al,(%rax)
  3b:	00 3c 00             	add    %bh,(%rax,%rax,1)
  3e:	00 00                	add    %al,(%rax)
  40:	00 00                	add    %al,(%rax)
  42:	00 00                	add    %al,(%rax)
  44:	85 00                	test   %eax,(%rax)
  46:	00 00                	add    %al,(%rax)
  48:	00 41 0e             	add    %al,0xe(%rcx)
  4b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  51:	45 83 03 02          	rex.RB addl $0x2,(%r11)
  55:	7b c6                	jnp    1d <.eh_frame+0x1d>
  57:	c3                   	ret    
  58:	0c 07                	or     $0x7,%al
  5a:	08 00                	or     %al,(%rax)
  5c:	1c 00                	sbb    $0x0,%al
  5e:	00 00                	add    %al,(%rax)
  60:	60                   	(bad)  
  61:	00 00                	add    %al,(%rax)
  63:	00 00                	add    %al,(%rax)
  65:	00 00                	add    %al,(%rax)
  67:	00 0f                	add    %cl,(%rdi)
  69:	00 00                	add    %al,(%rax)
  6b:	00 00                	add    %al,(%rax)
  6d:	41 0e                	rex.B (bad) 
  6f:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  75:	4a c6                	rex.WX (bad) 
  77:	0c 07                	or     $0x7,%al
  79:	08 00                	or     %al,(%rax)
  7b:	00 20                	add    %ah,(%rax)
  7d:	00 00                	add    %al,(%rax)
  7f:	00 80 00 00 00 00    	add    %al,0x0(%rax)
  85:	00 00                	add    %al,(%rax)
  87:	00 72 00             	add    %dh,0x0(%rdx)
  8a:	00 00                	add    %al,(%rax)
  8c:	00 41 0e             	add    %al,0xe(%rcx)
  8f:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  95:	45 83 03 02          	rex.RB addl $0x2,(%r11)
  99:	68 c6 c3 0c 07       	push   $0x70cc3c6
  9e:	08 00                	or     %al,(%rax)
  a0:	1c 00                	sbb    $0x0,%al
  a2:	00 00                	add    %al,(%rax)
  a4:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  a5:	00 00                	add    %al,(%rax)
  a7:	00 00                	add    %al,(%rax)
  a9:	00 00                	add    %al,(%rax)
  ab:	00 3b                	add    %bh,(%rbx)
  ad:	00 00                	add    %al,(%rax)
  af:	00 00                	add    %al,(%rax)
  b1:	41 0e                	rex.B (bad) 
  b3:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  b9:	76 c6                	jbe    81 <.eh_frame+0x81>
  bb:	0c 07                	or     $0x7,%al
  bd:	08 00                	or     %al,(%rax)
  bf:	00 34 00             	add    %dh,(%rax,%rax,1)
  c2:	00 00                	add    %al,(%rax)
  c4:	c4                   	(bad)  
  c5:	00 00                	add    %al,(%rax)
  c7:	00 00                	add    %al,(%rax)
  c9:	00 00                	add    %al,(%rax)
  cb:	00 8d 02 00 00 00    	add    %cl,0x2(%rbp)
  d1:	41 0e                	rex.B (bad) 
  d3:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  d9:	4d 8f 03             	rex.WRB pop (%r11)
  dc:	8e 04 8d 05 8c 06 83 	mov    -0x7cf973fb(,%rcx,4),%es
  e3:	07                   	(bad)  
  e4:	03 72 02             	add    0x2(%rdx),%esi
  e7:	c3                   	ret    
  e8:	42 cc                	rex.X int3 
  ea:	42 cd 42             	rex.X int $0x42
  ed:	ce                   	(bad)  
  ee:	42 cf                	rex.X iret 
  f0:	41 c6                	rex.B (bad) 
  f2:	0c 07                	or     $0x7,%al
  f4:	08 00                	or     %al,(%rax)
  f6:	00 00                	add    %al,(%rax)
  f8:	20 00                	and    %al,(%rax)
  fa:	00 00                	add    %al,(%rax)
  fc:	fc                   	cld    
  fd:	00 00                	add    %al,(%rax)
  ff:	00 00                	add    %al,(%rax)
 101:	00 00                	add    %al,(%rax)
 103:	00 e0                	add    %ah,%al
 105:	02 00                	add    (%rax),%al
 107:	00 00                	add    %al,(%rax)
 109:	41 0e                	rex.B (bad) 
 10b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
 111:	45 83 03 03          	rex.RB addl $0x3,(%r11)
 115:	d6                   	(bad)  
 116:	02 c6                	add    %dh,%al
 118:	c3                   	ret    
 119:	0c 07                	or     $0x7,%al
 11b:	08 20                	or     %ah,(%rax)
 11d:	00 00                	add    %al,(%rax)
 11f:	00 20                	add    %ah,(%rax)
 121:	01 00                	add    %eax,(%rax)
 123:	00 00                	add    %al,(%rax)
 125:	00 00                	add    %al,(%rax)
 127:	00 f5                	add    %dh,%ch
 129:	00 00                	add    %al,(%rax)
 12b:	00 00                	add    %al,(%rax)
 12d:	41 0e                	rex.B (bad) 
 12f:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
 135:	02 f0                	add    %al,%dh
 137:	c6                   	(bad)  
 138:	0c 07                	or     $0x7,%al
 13a:	08 00                	or     %al,(%rax)
 13c:	00 00                	add    %al,(%rax)
	...
